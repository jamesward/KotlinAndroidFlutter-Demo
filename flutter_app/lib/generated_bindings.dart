// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int32, id_t, ffi.Pointer<siginfo_t>, ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  int atexit_b(
    ObjCBlock_ffiVoid arg0,
  ) {
    return _atexit_b(
      arg0._id,
    );
  }

  late final _atexit_bPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_ObjCBlock>)>>(
          'atexit_b');
  late final _atexit_b =
      _atexit_bPtr.asFunction<int Function(ffi.Pointer<_ObjCBlock>)>();

  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.reserved = 0;
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    d.ref.copy_helper = ffi.nullptr;
    d.ref.dispose_helper = ffi.nullptr;
    d.ref.signature = ffi.nullptr;
    return d;
  }

  late final _objc_block_desc1 = _newBlockDesc1();
  late final _objc_concrete_global_block1 =
      _lookup<ffi.Void>('_NSConcreteGlobalBlock');
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.isa = _objc_concrete_global_block1;
    b.ref.flags = 0;
    b.ref.reserved = 0;
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    final copy = _Block_copy(b.cast()).cast<_ObjCBlock>();
    pkg_ffi.calloc.free(b);
    return copy;
  }

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_copy(
      value,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_release(
      value,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final _objc_releaseFinalizer2 =
      ffi.NativeFinalizer(__Block_releasePtr.cast());
  ffi.Pointer<ffi.Void> bsearch_b(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _bsearch_b(
      __key,
      __base,
      __nel,
      __width,
      __compar._id,
    );
  }

  late final _bsearch_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<_ObjCBlock>)>>('bsearch_b');
  late final _bsearch_b = _bsearch_bPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int heapsort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _heapsort_b(
      __base,
      __nel,
      __width,
      __compar._id,
    );
  }

  late final _heapsort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<_ObjCBlock>)>>('heapsort_b');
  late final _heapsort_b = _heapsort_bPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _mergesort_b(
      __base,
      __nel,
      __width,
      __compar._id,
    );
  }

  late final _mergesort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<_ObjCBlock>)>>('mergesort_b');
  late final _mergesort_b = _mergesort_bPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _psort_b(
      __base,
      __nel,
      __width,
      __compar._id,
    );
  }

  late final _psort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<_ObjCBlock>)>>('psort_b');
  late final _psort_b = _psort_bPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ObjCBlock_ffiInt_ffiVoid_ffiVoid __compar,
  ) {
    return _qsort_b(
      __base,
      __nel,
      __width,
      __compar._id,
    );
  }

  late final _qsort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<_ObjCBlock>)>>('qsort_b');
  late final _qsort_b = _qsort_bPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> sel_getName(
    ffi.Pointer<ObjCSel> sel,
  ) {
    return _sel_getName(
      sel,
    );
  }

  late final _sel_getNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCSel>)>>('sel_getName');
  late final _sel_getName = _sel_getNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_registerName1(
      str,
    );
  }

  late final _sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final _sel_registerName1 = _sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> object_getClassName(
    NSObject? obj,
  ) {
    return _object_getClassName(
      obj?._id ?? ffi.nullptr,
    );
  }

  late final _object_getClassNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>)>>('object_getClassName');
  late final _object_getClassName = _object_getClassNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ffi.Void> object_getIndexedIvars(
    NSObject? obj,
  ) {
    return _object_getIndexedIvars(
      obj?._id ?? ffi.nullptr,
    );
  }

  late final _object_getIndexedIvarsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>)>>('object_getIndexedIvars');
  late final _object_getIndexedIvars = _object_getIndexedIvarsPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>)>();

  bool sel_isMapped(
    ffi.Pointer<ObjCSel> sel,
  ) {
    return _sel_isMapped(
      sel,
    );
  }

  late final _sel_isMappedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ObjCSel>)>>(
          'sel_isMapped');
  late final _sel_isMapped =
      _sel_isMappedPtr.asFunction<bool Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> sel_getUid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_getUid(
      str,
    );
  }

  late final _sel_getUidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>>('sel_getUid');
  late final _sel_getUid = _sel_getUidPtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  NSObject? objc_retainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_retainedObject(
              obj,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_retainedObject(
              obj,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_retainedObjectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ObjCObject> Function(objc_objectptr_t)>>(
      'objc_retainedObject');
  late final _objc_retainedObject = _objc_retainedObjectPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(objc_objectptr_t)>();

  NSObject? objc_unretainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_unretainedObject(
              obj,
            ).address ==
            0
        ? null
        : NSObject._(
            _objc_unretainedObject(
              obj,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _objc_unretainedObjectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ObjCObject> Function(objc_objectptr_t)>>(
      'objc_unretainedObject');
  late final _objc_unretainedObject = _objc_unretainedObjectPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(objc_objectptr_t)>();

  objc_objectptr_t objc_unretainedPointer(
    NSObject? obj,
  ) {
    return _objc_unretainedPointer(
      obj?._id ?? ffi.nullptr,
    );
  }

  late final _objc_unretainedPointerPtr = _lookup<
          ffi
          .NativeFunction<objc_objectptr_t Function(ffi.Pointer<ObjCObject>)>>(
      'objc_unretainedPointer');
  late final _objc_unretainedPointer = _objc_unretainedPointerPtr
      .asFunction<objc_objectptr_t Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    if (clazz == ffi.nullptr) {
      throw Exception('Failed to load Objective-C class: $name');
    }
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer11 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_Protocol1 = _getClass1("Protocol");
  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      protocol,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  IMP _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSInvocation1 = _getClass1("NSInvocation");
  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMethodSignature1 = _getClass1("NSMethodSignature");
  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  bool _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  int _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_length1 = _registerName1("length");
  late final _sel_characterAtIndex_1 = _registerName1("characterAtIndex:");
  int _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          unichar Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  instancetype _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_substringFromIndex_1 = _registerName1("substringFromIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int from,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
      from,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_substringToIndex_1 = _registerName1("substringToIndex:");
  late final _sel_substringWithRange_1 = _registerName1("substringWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_getCharacters_range_1 =
      _registerName1("getCharacters:range:");
  void _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> buffer,
    NSRange range,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
      buffer,
      range,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, NSRange)>();

  late final _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
      string,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_compare_options_1 = _registerName1("compare:options:");
  int _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      string,
      mask,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_compare_options_range_1 =
      _registerName1("compare:options:range:");
  int _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    NSRange rangeOfReceiverToCompare,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_compare_options_range_locale_1 =
      _registerName1("compare:options:range:locale:");
  int _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    NSRange rangeOfReceiverToCompare,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
      locale,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_caseInsensitiveCompare_1 =
      _registerName1("caseInsensitiveCompare:");
  late final _sel_localizedCompare_1 = _registerName1("localizedCompare:");
  late final _sel_localizedCaseInsensitiveCompare_1 =
      _registerName1("localizedCaseInsensitiveCompare:");
  late final _sel_localizedStandardCompare_1 =
      _registerName1("localizedStandardCompare:");
  late final _sel_isEqualToString_1 = _registerName1("isEqualToString:");
  bool _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_hasPrefix_1 = _registerName1("hasPrefix:");
  late final _sel_hasSuffix_1 = _registerName1("hasSuffix:");
  late final _sel_commonPrefixWithString_options_1 =
      _registerName1("commonPrefixWithString:options:");
  ffi.Pointer<ObjCObject> _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
    int mask,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      str,
      mask,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_containsString_1 = _registerName1("containsString:");
  late final _sel_localizedCaseInsensitiveContainsString_1 =
      _registerName1("localizedCaseInsensitiveContainsString:");
  late final _sel_localizedStandardContainsString_1 =
      _registerName1("localizedStandardContainsString:");
  late final _sel_localizedStandardRangeOfString_1 =
      _registerName1("localizedStandardRangeOfString:");
  NSRange _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      str,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfString_1 = _registerName1("rangeOfString:");
  late final _sel_rangeOfString_options_1 =
      _registerName1("rangeOfString:options:");
  NSRange _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      searchString,
      mask,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_rangeOfString_options_range_1 =
      _registerName1("rangeOfString:options:range:");
  NSRange _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _class_NSLocale1 = _getClass1("NSLocale");
  late final _sel_rangeOfString_options_range_locale_1 =
      _registerName1("rangeOfString:options:range:locale:");
  NSRange _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    NSRange rangeOfReceiverToSearch,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
      locale,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _class_NSCharacterSet1 = _getClass1("NSCharacterSet");
  late final _sel_rangeOfCharacterFromSet_1 =
      _registerName1("rangeOfCharacterFromSet:");
  NSRange _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchSet,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
      searchSet,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfCharacterFromSet_options_1 =
      _registerName1("rangeOfCharacterFromSet:options:");
  NSRange _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchSet,
    int mask,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      searchSet,
      mask,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_rangeOfCharacterFromSet_options_range_1 =
      _registerName1("rangeOfCharacterFromSet:options:range:");
  NSRange _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchSet,
    int mask,
    NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
      searchSet,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_rangeOfComposedCharacterSequenceAtIndex_1 =
      _registerName1("rangeOfComposedCharacterSequenceAtIndex:");
  NSRange _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_rangeOfComposedCharacterSequencesForRange_1 =
      _registerName1("rangeOfComposedCharacterSequencesForRange:");
  NSRange _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      NSRange Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_stringByAppendingString_1 =
      _registerName1("stringByAppendingString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByAppendingFormat_1 =
      _registerName1("stringByAppendingFormat:");
  late final _sel_doubleValue1 = _registerName1("doubleValue");
  late final _objc_msgSend_useVariants1 = ffi.Abi.current() == ffi.Abi.iosX64 ||
      ffi.Abi.current() == ffi.Abi.macosX64;
  double _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_34_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_34_fpret(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_34_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_34_fpret = __objc_msgSend_34_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_floatValue1 = _registerName1("floatValue");
  double _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_35_fpret(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_35_fpret(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_35_fpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend_fpret');
  late final __objc_msgSend_35_fpret = __objc_msgSend_35_fpretPtr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_integerValue1 = _registerName1("integerValue");
  int _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_longLongValue1 = _registerName1("longLongValue");
  int _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_boolValue1 = _registerName1("boolValue");
  late final _sel_uppercaseString1 = _registerName1("uppercaseString");
  ffi.Pointer<ObjCObject> _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_lowercaseString1 = _registerName1("lowercaseString");
  late final _sel_capitalizedString1 = _registerName1("capitalizedString");
  late final _sel_localizedUppercaseString1 =
      _registerName1("localizedUppercaseString");
  late final _sel_localizedLowercaseString1 =
      _registerName1("localizedLowercaseString");
  late final _sel_localizedCapitalizedString1 =
      _registerName1("localizedCapitalizedString");
  late final _sel_uppercaseStringWithLocale_1 =
      _registerName1("uppercaseStringWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_lowercaseStringWithLocale_1 =
      _registerName1("lowercaseStringWithLocale:");
  late final _sel_capitalizedStringWithLocale_1 =
      _registerName1("capitalizedStringWithLocale:");
  late final _sel_getLineStart_end_contentsEnd_forRange_1 =
      _registerName1("getLineStart:end:contentsEnd:forRange:");
  void _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> startPtr,
    ffi.Pointer<NSUInteger> lineEndPtr,
    ffi.Pointer<NSUInteger> contentsEndPtr,
    NSRange range,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
      startPtr,
      lineEndPtr,
      contentsEndPtr,
      range,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>,
          ffi.Pointer<NSUInteger>,
          ffi.Pointer<NSUInteger>,
          NSRange)>();

  late final _sel_lineRangeForRange_1 = _registerName1("lineRangeForRange:");
  late final _sel_getParagraphStart_end_contentsEnd_forRange_1 =
      _registerName1("getParagraphStart:end:contentsEnd:forRange:");
  late final _sel_paragraphRangeForRange_1 =
      _registerName1("paragraphRangeForRange:");
  late final _sel_enumerateSubstringsInRange_options_usingBlock_1 =
      _registerName1("enumerateSubstringsInRange:options:usingBlock:");
  void _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateLinesUsingBlock_1 =
      _registerName1("enumerateLinesUsingBlock:");
  void _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_UTF8String1 = _registerName1("UTF8String");
  ffi.Pointer<ffi.Char> _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_fastestEncoding1 = _registerName1("fastestEncoding");
  late final _sel_smallestEncoding1 = _registerName1("smallestEncoding");
  late final _class_NSData1 = _getClass1("NSData");
  late final _sel_bytes1 = _registerName1("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_dataUsingEncoding_allowLossyConversion_1 =
      _registerName1("dataUsingEncoding:allowLossyConversion:");
  ffi.Pointer<ObjCObject> _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
    bool lossy,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
      encoding,
      lossy,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringEncoding,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, bool)>();

  late final _sel_dataUsingEncoding_1 = _registerName1("dataUsingEncoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_canBeConvertedToEncoding_1 =
      _registerName1("canBeConvertedToEncoding:");
  bool _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_cStringUsingEncoding_1 =
      _registerName1("cStringUsingEncoding:");
  ffi.Pointer<ffi.Char> _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_getCString_maxLength_encoding_1 =
      _registerName1("getCString:maxLength:encoding:");
  bool _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferCount,
    int encoding,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      buffer,
      maxBufferCount,
      encoding,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, int)>();

  late final _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1 =
      _registerName1(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
  bool _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    int maxBufferCount,
    ffi.Pointer<NSUInteger> usedBufferCount,
    int encoding,
    int options,
    NSRange range,
    NSRangePointer leftover,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      buffer,
      maxBufferCount,
      usedBufferCount,
      encoding,
      options,
      range,
      leftover,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              ffi.Pointer<NSUInteger>,
              NSStringEncoding,
              ffi.Int32,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<NSUInteger>,
          int,
          int,
          NSRange,
          NSRangePointer)>();

  late final _sel_maximumLengthOfBytesUsingEncoding_1 =
      _registerName1("maximumLengthOfBytesUsingEncoding:");
  int _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int enc,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      enc,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_lengthOfBytesUsingEncoding_1 =
      _registerName1("lengthOfBytesUsingEncoding:");
  late final _sel_availableStringEncodings1 =
      _registerName1("availableStringEncodings");
  ffi.Pointer<NSStringEncoding> _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSStringEncoding> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      ffi.Pointer<NSStringEncoding> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_localizedNameOfStringEncoding_1 =
      _registerName1("localizedNameOfStringEncoding:");
  late final _sel_defaultCStringEncoding1 =
      _registerName1("defaultCStringEncoding");
  late final _sel_decomposedStringWithCanonicalMapping1 =
      _registerName1("decomposedStringWithCanonicalMapping");
  late final _sel_precomposedStringWithCanonicalMapping1 =
      _registerName1("precomposedStringWithCanonicalMapping");
  late final _sel_decomposedStringWithCompatibilityMapping1 =
      _registerName1("decomposedStringWithCompatibilityMapping");
  late final _sel_precomposedStringWithCompatibilityMapping1 =
      _registerName1("precomposedStringWithCompatibilityMapping");
  late final _class_NSArray1 = _getClass1("NSArray");
  late final _sel_count1 = _registerName1("count");
  late final _sel_objectAtIndex_1 = _registerName1("objectAtIndex:");
  ObjectType _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          ObjectType Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      ObjectType Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjectType> objects,
    int cnt,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjectType>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjectType>, int)>();

  late final _sel_arrayByAddingObject_1 =
      _registerName1("arrayByAddingObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType1 anObject,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ObjectType1)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType1)>();

  late final _sel_arrayByAddingObjectsFromArray_1 =
      _registerName1("arrayByAddingObjectsFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_componentsJoinedByString_1 =
      _registerName1("componentsJoinedByString:");
  late final _sel_containsObject_1 = _registerName1("containsObject:");
  late final _sel_description1 = _registerName1("description");
  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithLocale_indent_1 =
      _registerName1("descriptionWithLocale:indent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
    int level,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      locale,
      level,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_firstObjectCommonWithArray_1 =
      _registerName1("firstObjectCommonWithArray:");
  ObjectType1 _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ObjectType1 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      ObjectType1 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_getObjects_range_1 = _registerName1("getObjects:range:");
  void _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjectType1> objects,
    NSRange range,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      objects,
      range,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjectType1>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjectType1>, NSRange)>();

  late final _sel_indexOfObject_1 = _registerName1("indexOfObject:");
  int _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType1 anObject,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType1)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType1)>();

  late final _sel_indexOfObject_inRange_1 =
      _registerName1("indexOfObject:inRange:");
  int _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType1 anObject,
    NSRange range,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType1, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType1,
          NSRange)>();

  late final _sel_indexOfObjectIdenticalTo_1 =
      _registerName1("indexOfObjectIdenticalTo:");
  late final _sel_indexOfObjectIdenticalTo_inRange_1 =
      _registerName1("indexOfObjectIdenticalTo:inRange:");
  late final _sel_isEqualToArray_1 = _registerName1("isEqualToArray:");
  bool _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstObject1 = _registerName1("firstObject");
  late final _sel_lastObject1 = _registerName1("lastObject");
  late final _class_NSEnumerator1 = _getClass1("NSEnumerator");
  late final _sel_nextObject1 = _registerName1("nextObject");
  late final _sel_allObjects1 = _registerName1("allObjects");
  late final _sel_objectEnumerator1 = _registerName1("objectEnumerator");
  ffi.Pointer<ObjCObject> _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_reverseObjectEnumerator1 =
      _registerName1("reverseObjectEnumerator");
  late final _sel_sortedArrayHint1 = _registerName1("sortedArrayHint");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_sortedArrayUsingFunction_context_1 =
      _registerName1("sortedArrayUsingFunction:context:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(
                    ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      comparator,
      context,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(
                          ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(
                      ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortedArrayUsingFunction_context_hint_1 =
      _registerName1("sortedArrayUsingFunction:context:hint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(
                    ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ObjCObject> hint,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      comparator,
      context,
      hint,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(
                          ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(
                      ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_sortedArrayUsingSelector_1 =
      _registerName1("sortedArrayUsingSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> comparator,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
      comparator,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_subarrayWithRange_1 = _registerName1("subarrayWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _class_NSURL1 = _getClass1("NSURL");
  late final _class_NSError1 = _getClass1("NSError");
  late final _sel_initWithDomain_code_userInfo_1 =
      _registerName1("initWithDomain:code:userInfo:");
  instancetype _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSErrorDomain domain,
    int code,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
      domain,
      code,
      dict,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSErrorDomain,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSErrorDomain, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_errorWithDomain_code_userInfo_1 =
      _registerName1("errorWithDomain:code:userInfo:");
  late final _sel_domain1 = _registerName1("domain");
  late final _sel_code1 = _registerName1("code");
  late final _sel_userInfo1 = _registerName1("userInfo");
  late final _sel_localizedDescription1 =
      _registerName1("localizedDescription");
  late final _sel_localizedFailureReason1 =
      _registerName1("localizedFailureReason");
  ffi.Pointer<ObjCObject> _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_localizedRecoverySuggestion1 =
      _registerName1("localizedRecoverySuggestion");
  late final _sel_localizedRecoveryOptions1 =
      _registerName1("localizedRecoveryOptions");
  ffi.Pointer<ObjCObject> _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_recoveryAttempter1 = _registerName1("recoveryAttempter");
  ffi.Pointer<ObjCObject> _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_helpAnchor1 = _registerName1("helpAnchor");
  late final _sel_underlyingErrors1 = _registerName1("underlyingErrors");
  ffi.Pointer<ObjCObject> _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setUserInfoValueProviderForDomain_provider_1 =
      _registerName1("setUserInfoValueProviderForDomain:provider:");
  void _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSErrorDomain errorDomain,
    ffi.Pointer<_ObjCBlock> provider,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
      errorDomain,
      provider,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSErrorDomain, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSErrorDomain, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_userInfoValueProviderForDomain_1 =
      _registerName1("userInfoValueProviderForDomain:");
  ffi.Pointer<_ObjCBlock> _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> err,
    NSErrorUserInfoKey userInfoKey,
    NSErrorDomain errorDomain,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
      err,
      userInfoKey,
      errorDomain,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSErrorUserInfoKey,
              NSErrorDomain)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      ffi.Pointer<_ObjCBlock> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSErrorUserInfoKey,
          NSErrorDomain)>();

  late final _sel_kotlinException1 = _registerName1("kotlinException");
  late final _sel_writeToURL_error_1 = _registerName1("writeToURL:error:");
  bool _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_makeObjectsPerformSelector_1 =
      _registerName1("makeObjectsPerformSelector:");
  late final _sel_makeObjectsPerformSelector_withObject_1 =
      _registerName1("makeObjectsPerformSelector:withObject:");
  void _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> argument,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
      aSelector,
      argument,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSIndexSet1 = _getClass1("NSIndexSet");
  late final _sel_indexSet1 = _registerName1("indexSet");
  late final _sel_indexSetWithIndex_1 = _registerName1("indexSetWithIndex:");
  late final _sel_indexSetWithIndexesInRange_1 =
      _registerName1("indexSetWithIndexesInRange:");
  instancetype _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_initWithIndexesInRange_1 =
      _registerName1("initWithIndexesInRange:");
  late final _sel_initWithIndexSet_1 = _registerName1("initWithIndexSet:");
  instancetype _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithIndex_1 = _registerName1("initWithIndex:");
  late final _sel_isEqualToIndexSet_1 = _registerName1("isEqualToIndexSet:");
  bool _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstIndex1 = _registerName1("firstIndex");
  late final _sel_lastIndex1 = _registerName1("lastIndex");
  late final _sel_indexGreaterThanIndex_1 =
      _registerName1("indexGreaterThanIndex:");
  late final _sel_indexLessThanIndex_1 = _registerName1("indexLessThanIndex:");
  late final _sel_indexGreaterThanOrEqualToIndex_1 =
      _registerName1("indexGreaterThanOrEqualToIndex:");
  late final _sel_indexLessThanOrEqualToIndex_1 =
      _registerName1("indexLessThanOrEqualToIndex:");
  late final _sel_getIndexes_maxCount_inIndexRange_1 =
      _registerName1("getIndexes:maxCount:inIndexRange:");
  int _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indexBuffer,
    int bufferSize,
    NSRangePointer range,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      indexBuffer,
      bufferSize,
      range,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>,
              NSUInteger,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int, NSRangePointer)>();

  late final _sel_countOfIndexesInRange_1 =
      _registerName1("countOfIndexesInRange:");
  int _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_containsIndex_1 = _registerName1("containsIndex:");
  late final _sel_containsIndexesInRange_1 =
      _registerName1("containsIndexesInRange:");
  bool _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_containsIndexes_1 = _registerName1("containsIndexes:");
  late final _sel_intersectsIndexesInRange_1 =
      _registerName1("intersectsIndexesInRange:");
  late final _sel_enumerateIndexesUsingBlock_1 =
      _registerName1("enumerateIndexesUsingBlock:");
  void _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateIndexesWithOptions_usingBlock_1 =
      _registerName1("enumerateIndexesWithOptions:usingBlock:");
  void _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateIndexesInRange_options_usingBlock_1 =
      _registerName1("enumerateIndexesInRange:options:usingBlock:");
  void _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexPassingTest_1 = _registerName1("indexPassingTest:");
  int _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexWithOptions_passingTest_1 =
      _registerName1("indexWithOptions:passingTest:");
  int _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexInRange_options_passingTest_1 =
      _registerName1("indexInRange:options:passingTest:");
  int _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesPassingTest_1 = _registerName1("indexesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesWithOptions_passingTest_1 =
      _registerName1("indexesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesInRange_options_passingTest_1 =
      _registerName1("indexesInRange:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesUsingBlock_1 =
      _registerName1("enumerateRangesUsingBlock:");
  void _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesWithOptions_usingBlock_1 =
      _registerName1("enumerateRangesWithOptions:usingBlock:");
  void _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesInRange_options_usingBlock_1 =
      _registerName1("enumerateRangesInRange:options:usingBlock:");
  void _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsAtIndexes_1 = _registerName1("objectsAtIndexes:");
  ffi.Pointer<ObjCObject> _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      indexes,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_objectAtIndexedSubscript_1 =
      _registerName1("objectAtIndexedSubscript:");
  late final _sel_enumerateObjectsUsingBlock_1 =
      _registerName1("enumerateObjectsUsingBlock:");
  void _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateObjectsWithOptions:usingBlock:");
  void _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsAtIndexes_options_usingBlock_1 =
      _registerName1("enumerateObjectsAtIndexes:options:usingBlock:");
  void _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      s,
      opts,
      block,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectPassingTest_1 =
      _registerName1("indexOfObjectPassingTest:");
  int _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectWithOptions_passingTest_1 =
      _registerName1("indexOfObjectWithOptions:passingTest:");
  int _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectAtIndexes_options_passingTest_1 =
      _registerName1("indexOfObjectAtIndexes:options:passingTest:");
  int _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsPassingTest_1 =
      _registerName1("indexesOfObjectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsWithOptions_passingTest_1 =
      _registerName1("indexesOfObjectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsAtIndexes_options_passingTest_1 =
      _registerName1("indexesOfObjectsAtIndexes:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortedArrayUsingComparator_1 =
      _registerName1("sortedArrayUsingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSComparator)>();

  late final _sel_sortedArrayWithOptions_usingComparator_1 =
      _registerName1("sortedArrayWithOptions:usingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, NSComparator)>();

  late final _sel_indexOfObject_inSortedRange_options_usingComparator_1 =
      _registerName1("indexOfObject:inSortedRange:options:usingComparator:");
  int _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType1 obj1,
    NSRange r,
    int opts,
    NSComparator cmp,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
      obj1,
      r,
      opts,
      cmp,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType1, NSRange, ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType1,
          NSRange, int, NSComparator)>();

  late final _sel_array1 = _registerName1("array");
  late final _sel_arrayWithObject_1 = _registerName1("arrayWithObject:");
  instancetype _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType3 anObject,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType3)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType3)>();

  late final _sel_arrayWithObjects_count_1 =
      _registerName1("arrayWithObjects:count:");
  late final _sel_arrayWithObjects_1 = _registerName1("arrayWithObjects:");
  late final _sel_arrayWithArray_1 = _registerName1("arrayWithArray:");
  late final _sel_initWithObjects_1 = _registerName1("initWithObjects:");
  late final _sel_initWithArray_1 = _registerName1("initWithArray:");
  late final _sel_initWithArray_copyItems_1 =
      _registerName1("initWithArray:copyItems:");
  instancetype _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> array,
    bool flag,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
      array,
      flag,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithContentsOfURL_error_1 =
      _registerName1("initWithContentsOfURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfURL_error_1 =
      _registerName1("arrayWithContentsOfURL:error:");
  late final _class_NSOrderedCollectionDifference1 =
      _getClass1("NSOrderedCollectionDifference");
  late final _sel_initWithChanges_1 = _registerName1("initWithChanges:");
  late final _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_1 =
      _registerName1(
          "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:");
  instancetype _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> inserts,
    ffi.Pointer<ObjCObject> insertedObjects,
    ffi.Pointer<ObjCObject> removes,
    ffi.Pointer<ObjCObject> removedObjects,
    ffi.Pointer<ObjCObject> changes,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
      inserts,
      insertedObjects,
      removes,
      removedObjects,
      changes,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_1 =
      _registerName1(
          "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:");
  instancetype _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> inserts,
    ffi.Pointer<ObjCObject> insertedObjects,
    ffi.Pointer<ObjCObject> removes,
    ffi.Pointer<ObjCObject> removedObjects,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
      inserts,
      insertedObjects,
      removes,
      removedObjects,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_insertions1 = _registerName1("insertions");
  late final _sel_removals1 = _registerName1("removals");
  late final _sel_hasChanges1 = _registerName1("hasChanges");
  late final _class_NSOrderedCollectionChange1 =
      _getClass1("NSOrderedCollectionChange");
  late final _sel_changeWithObject_type_index_1 =
      _registerName1("changeWithObject:type:index:");
  ffi.Pointer<ObjCObject> _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType4 anObject,
    int type,
    int index,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      anObject,
      type,
      index,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ObjectType4,
              ffi.Int32,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ObjectType4, int, int)>();

  late final _sel_changeWithObject_type_index_associatedIndex_1 =
      _registerName1("changeWithObject:type:index:associatedIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType4 anObject,
    int type,
    int index,
    int associatedIndex,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
      anObject,
      type,
      index,
      associatedIndex,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ObjectType4,
              ffi.Int32,
              NSUInteger,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ObjectType4, int, int, int)>();

  late final _sel_object1 = _registerName1("object");
  late final _sel_changeType1 = _registerName1("changeType");
  int _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_index1 = _registerName1("index");
  late final _sel_associatedIndex1 = _registerName1("associatedIndex");
  late final _sel_initWithObject_type_index_1 =
      _registerName1("initWithObject:type:index:");
  instancetype _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType4 anObject,
    int type,
    int index,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
      anObject,
      type,
      index,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType4, ffi.Int32, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ObjectType4, int, int)>();

  late final _sel_initWithObject_type_index_associatedIndex_1 =
      _registerName1("initWithObject:type:index:associatedIndex:");
  instancetype _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType4 anObject,
    int type,
    int index,
    int associatedIndex,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
      anObject,
      type,
      index,
      associatedIndex,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType4, ffi.Int32, NSUInteger, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ObjectType4, int, int, int)>();

  late final _sel_differenceByTransformingChangesWithBlock_1 =
      _registerName1("differenceByTransformingChangesWithBlock:");
  ffi.Pointer<ObjCObject> _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_inverseDifference1 = _registerName1("inverseDifference");
  late final _sel_differenceFromArray_withOptions_usingEquivalenceTest_1 =
      _registerName1("differenceFromArray:withOptions:usingEquivalenceTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
      other,
      options,
      block,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_differenceFromArray_withOptions_1 =
      _registerName1("differenceFromArray:withOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      other,
      options,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_differenceFromArray_1 =
      _registerName1("differenceFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayByApplyingDifference_1 =
      _registerName1("arrayByApplyingDifference:");
  ffi.Pointer<ObjCObject> _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> difference,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      difference,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_getObjects_1 = _registerName1("getObjects:");
  void _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjectType6> objects,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
      objects,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjectType6>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjectType6>)>();

  late final _sel_arrayWithContentsOfFile_1 =
      _registerName1("arrayWithContentsOfFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayWithContentsOfURL_1 =
      _registerName1("arrayWithContentsOfURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithContentsOfFile_1 =
      _registerName1("initWithContentsOfFile:");
  late final _sel_initWithContentsOfURL_1 =
      _registerName1("initWithContentsOfURL:");
  late final _sel_writeToFile_atomically_1 =
      _registerName1("writeToFile:atomically:");
  bool _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
      path,
      useAuxiliaryFile,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_writeToURL_atomically_1 =
      _registerName1("writeToURL:atomically:");
  bool _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool atomically,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
      url,
      atomically,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_componentsSeparatedByString_1 =
      _registerName1("componentsSeparatedByString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> separator,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      separator,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_componentsSeparatedByCharactersInSet_1 =
      _registerName1("componentsSeparatedByCharactersInSet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> separator,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      separator,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByTrimmingCharactersInSet_1 =
      _registerName1("stringByTrimmingCharactersInSet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      set1,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByPaddingToLength_withString_startingAtIndex_1 =
      _registerName1("stringByPaddingToLength:withString:startingAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int newLength,
    ffi.Pointer<ObjCObject> padString,
    int padIndex,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      newLength,
      padString,
      padIndex,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_stringByFoldingWithOptions_locale_1 =
      _registerName1("stringByFoldingWithOptions:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
      options,
      locale,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByReplacingOccurrencesOfString_withString_options_range_1 =
      _registerName1(
          "stringByReplacingOccurrencesOfString:withString:options:range:");
  ffi.Pointer<ObjCObject> _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    NSRange searchRange,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          NSRange)>();

  late final _sel_stringByReplacingOccurrencesOfString_withString_1 =
      _registerName1("stringByReplacingOccurrencesOfString:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      target,
      replacement,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByReplacingCharactersInRange_withString_1 =
      _registerName1("stringByReplacingCharactersInRange:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
      range,
      replacement,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByApplyingTransform_reverse_1 =
      _registerName1("stringByApplyingTransform:reverse:");
  ffi.Pointer<ObjCObject> _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSStringTransform transform,
    bool reverse,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      transform,
      reverse,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringTransform,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSStringTransform, bool)>();

  late final _sel_writeToURL_atomically_encoding_error_1 =
      _registerName1("writeToURL:atomically:encoding:error:");
  bool _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
      url,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_writeToFile_atomically_encoding_error_1 =
      _registerName1("writeToFile:atomically:encoding:error:");
  bool _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      path,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithCharactersNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCharactersNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> characters,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
      characters,
      length,
      freeBuffer,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSUInteger, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int, bool)>();

  late final _sel_initWithCharactersNoCopy_length_deallocator_1 =
      _registerName1("initWithCharactersNoCopy:length:deallocator:");
  instancetype _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> chars,
    int len,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      chars,
      len,
      deallocator,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>,
              NSUInteger,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithCharacters_length_1 =
      _registerName1("initWithCharacters:length:");
  instancetype _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> characters,
    int length,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int)>();

  late final _sel_initWithUTF8String_1 = _registerName1("initWithUTF8String:");
  instancetype _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      nullTerminatedCString,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithString_1 = _registerName1("initWithString:");
  instancetype _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithFormat_1 = _registerName1("initWithFormat:");
  late final _sel_initWithFormat_arguments_1 =
      _registerName1("initWithFormat:arguments:");
  instancetype _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    va_list argList,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      format,
      argList,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, va_list)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, va_list)>();

  late final _sel_initWithFormat_locale_1 =
      _registerName1("initWithFormat:locale:");
  instancetype _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      format,
      locale,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithFormat_locale_arguments_1 =
      _registerName1("initWithFormat:locale:arguments:");
  instancetype _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
    va_list argList,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
      format,
      locale,
      argList,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              va_list)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, va_list)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_error_1 =
      _registerName1("initWithValidatedFormat:validFormatSpecifiers:error:");
  instancetype _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      error,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1 =
      _registerName1(
          "initWithValidatedFormat:validFormatSpecifiers:locale:error:");
  instancetype _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ObjCObject> locale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      locale,
      error,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1 =
      _registerName1(
          "initWithValidatedFormat:validFormatSpecifiers:arguments:error:");
  instancetype _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    va_list argList,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      argList,
      error,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              va_list,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          va_list,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1 =
      _registerName1(
          "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
  instancetype _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ObjCObject> locale,
    va_list argList,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      locale,
      argList,
      error,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              va_list,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          va_list,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithData_encoding_1 =
      _registerName1("initWithData:encoding:");
  instancetype _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    int encoding,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
      data,
      encoding,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_initWithBytes_length_encoding_1 =
      _registerName1("initWithBytes:length:encoding:");
  instancetype _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      bytes,
      len,
      encoding,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int)>();

  late final _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:freeWhenDone:");
  instancetype _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      bytes,
      len,
      encoding,
      freeBuffer,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, bool)>();

  late final _sel_initWithBytesNoCopy_length_encoding_deallocator_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:deallocator:");
  instancetype _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      bytes,
      len,
      encoding,
      deallocator,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_string1 = _registerName1("string");
  late final _sel_stringWithString_1 = _registerName1("stringWithString:");
  late final _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  late final _sel_stringWithUTF8String_1 =
      _registerName1("stringWithUTF8String:");
  late final _sel_stringWithFormat_1 = _registerName1("stringWithFormat:");
  late final _sel_localizedStringWithFormat_1 =
      _registerName1("localizedStringWithFormat:");
  late final _sel_stringWithValidatedFormat_validFormatSpecifiers_error_1 =
      _registerName1("stringWithValidatedFormat:validFormatSpecifiers:error:");
  late final _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1 =
      _registerName1(
          "localizedStringWithValidatedFormat:validFormatSpecifiers:error:");
  late final _sel_initWithCString_encoding_1 =
      _registerName1("initWithCString:encoding:");
  instancetype _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
      nullTerminatedCString,
      encoding,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_stringWithCString_encoding_1 =
      _registerName1("stringWithCString:encoding:");
  late final _sel_initWithContentsOfURL_encoding_error_1 =
      _registerName1("initWithContentsOfURL:encoding:error:");
  instancetype _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithContentsOfFile_encoding_error_1 =
      _registerName1("initWithContentsOfFile:encoding:error:");
  instancetype _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
      path,
      enc,
      error,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_stringWithContentsOfURL_encoding_error_1 =
      _registerName1("stringWithContentsOfURL:encoding:error:");
  late final _sel_stringWithContentsOfFile_encoding_error_1 =
      _registerName1("stringWithContentsOfFile:encoding:error:");
  late final _sel_initWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("initWithContentsOfURL:usedEncoding:error:");
  instancetype _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<NSStringEncoding> enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSStringEncoding>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<NSStringEncoding>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("initWithContentsOfFile:usedEncoding:error:");
  instancetype _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<NSStringEncoding> enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      path,
      enc,
      error,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSStringEncoding>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<NSStringEncoding>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_stringWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfURL:usedEncoding:error:");
  late final _sel_stringWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfFile:usedEncoding:error:");
  late final _class_NSDictionary1 = _getClass1("NSDictionary");
  late final _sel_objectForKey_1 = _registerName1("objectForKey:");
  late final _sel_keyEnumerator1 = _registerName1("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjectType7> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjectType7>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjectType7>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_allKeys1 = _registerName1("allKeys");
  late final _sel_allKeysForObject_1 = _registerName1("allKeysForObject:");
  late final _sel_allValues1 = _registerName1("allValues");
  late final _sel_descriptionInStringsFileFormat1 =
      _registerName1("descriptionInStringsFileFormat");
  late final _sel_isEqualToDictionary_1 =
      _registerName1("isEqualToDictionary:");
  bool _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
      otherDictionary,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_objectsForKeys_notFoundMarker_1 =
      _registerName1("objectsForKeys:notFoundMarker:");
  ffi.Pointer<ObjCObject> _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keys,
    ObjectType8 marker,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
      keys,
      marker,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ObjectType8)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, ObjectType8)>();

  late final _sel_keysSortedByValueUsingSelector_1 =
      _registerName1("keysSortedByValueUsingSelector:");
  late final _sel_getObjects_andKeys_count_1 =
      _registerName1("getObjects:andKeys:count:");
  void _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjectType8> objects,
    ffi.Pointer<KeyType1> keys,
    int count,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
      objects,
      keys,
      count,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjectType8>,
              ffi.Pointer<KeyType1>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjectType8>, ffi.Pointer<KeyType1>, int)>();

  late final _sel_objectForKeyedSubscript_1 =
      _registerName1("objectForKeyedSubscript:");
  late final _sel_enumerateKeysAndObjectsUsingBlock_1 =
      _registerName1("enumerateKeysAndObjectsUsingBlock:");
  void _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateKeysAndObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateKeysAndObjectsWithOptions:usingBlock:");
  void _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysSortedByValueUsingComparator_1 =
      _registerName1("keysSortedByValueUsingComparator:");
  late final _sel_keysSortedByValueWithOptions_usingComparator_1 =
      _registerName1("keysSortedByValueWithOptions:usingComparator:");
  late final _sel_keysOfEntriesPassingTest_1 =
      _registerName1("keysOfEntriesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysOfEntriesWithOptions_passingTest_1 =
      _registerName1("keysOfEntriesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_getObjects_andKeys_1 = _registerName1("getObjects:andKeys:");
  void _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjectType9> objects,
    ffi.Pointer<KeyType2> keys,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjectType9>,
              ffi.Pointer<KeyType2>)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjectType9>, ffi.Pointer<KeyType2>)>();

  late final _sel_dictionaryWithContentsOfFile_1 =
      _registerName1("dictionaryWithContentsOfFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithContentsOfURL_1 =
      _registerName1("dictionaryWithContentsOfURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionary1 = _registerName1("dictionary");
  late final _sel_dictionaryWithObject_forKey_1 =
      _registerName1("dictionaryWithObject:forKey:");
  instancetype _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType10 object,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      object,
      key,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType10, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ObjectType10, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithObjects_forKeys_count_1 =
      _registerName1("dictionaryWithObjects:forKeys:count:");
  late final _sel_dictionaryWithObjectsAndKeys_1 =
      _registerName1("dictionaryWithObjectsAndKeys:");
  late final _sel_dictionaryWithDictionary_1 =
      _registerName1("dictionaryWithDictionary:");
  instancetype _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
      dict,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithObjects_forKeys_1 =
      _registerName1("dictionaryWithObjects:forKeys:");
  instancetype _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objects,
    ffi.Pointer<ObjCObject> keys,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithObjectsAndKeys_1 =
      _registerName1("initWithObjectsAndKeys:");
  late final _sel_initWithDictionary_1 = _registerName1("initWithDictionary:");
  late final _sel_initWithDictionary_copyItems_1 =
      _registerName1("initWithDictionary:copyItems:");
  instancetype _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
    bool flag,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
      otherDictionary,
      flag,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithObjects_forKeys_1 =
      _registerName1("initWithObjects:forKeys:");
  ffi.Pointer<ObjCObject> _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dictionaryWithContentsOfURL_error_1 =
      _registerName1("dictionaryWithContentsOfURL:error:");
  late final _sel_sharedKeySetForKeys_1 =
      _registerName1("sharedKeySetForKeys:");
  late final _sel_countByEnumeratingWithState_objects_count_1 =
      _registerName1("countByEnumeratingWithState:objects:count:");
  int _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<K> buffer,
    int len,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
      state,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<K>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSFastEnumerationState>, ffi.Pointer<K>, int)>();

  late final _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1 =
      _registerName1(
          "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
  int _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> opts,
    ffi.Pointer<ffi.Pointer<ObjCObject>> string,
    ffi.Pointer<ffi.Bool> usedLossyConversion,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
      data,
      opts,
      string,
      usedLossyConversion,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          NSStringEncoding Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Bool>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Bool>)>();

  late final _sel_propertyList1 = _registerName1("propertyList");
  late final _sel_propertyListFromStringsFileFormat1 =
      _registerName1("propertyListFromStringsFileFormat");
  ffi.Pointer<ObjCObject> _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_cString1 = _registerName1("cString");
  late final _sel_lossyCString1 = _registerName1("lossyCString");
  late final _sel_cStringLength1 = _registerName1("cStringLength");
  late final _sel_getCString_1 = _registerName1("getCString:");
  void _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
      bytes,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_getCString_maxLength_1 =
      _registerName1("getCString:maxLength:");
  void _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
      bytes,
      maxLength,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_getCString_maxLength_range_remainingRange_1 =
      _registerName1("getCString:maxLength:range:remainingRange:");
  void _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
    NSRange aRange,
    NSRangePointer leftoverRange,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      bytes,
      maxLength,
      aRange,
      leftoverRange,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, NSRange, NSRangePointer)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringWithContentsOfFile_1 =
      _registerName1("stringWithContentsOfFile:");
  late final _sel_stringWithContentsOfURL_1 =
      _registerName1("stringWithContentsOfURL:");
  late final _sel_initWithCStringNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCStringNoCopy:length:freeWhenDone:");
  ffi.Pointer<ObjCObject> _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
      bytes,
      length,
      freeBuffer,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>, int, bool)>();

  late final _sel_initWithCString_length_1 =
      _registerName1("initWithCString:length:");
  late final _sel_initWithCString_1 = _registerName1("initWithCString:");
  late final _sel_stringWithCString_length_1 =
      _registerName1("stringWithCString:length:");
  late final _sel_stringWithCString_1 = _registerName1("stringWithCString:");
  late final _sel_getCharacters_1 = _registerName1("getCharacters:");
  void _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> buffer,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
      buffer,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>)>();

  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _sel_version1 = _registerName1("version");
  late final _sel_setVersion_1 = _registerName1("setVersion:");
  void _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aVersion,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
      aVersion,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_classForCoder1 = _registerName1("classForCoder");
  late final _sel_replacementObjectForCoder_1 =
      _registerName1("replacementObjectForCoder:");
  late final _sel_awakeAfterUsingCoder_1 =
      _registerName1("awakeAfterUsingCoder:");
  late final _sel_poseAsClass_1 = _registerName1("poseAsClass:");
  void _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
      aClass,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_autoContentAccessingProxy1 =
      _registerName1("autoContentAccessingProxy");
  late final _sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1 =
      _registerName1(
          "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:");
  void _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
    int recoveryOptionIndex,
    ffi.Pointer<ObjCObject> delegate,
    ffi.Pointer<ObjCSel> didRecoverSelector,
    ffi.Pointer<ffi.Void> contextInfo,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
      error,
      recoveryOptionIndex,
      delegate,
      didRecoverSelector,
      contextInfo,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_attemptRecoveryFromError_optionIndex_1 =
      _registerName1("attemptRecoveryFromError:optionIndex:");
  bool _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
    int recoveryOptionIndex,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
      error,
      recoveryOptionIndex,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ffi.Double> _NSFoundationVersionNumber =
      _lookup<ffi.Double>('NSFoundationVersionNumber');

  double get NSFoundationVersionNumber => _NSFoundationVersionNumber.value;

  set NSFoundationVersionNumber(double value) =>
      _NSFoundationVersionNumber.value = value;

  NSString NSStringFromSelector(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return NSString._(
        _NSStringFromSelector(
          aSelector,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSStringFromSelectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector = _NSStringFromSelectorPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString(
    NSString aSelectorName,
  ) {
    return _NSSelectorFromString(
      aSelectorName._id,
    );
  }

  late final _NSSelectorFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString = _NSSelectorFromStringPtr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  NSString NSStringFromClass(
    NSObject aClass,
  ) {
    return NSString._(
        _NSStringFromClass(
          aClass._id,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSStringFromClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass = _NSStringFromClassPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  NSObject? NSClassFromString(
    NSString aClassName,
  ) {
    return _NSClassFromString(
              aClassName._id,
            ).address ==
            0
        ? null
        : NSObject._(
            _NSClassFromString(
              aClassName._id,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _NSClassFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString = _NSClassFromStringPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  NSString NSStringFromProtocol(
    Protocol proto,
  ) {
    return NSString._(
        _NSStringFromProtocol(
          proto._id,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSStringFromProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol = _NSStringFromProtocolPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  Protocol? NSProtocolFromString(
    NSString namestr,
  ) {
    return _NSProtocolFromString(
              namestr._id,
            ).address ==
            0
        ? null
        : Protocol._(
            _NSProtocolFromString(
              namestr._id,
            ),
            this,
            retain: true,
            release: true);
  }

  late final _NSProtocolFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString = _NSProtocolFromStringPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ffi.Char> NSGetSizeAndAlignment(
    ffi.Pointer<ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment = _NSGetSizeAndAlignmentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog(
    NSString format,
  ) {
    return _NSLog(
      format._id,
    );
  }

  late final _NSLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog =
      _NSLogPtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv(
    NSString format,
    va_list args,
  ) {
    return _NSLogv(
      format._id,
      args,
    );
  }

  late final _NSLogvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv =
      _NSLogvPtr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  late final ffi.Pointer<NSInteger> _NSNotFound =
      _lookup<NSInteger>('NSNotFound');

  int get NSNotFound => _NSNotFound.value;

  ffi.Pointer<ffi.Void> _Block_copy1(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_copy1(
      aBlock,
    );
  }

  late final __Block_copy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy1 = __Block_copy1Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release1(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_release1(
      aBlock,
    );
  }

  late final __Block_release1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release1 =
      __Block_release1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void _Block_object_assign(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __Block_object_assign(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Block_object_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('_Block_object_assign');
  late final __Block_object_assign = __Block_object_assignPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void _Block_object_dispose(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __Block_object_dispose(
      arg0,
      arg1,
    );
  }

  late final __Block_object_disposePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      '_Block_object_dispose');
  late final __Block_object_dispose = __Block_object_disposePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteGlobalBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteGlobalBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteGlobalBlock =>
      __NSConcreteGlobalBlock.value;

  set _NSConcreteGlobalBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteGlobalBlock.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteStackBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteStackBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteStackBlock =>
      __NSConcreteStackBlock.value;

  set _NSConcreteStackBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteStackBlock.value = value;

  void Debugger() {
    return _Debugger();
  }

  late final _DebuggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Debugger');
  late final _Debugger = _DebuggerPtr.asFunction<void Function()>();

  void DebugStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _DebugStr(
      debuggerMsg,
    );
  }

  late final _DebugStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'DebugStr');
  late final _DebugStr =
      _DebugStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreak() {
    return _SysBreak();
  }

  late final _SysBreakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SysBreak');
  late final _SysBreak = _SysBreakPtr.asFunction<void Function()>();

  void SysBreakStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakStr(
      debuggerMsg,
    );
  }

  late final _SysBreakStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakStr');
  late final _SysBreakStr =
      _SysBreakStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreakFunc(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakFunc(
      debuggerMsg,
    );
  }

  late final _SysBreakFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakFunc');
  late final _SysBreakFunc =
      _SysBreakFuncPtr.asFunction<void Function(ConstStr255Param)>();

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  int get kCFNotFound => _kCFNotFound.value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone() {
    return _NSDefaultMallocZone();
  }

  late final _NSDefaultMallocZonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone =
      _NSDefaultMallocZonePtr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone(
      startSize,
      granularity,
      canFree,
    );
  }

  late final _NSCreateZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Bool)>>('NSCreateZone');
  late final _NSCreateZone = _NSCreateZonePtr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, bool)>();

  void NSRecycleZone(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone(
      zone,
    );
  }

  late final _NSRecycleZonePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone =
      _NSRecycleZonePtr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName(
    ffi.Pointer<NSZone> zone,
    NSString name,
  ) {
    return _NSSetZoneName(
      zone,
      name._id,
    );
  }

  late final _NSSetZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName = _NSSetZoneNamePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  NSString NSZoneName(
    ffi.Pointer<NSZone> zone,
  ) {
    return NSString._(
        _NSZoneName(
          zone,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName = _NSZoneNamePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer(
      ptr,
    );
  }

  late final _NSZoneFromPointerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>>(
      'NSZoneFromPointer');
  late final _NSZoneFromPointer = _NSZoneFromPointerPtr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc(
      zone,
      size,
    );
  }

  late final _NSZoneMallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc = _NSZoneMallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc = _NSZoneCallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc = _NSZoneReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree(
      zone,
      ptr,
    );
  }

  late final _NSZoneFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree = _NSZoneFreePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable(
      size,
      options,
    );
  }

  late final _NSAllocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable = _NSAllocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable = _NSReallocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize() {
    return _NSPageSize();
  }

  late final _NSPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize = _NSPageSizePtr.asFunction<int Function()>();

  int NSLogPageSize() {
    return _NSLogPageSize();
  }

  late final _NSLogPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize = _NSLogPageSizePtr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize =
      _NSRoundUpToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize =
      _NSRoundDownToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages(
    int bytes,
  ) {
    return _NSAllocateMemoryPages(
      bytes,
    );
  }

  late final _NSAllocateMemoryPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages = _NSAllocateMemoryPagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages = _NSDeallocateMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages = _NSCopyMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable() {
    return _NSRealMemoryAvailable();
  }

  late final _NSRealMemoryAvailablePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable =
      _NSRealMemoryAvailablePtr.asFunction<int Function()>();

  NSObject NSAllocateObject(
    NSObject aClass,
    DartNSUInteger extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return NSObject._(
        _NSAllocateObject(
          aClass._id,
          extraBytes,
          zone,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSAllocateObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject = _NSAllocateObjectPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject(
    NSObject object,
  ) {
    return _NSDeallocateObject(
      object._id,
    );
  }

  late final _NSDeallocateObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject = _NSDeallocateObjectPtr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  NSObject NSCopyObject(
    NSObject object,
    DartNSUInteger extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return NSObject._(
        _NSCopyObject(
          object._id,
          extraBytes,
          zone,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSCopyObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject = _NSCopyObjectPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone(
    NSObject anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone(
      anObject._id,
      requestedZone,
    );
  }

  late final _NSShouldRetainWithZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone = _NSShouldRetainWithZonePtr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount(
    NSObject object,
  ) {
    return _NSIncrementExtraRefCount(
      object._id,
    );
  }

  late final _NSIncrementExtraRefCountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount = _NSIncrementExtraRefCountPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero(
    NSObject object,
  ) {
    return _NSDecrementExtraRefCountWasZero(
      object._id,
    );
  }

  late final _NSDecrementExtraRefCountWasZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero =
      _NSDecrementExtraRefCountWasZeroPtr.asFunction<
          bool Function(ffi.Pointer<ObjCObject>)>();

  DartNSUInteger NSExtraRefCount(
    NSObject object,
  ) {
    return _NSExtraRefCount(
      object._id,
    );
  }

  late final _NSExtraRefCountPtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount =
      _NSExtraRefCountPtr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final _class_NSValue1 = _getClass1("NSValue");
  late final _sel_getValue_size_1 = _registerName1("getValue:size:");
  void _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
      value,
      size,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_objCType1 = _registerName1("objCType");
  late final _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  late final _sel_valueWithBytes_objCType_1 =
      _registerName1("valueWithBytes:objCType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_value_withObjCType_1 = _registerName1("value:withObjCType:");
  late final _sel_valueWithNonretainedObject_1 =
      _registerName1("valueWithNonretainedObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_nonretainedObjectValue1 =
      _registerName1("nonretainedObjectValue");
  late final _sel_valueWithPointer_1 = _registerName1("valueWithPointer:");
  ffi.Pointer<ObjCObject> _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
      pointer,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final _sel_pointerValue1 = _registerName1("pointerValue");
  late final _sel_isEqualToValue_1 = _registerName1("isEqualToValue:");
  bool _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_getValue_1 = _registerName1("getValue:");
  void _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_valueWithRange_1 = _registerName1("valueWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_rangeValue1 = _registerName1("rangeValue");
  NSRange _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSNumber1 = _getClass1("NSNumber");
  late final _sel_initWithChar_1 = _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithShort_1 = _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithInt_1 = _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLong_1 = _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLongLong_1 = _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithFloat_1 = _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithDouble_1 = _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithBool_1 = _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_initWithInteger_1 = _registerName1("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedCharValue1 = _registerName1("unsignedCharValue");
  int _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_shortValue1 = _registerName1("shortValue");
  int _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedShortValue1 = _registerName1("unsignedShortValue");
  int _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntValue1 = _registerName1("unsignedIntValue");
  int _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_longValue1 = _registerName1("longValue");
  late final _sel_unsignedLongValue1 = _registerName1("unsignedLongValue");
  late final _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final _sel_stringValue1 = _registerName1("stringValue");
  int _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToNumber_1 = _registerName1("isEqualToNumber:");
  bool _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> number,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
      number,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_numberWithChar_1 = _registerName1("numberWithChar:");
  late final _sel_numberWithUnsignedChar_1 =
      _registerName1("numberWithUnsignedChar:");
  late final _sel_numberWithShort_1 = _registerName1("numberWithShort:");
  late final _sel_numberWithUnsignedShort_1 =
      _registerName1("numberWithUnsignedShort:");
  late final _sel_numberWithInt_1 = _registerName1("numberWithInt:");
  late final _sel_numberWithUnsignedInt_1 =
      _registerName1("numberWithUnsignedInt:");
  late final _sel_numberWithLong_1 = _registerName1("numberWithLong:");
  late final _sel_numberWithUnsignedLong_1 =
      _registerName1("numberWithUnsignedLong:");
  late final _sel_numberWithLongLong_1 = _registerName1("numberWithLongLong:");
  late final _sel_numberWithUnsignedLongLong_1 =
      _registerName1("numberWithUnsignedLongLong:");
  late final _sel_numberWithFloat_1 = _registerName1("numberWithFloat:");
  late final _sel_numberWithDouble_1 = _registerName1("numberWithDouble:");
  late final _sel_numberWithBool_1 = _registerName1("numberWithBool:");
  late final _sel_numberWithInteger_1 = _registerName1("numberWithInteger:");
  late final _sel_numberWithUnsignedInteger_1 =
      _registerName1("numberWithUnsignedInteger:");
  NSRange NSUnionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange(
      range1,
      range2,
    );
  }

  late final _NSUnionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange =
      _NSUnionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange =
      _NSIntersectionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSString NSStringFromRange(
    NSRange range,
  ) {
    return NSString._(
        _NSStringFromRange(
          range,
        ),
        this,
        retain: true,
        release: true);
  }

  late final _NSStringFromRangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(NSRange)>>(
          'NSStringFromRange');
  late final _NSStringFromRange = _NSStringFromRangePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString(
    NSString aString,
  ) {
    return _NSRangeFromString(
      aString._id,
    );
  }

  late final _NSRangeFromStringPtr =
      _lookup<ffi.NativeFunction<NSRange Function(ffi.Pointer<ObjCObject>)>>(
          'NSRangeFromString');
  late final _NSRangeFromString = _NSRangeFromStringPtr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>)>();

  late final _class_NSMutableIndexSet1 = _getClass1("NSMutableIndexSet");
  late final _sel_addIndexes_1 = _registerName1("addIndexes:");
  void _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_removeIndexes_1 = _registerName1("removeIndexes:");
  late final _sel_removeAllIndexes1 = _registerName1("removeAllIndexes");
  late final _sel_addIndex_1 = _registerName1("addIndex:");
  void _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_removeIndex_1 = _registerName1("removeIndex:");
  late final _sel_addIndexesInRange_1 = _registerName1("addIndexesInRange:");
  void _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_removeIndexesInRange_1 =
      _registerName1("removeIndexesInRange:");
  late final _sel_shiftIndexesStartingAtIndex_by_1 =
      _registerName1("shiftIndexesStartingAtIndex:by:");
  void _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    int delta,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
      index,
      delta,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _class_NSMutableArray1 = _getClass1("NSMutableArray");
  late final _sel_addObject_1 = _registerName1("addObject:");
  late final _sel_insertObject_atIndex_1 =
      _registerName1("insertObject:atIndex:");
  void _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType11 anObject,
    int index,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
      anObject,
      index,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType11, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType11, int)>();

  late final _sel_removeLastObject1 = _registerName1("removeLastObject");
  late final _sel_removeObjectAtIndex_1 =
      _registerName1("removeObjectAtIndex:");
  late final _sel_replaceObjectAtIndex_withObject_1 =
      _registerName1("replaceObjectAtIndex:withObject:");
  void _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ObjectType11 anObject,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      index,
      anObject,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, ObjectType11)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, ObjectType11)>();

  late final _sel_initWithCapacity_1 = _registerName1("initWithCapacity:");
  late final _sel_addObjectsFromArray_1 =
      _registerName1("addObjectsFromArray:");
  void _objc_msgSend_229(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_229(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_229Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_229 = __objc_msgSend_229Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_exchangeObjectAtIndex_withObjectAtIndex_1 =
      _registerName1("exchangeObjectAtIndex:withObjectAtIndex:");
  void _objc_msgSend_230(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx1,
    int idx2,
  ) {
    return __objc_msgSend_230(
      obj,
      sel,
      idx1,
      idx2,
    );
  }

  late final __objc_msgSend_230Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_230 = __objc_msgSend_230Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_removeAllObjects1 = _registerName1("removeAllObjects");
  late final _sel_removeObject_inRange_1 =
      _registerName1("removeObject:inRange:");
  void _objc_msgSend_231(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType12 anObject,
    NSRange range,
  ) {
    return __objc_msgSend_231(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_231Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType12, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_231 = __objc_msgSend_231Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType12,
          NSRange)>();

  late final _sel_removeObject_1 = _registerName1("removeObject:");
  late final _sel_removeObjectIdenticalTo_inRange_1 =
      _registerName1("removeObjectIdenticalTo:inRange:");
  late final _sel_removeObjectIdenticalTo_1 =
      _registerName1("removeObjectIdenticalTo:");
  late final _sel_removeObjectsFromIndices_numIndices_1 =
      _registerName1("removeObjectsFromIndices:numIndices:");
  void _objc_msgSend_232(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indices,
    int cnt,
  ) {
    return __objc_msgSend_232(
      obj,
      sel,
      indices,
      cnt,
    );
  }

  late final __objc_msgSend_232Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_232 = __objc_msgSend_232Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int)>();

  late final _sel_removeObjectsInArray_1 =
      _registerName1("removeObjectsInArray:");
  late final _sel_removeObjectsInRange_1 =
      _registerName1("removeObjectsInRange:");
  late final _sel_replaceObjectsInRange_withObjectsFromArray_range_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:range:");
  void _objc_msgSend_233(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
    NSRange otherRange,
  ) {
    return __objc_msgSend_233(
      obj,
      sel,
      range,
      otherArray,
      otherRange,
    );
  }

  late final __objc_msgSend_233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_233 = __objc_msgSend_233Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:");
  void _objc_msgSend_234(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_234(
      obj,
      sel,
      range,
      otherArray,
    );
  }

  late final __objc_msgSend_234Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_234 = __objc_msgSend_234Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setArray_1 = _registerName1("setArray:");
  late final _sel_sortUsingFunction_context_1 =
      _registerName1("sortUsingFunction:context:");
  void _objc_msgSend_235(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(
                    ObjectType12, ObjectType12, ffi.Pointer<ffi.Void>)>>
        compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_235(
      obj,
      sel,
      compare,
      context,
    );
  }

  late final __objc_msgSend_235Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(
                          ObjectType12, ObjectType12, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_235 = __objc_msgSend_235Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(
                      ObjectType12, ObjectType12, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortUsingSelector_1 = _registerName1("sortUsingSelector:");
  late final _sel_insertObjects_atIndexes_1 =
      _registerName1("insertObjects:atIndexes:");
  void _objc_msgSend_236(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objects,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_236(
      obj,
      sel,
      objects,
      indexes,
    );
  }

  late final __objc_msgSend_236Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_236 = __objc_msgSend_236Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeObjectsAtIndexes_1 =
      _registerName1("removeObjectsAtIndexes:");
  late final _sel_replaceObjectsAtIndexes_withObjects_1 =
      _registerName1("replaceObjectsAtIndexes:withObjects:");
  void _objc_msgSend_237(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
    ffi.Pointer<ObjCObject> objects,
  ) {
    return __objc_msgSend_237(
      obj,
      sel,
      indexes,
      objects,
    );
  }

  late final __objc_msgSend_237Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_237 = __objc_msgSend_237Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setObject_atIndexedSubscript_1 =
      _registerName1("setObject:atIndexedSubscript:");
  late final _sel_sortUsingComparator_1 =
      _registerName1("sortUsingComparator:");
  void _objc_msgSend_238(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_238(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_238Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_238 = __objc_msgSend_238Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSComparator)>();

  late final _sel_sortWithOptions_usingComparator_1 =
      _registerName1("sortWithOptions:usingComparator:");
  void _objc_msgSend_239(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_239(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_239Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_239 = __objc_msgSend_239Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, NSComparator)>();

  late final _sel_arrayWithCapacity_1 = _registerName1("arrayWithCapacity:");
  ffi.Pointer<ObjCObject> _objc_msgSend_240(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_240(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_240Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_240 = __objc_msgSend_240Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_241(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_241(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_241Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_241 = __objc_msgSend_241Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_applyDifference_1 = _registerName1("applyDifference:");
  void _objc_msgSend_242(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> difference,
  ) {
    return __objc_msgSend_242(
      obj,
      sel,
      difference,
    );
  }

  late final __objc_msgSend_242Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_242 = __objc_msgSend_242Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMutableDictionary1 = _getClass1("NSMutableDictionary");
  late final _sel_removeObjectForKey_1 = _registerName1("removeObjectForKey:");
  late final _sel_setObject_forKey_1 = _registerName1("setObject:forKey:");
  void _objc_msgSend_243(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType13 anObject,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_243(
      obj,
      sel,
      anObject,
      aKey,
    );
  }

  late final __objc_msgSend_243Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ObjectType13, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_243 = __objc_msgSend_243Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType13,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_addEntriesFromDictionary_1 =
      _registerName1("addEntriesFromDictionary:");
  void _objc_msgSend_244(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_244(
      obj,
      sel,
      otherDictionary,
    );
  }

  late final __objc_msgSend_244Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_244 = __objc_msgSend_244Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_removeObjectsForKeys_1 =
      _registerName1("removeObjectsForKeys:");
  late final _sel_setDictionary_1 = _registerName1("setDictionary:");
  late final _sel_setObject_forKeyedSubscript_1 =
      _registerName1("setObject:forKeyedSubscript:");
  late final _sel_dictionaryWithCapacity_1 =
      _registerName1("dictionaryWithCapacity:");
  ffi.Pointer<ObjCObject> _objc_msgSend_245(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_245(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_245Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_245 = __objc_msgSend_245Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_246(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_246(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_246 = __objc_msgSend_246Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithSharedKeySet_1 =
      _registerName1("dictionaryWithSharedKeySet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_247(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyset,
  ) {
    return __objc_msgSend_247(
      obj,
      sel,
      keyset,
    );
  }

  late final __objc_msgSend_247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_247 = __objc_msgSend_247Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<NSErrorDomain> _NSCocoaErrorDomain =
      _lookup<NSErrorDomain>('NSCocoaErrorDomain');

  NSErrorDomain get NSCocoaErrorDomain => _NSCocoaErrorDomain.value;

  set NSCocoaErrorDomain(NSErrorDomain value) =>
      _NSCocoaErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSPOSIXErrorDomain =
      _lookup<NSErrorDomain>('NSPOSIXErrorDomain');

  NSErrorDomain get NSPOSIXErrorDomain => _NSPOSIXErrorDomain.value;

  set NSPOSIXErrorDomain(NSErrorDomain value) =>
      _NSPOSIXErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSOSStatusErrorDomain =
      _lookup<NSErrorDomain>('NSOSStatusErrorDomain');

  NSErrorDomain get NSOSStatusErrorDomain => _NSOSStatusErrorDomain.value;

  set NSOSStatusErrorDomain(NSErrorDomain value) =>
      _NSOSStatusErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSMachErrorDomain =
      _lookup<NSErrorDomain>('NSMachErrorDomain');

  NSErrorDomain get NSMachErrorDomain => _NSMachErrorDomain.value;

  set NSMachErrorDomain(NSErrorDomain value) =>
      _NSMachErrorDomain.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSUnderlyingErrorKey =
      _lookup<NSErrorUserInfoKey>('NSUnderlyingErrorKey');

  NSErrorUserInfoKey get NSUnderlyingErrorKey => _NSUnderlyingErrorKey.value;

  set NSUnderlyingErrorKey(NSErrorUserInfoKey value) =>
      _NSUnderlyingErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSMultipleUnderlyingErrorsKey =
      _lookup<NSErrorUserInfoKey>('NSMultipleUnderlyingErrorsKey');

  NSErrorUserInfoKey get NSMultipleUnderlyingErrorsKey =>
      _NSMultipleUnderlyingErrorsKey.value;

  set NSMultipleUnderlyingErrorsKey(NSErrorUserInfoKey value) =>
      _NSMultipleUnderlyingErrorsKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedDescriptionKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedDescriptionKey');

  NSErrorUserInfoKey get NSLocalizedDescriptionKey =>
      _NSLocalizedDescriptionKey.value;

  set NSLocalizedDescriptionKey(NSErrorUserInfoKey value) =>
      _NSLocalizedDescriptionKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedFailureReasonErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedFailureReasonErrorKey');

  NSErrorUserInfoKey get NSLocalizedFailureReasonErrorKey =>
      _NSLocalizedFailureReasonErrorKey.value;

  set NSLocalizedFailureReasonErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedFailureReasonErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey>
      _NSLocalizedRecoverySuggestionErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedRecoverySuggestionErrorKey');

  NSErrorUserInfoKey get NSLocalizedRecoverySuggestionErrorKey =>
      _NSLocalizedRecoverySuggestionErrorKey.value;

  set NSLocalizedRecoverySuggestionErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedRecoverySuggestionErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey>
      _NSLocalizedRecoveryOptionsErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedRecoveryOptionsErrorKey');

  NSErrorUserInfoKey get NSLocalizedRecoveryOptionsErrorKey =>
      _NSLocalizedRecoveryOptionsErrorKey.value;

  set NSLocalizedRecoveryOptionsErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedRecoveryOptionsErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSRecoveryAttempterErrorKey =
      _lookup<NSErrorUserInfoKey>('NSRecoveryAttempterErrorKey');

  NSErrorUserInfoKey get NSRecoveryAttempterErrorKey =>
      _NSRecoveryAttempterErrorKey.value;

  set NSRecoveryAttempterErrorKey(NSErrorUserInfoKey value) =>
      _NSRecoveryAttempterErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSHelpAnchorErrorKey =
      _lookup<NSErrorUserInfoKey>('NSHelpAnchorErrorKey');

  NSErrorUserInfoKey get NSHelpAnchorErrorKey => _NSHelpAnchorErrorKey.value;

  set NSHelpAnchorErrorKey(NSErrorUserInfoKey value) =>
      _NSHelpAnchorErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSDebugDescriptionErrorKey =
      _lookup<NSErrorUserInfoKey>('NSDebugDescriptionErrorKey');

  NSErrorUserInfoKey get NSDebugDescriptionErrorKey =>
      _NSDebugDescriptionErrorKey.value;

  set NSDebugDescriptionErrorKey(NSErrorUserInfoKey value) =>
      _NSDebugDescriptionErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedFailureErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedFailureErrorKey');

  NSErrorUserInfoKey get NSLocalizedFailureErrorKey =>
      _NSLocalizedFailureErrorKey.value;

  set NSLocalizedFailureErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedFailureErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSStringEncodingErrorKey =
      _lookup<NSErrorUserInfoKey>('NSStringEncodingErrorKey');

  NSErrorUserInfoKey get NSStringEncodingErrorKey =>
      _NSStringEncodingErrorKey.value;

  set NSStringEncodingErrorKey(NSErrorUserInfoKey value) =>
      _NSStringEncodingErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSURLErrorKey =
      _lookup<NSErrorUserInfoKey>('NSURLErrorKey');

  NSErrorUserInfoKey get NSURLErrorKey => _NSURLErrorKey.value;

  set NSURLErrorKey(NSErrorUserInfoKey value) => _NSURLErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSFilePathErrorKey =
      _lookup<NSErrorUserInfoKey>('NSFilePathErrorKey');

  NSErrorUserInfoKey get NSFilePathErrorKey => _NSFilePathErrorKey.value;

  set NSFilePathErrorKey(NSErrorUserInfoKey value) =>
      _NSFilePathErrorKey.value = value;

  late final _class_NSSet1 = _getClass1("NSSet");
  late final _sel_member_1 = _registerName1("member:");
  late final _sel_anyObject1 = _registerName1("anyObject");
  late final _sel_intersectsSet_1 = _registerName1("intersectsSet:");
  bool _objc_msgSend_248(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherSet,
  ) {
    return __objc_msgSend_248(
      obj,
      sel,
      otherSet,
    );
  }

  late final __objc_msgSend_248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_248 = __objc_msgSend_248Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToSet_1 = _registerName1("isEqualToSet:");
  late final _sel_isSubsetOfSet_1 = _registerName1("isSubsetOfSet:");
  late final _sel_setByAddingObject_1 = _registerName1("setByAddingObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_249(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ObjectType16 anObject,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ObjectType16)>>('objc_msgSend');
  late final __objc_msgSend_249 = __objc_msgSend_249Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, ObjectType16)>();

  late final _sel_setByAddingObjectsFromSet_1 =
      _registerName1("setByAddingObjectsFromSet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_250(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_250(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_250 = __objc_msgSend_250Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setByAddingObjectsFromArray_1 =
      _registerName1("setByAddingObjectsFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_251(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_251 = __objc_msgSend_251Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_252(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_252(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_252Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_252 = __objc_msgSend_252Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  void _objc_msgSend_253(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_253(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_253Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_253 = __objc_msgSend_253Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsPassingTest_1 = _registerName1("objectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_254(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_254(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_254Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_254 = __objc_msgSend_254Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsWithOptions_passingTest_1 =
      _registerName1("objectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_255(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_255(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_255Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_255 = __objc_msgSend_255Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_set1 = _registerName1("set");
  late final _sel_setWithObject_1 = _registerName1("setWithObject:");
  late final _sel_setWithObjects_count_1 =
      _registerName1("setWithObjects:count:");
  late final _sel_setWithObjects_1 = _registerName1("setWithObjects:");
  late final _sel_setWithSet_1 = _registerName1("setWithSet:");
  instancetype _objc_msgSend_256(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
  ) {
    return __objc_msgSend_256(
      obj,
      sel,
      set1,
    );
  }

  late final __objc_msgSend_256Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_256 = __objc_msgSend_256Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setWithArray_1 = _registerName1("setWithArray:");
  late final _sel_initWithSet_1 = _registerName1("initWithSet:");
  late final _sel_initWithSet_copyItems_1 =
      _registerName1("initWithSet:copyItems:");
  instancetype _objc_msgSend_257(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
    bool flag,
  ) {
    return __objc_msgSend_257(
      obj,
      sel,
      set1,
      flag,
    );
  }

  late final __objc_msgSend_257Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_257 = __objc_msgSend_257Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _class_NSMutableSet1 = _getClass1("NSMutableSet");
  late final _sel_intersectSet_1 = _registerName1("intersectSet:");
  void _objc_msgSend_258(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherSet,
  ) {
    return __objc_msgSend_258(
      obj,
      sel,
      otherSet,
    );
  }

  late final __objc_msgSend_258Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_258 = __objc_msgSend_258Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_minusSet_1 = _registerName1("minusSet:");
  late final _sel_unionSet_1 = _registerName1("unionSet:");
  late final _sel_setSet_1 = _registerName1("setSet:");
  late final _sel_setWithCapacity_1 = _registerName1("setWithCapacity:");
  late final _class_NSCountedSet1 = _getClass1("NSCountedSet");
  late final _sel_countForObject_1 = _registerName1("countForObject:");
  late final _class_NSItemProvider1 = _getClass1("NSItemProvider");
  late final _class_NSProgress1 = _getClass1("NSProgress");
  late final _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1 =
      _registerName1(
          "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
  void _objc_msgSend_259(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_259(
      obj,
      sel,
      typeIdentifier,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_259Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_259 = __objc_msgSend_259Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1 =
      _registerName1(
          "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
  void _objc_msgSend_260(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_260(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_260 = __objc_msgSend_260Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_registeredTypeIdentifiers1 =
      _registerName1("registeredTypeIdentifiers");
  late final _sel_registeredTypeIdentifiersWithFileOptions_1 =
      _registerName1("registeredTypeIdentifiersWithFileOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_261(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int fileOptions,
  ) {
    return __objc_msgSend_261(
      obj,
      sel,
      fileOptions,
    );
  }

  late final __objc_msgSend_261Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_261 = __objc_msgSend_261Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_hasItemConformingToTypeIdentifier_1 =
      _registerName1("hasItemConformingToTypeIdentifier:");
  late final _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1 =
      _registerName1(
          "hasRepresentationConformingToTypeIdentifier:fileOptions:");
  bool _objc_msgSend_262(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
  ) {
    return __objc_msgSend_262(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
    );
  }

  late final __objc_msgSend_262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_262 = __objc_msgSend_262Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_loadDataRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadDataRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_263(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_263(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_263 = __objc_msgSend_263Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadFileRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_264(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_264(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_264 = __objc_msgSend_264Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_265(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_265(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_265 = __objc_msgSend_265Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_suggestedName1 = _registerName1("suggestedName");
  late final _sel_setSuggestedName_1 = _registerName1("setSuggestedName:");
  void _objc_msgSend_266(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_266(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_266Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_266 = __objc_msgSend_266Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithObject_1 = _registerName1("initWithObject:");
  late final _sel_registerObject_visibility_1 =
      _registerName1("registerObject:visibility:");
  void _objc_msgSend_267(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    int visibility,
  ) {
    return __objc_msgSend_267(
      obj,
      sel,
      object,
      visibility,
    );
  }

  late final __objc_msgSend_267Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_267 = __objc_msgSend_267Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_registerObjectOfClass_visibility_loadHandler_1 =
      _registerName1("registerObjectOfClass:visibility:loadHandler:");
  void _objc_msgSend_268(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_268(
      obj,
      sel,
      aClass,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_268Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_268 = __objc_msgSend_268Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_canLoadObjectOfClass_1 =
      _registerName1("canLoadObjectOfClass:");
  late final _sel_loadObjectOfClass_completionHandler_1 =
      _registerName1("loadObjectOfClass:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_269(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_269(
      obj,
      sel,
      aClass,
      completionHandler,
    );
  }

  late final __objc_msgSend_269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_269 = __objc_msgSend_269Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithItem_typeIdentifier_1 =
      _registerName1("initWithItem:typeIdentifier:");
  instancetype _objc_msgSend_270(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> item,
    ffi.Pointer<ObjCObject> typeIdentifier,
  ) {
    return __objc_msgSend_270(
      obj,
      sel,
      item,
      typeIdentifier,
    );
  }

  late final __objc_msgSend_270Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_270 = __objc_msgSend_270Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_registerItemForTypeIdentifier_loadHandler_1 =
      _registerName1("registerItemForTypeIdentifier:loadHandler:");
  void _objc_msgSend_271(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    NSItemProviderLoadHandler loadHandler,
  ) {
    return __objc_msgSend_271(
      obj,
      sel,
      typeIdentifier,
      loadHandler,
    );
  }

  late final __objc_msgSend_271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_271 = __objc_msgSend_271Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderLoadHandler)>();

  late final _sel_loadItemForTypeIdentifier_options_completionHandler_1 =
      _registerName1("loadItemForTypeIdentifier:options:completionHandler:");
  void _objc_msgSend_272(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_272(
      obj,
      sel,
      typeIdentifier,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_272 = __objc_msgSend_272Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          NSItemProviderCompletionHandler)>();

  late final _sel_previewImageHandler1 = _registerName1("previewImageHandler");
  NSItemProviderLoadHandler _objc_msgSend_273(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_273(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_273Ptr = _lookup<
      ffi.NativeFunction<
          NSItemProviderLoadHandler Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_273 = __objc_msgSend_273Ptr.asFunction<
      NSItemProviderLoadHandler Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPreviewImageHandler_1 =
      _registerName1("setPreviewImageHandler:");
  void _objc_msgSend_274(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSItemProviderLoadHandler value,
  ) {
    return __objc_msgSend_274(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_274Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_274 = __objc_msgSend_274Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSItemProviderLoadHandler)>();

  late final _sel_loadPreviewImageWithOptions_completionHandler_1 =
      _registerName1("loadPreviewImageWithOptions:completionHandler:");
  void _objc_msgSend_275(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_275(
      obj,
      sel,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_275Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_275 = __objc_msgSend_275Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderCompletionHandler)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSItemProviderPreferredImageSizeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSItemProviderPreferredImageSizeKey');

  ffi.Pointer<ObjCObject> get NSItemProviderPreferredImageSizeKey =>
      _NSItemProviderPreferredImageSizeKey.value;

  set NSItemProviderPreferredImageSizeKey(ffi.Pointer<ObjCObject> value) =>
      _NSItemProviderPreferredImageSizeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSExtensionJavaScriptPreprocessingResultsKey =
      _lookup<ffi.Pointer<ObjCObject>>(
          'NSExtensionJavaScriptPreprocessingResultsKey');

  ffi.Pointer<ObjCObject> get NSExtensionJavaScriptPreprocessingResultsKey =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value;

  set NSExtensionJavaScriptPreprocessingResultsKey(
          ffi.Pointer<ObjCObject> value) =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSExtensionJavaScriptFinalizeArgumentKey =
      _lookup<ffi.Pointer<ObjCObject>>(
          'NSExtensionJavaScriptFinalizeArgumentKey');

  ffi.Pointer<ObjCObject> get NSExtensionJavaScriptFinalizeArgumentKey =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value;

  set NSExtensionJavaScriptFinalizeArgumentKey(ffi.Pointer<ObjCObject> value) =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSItemProviderErrorDomain =
      _lookup<ffi.Pointer<ObjCObject>>('NSItemProviderErrorDomain');

  ffi.Pointer<ObjCObject> get NSItemProviderErrorDomain =>
      _NSItemProviderErrorDomain.value;

  set NSItemProviderErrorDomain(ffi.Pointer<ObjCObject> value) =>
      _NSItemProviderErrorDomain.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToKatakana =
      _lookup<NSStringTransform>('NSStringTransformLatinToKatakana');

  NSStringTransform get NSStringTransformLatinToKatakana =>
      _NSStringTransformLatinToKatakana.value;

  set NSStringTransformLatinToKatakana(NSStringTransform value) =>
      _NSStringTransformLatinToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHiragana =
      _lookup<NSStringTransform>('NSStringTransformLatinToHiragana');

  NSStringTransform get NSStringTransformLatinToHiragana =>
      _NSStringTransformLatinToHiragana.value;

  set NSStringTransformLatinToHiragana(NSStringTransform value) =>
      _NSStringTransformLatinToHiragana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHangul =
      _lookup<NSStringTransform>('NSStringTransformLatinToHangul');

  NSStringTransform get NSStringTransformLatinToHangul =>
      _NSStringTransformLatinToHangul.value;

  set NSStringTransformLatinToHangul(NSStringTransform value) =>
      _NSStringTransformLatinToHangul.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToArabic =
      _lookup<NSStringTransform>('NSStringTransformLatinToArabic');

  NSStringTransform get NSStringTransformLatinToArabic =>
      _NSStringTransformLatinToArabic.value;

  set NSStringTransformLatinToArabic(NSStringTransform value) =>
      _NSStringTransformLatinToArabic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHebrew =
      _lookup<NSStringTransform>('NSStringTransformLatinToHebrew');

  NSStringTransform get NSStringTransformLatinToHebrew =>
      _NSStringTransformLatinToHebrew.value;

  set NSStringTransformLatinToHebrew(NSStringTransform value) =>
      _NSStringTransformLatinToHebrew.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToThai =
      _lookup<NSStringTransform>('NSStringTransformLatinToThai');

  NSStringTransform get NSStringTransformLatinToThai =>
      _NSStringTransformLatinToThai.value;

  set NSStringTransformLatinToThai(NSStringTransform value) =>
      _NSStringTransformLatinToThai.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToCyrillic =
      _lookup<NSStringTransform>('NSStringTransformLatinToCyrillic');

  NSStringTransform get NSStringTransformLatinToCyrillic =>
      _NSStringTransformLatinToCyrillic.value;

  set NSStringTransformLatinToCyrillic(NSStringTransform value) =>
      _NSStringTransformLatinToCyrillic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToGreek =
      _lookup<NSStringTransform>('NSStringTransformLatinToGreek');

  NSStringTransform get NSStringTransformLatinToGreek =>
      _NSStringTransformLatinToGreek.value;

  set NSStringTransformLatinToGreek(NSStringTransform value) =>
      _NSStringTransformLatinToGreek.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToLatin =
      _lookup<NSStringTransform>('NSStringTransformToLatin');

  NSStringTransform get NSStringTransformToLatin =>
      _NSStringTransformToLatin.value;

  set NSStringTransformToLatin(NSStringTransform value) =>
      _NSStringTransformToLatin.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformMandarinToLatin =
      _lookup<NSStringTransform>('NSStringTransformMandarinToLatin');

  NSStringTransform get NSStringTransformMandarinToLatin =>
      _NSStringTransformMandarinToLatin.value;

  set NSStringTransformMandarinToLatin(NSStringTransform value) =>
      _NSStringTransformMandarinToLatin.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformHiraganaToKatakana =
      _lookup<NSStringTransform>('NSStringTransformHiraganaToKatakana');

  NSStringTransform get NSStringTransformHiraganaToKatakana =>
      _NSStringTransformHiraganaToKatakana.value;

  set NSStringTransformHiraganaToKatakana(NSStringTransform value) =>
      _NSStringTransformHiraganaToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformFullwidthToHalfwidth =
      _lookup<NSStringTransform>('NSStringTransformFullwidthToHalfwidth');

  NSStringTransform get NSStringTransformFullwidthToHalfwidth =>
      _NSStringTransformFullwidthToHalfwidth.value;

  set NSStringTransformFullwidthToHalfwidth(NSStringTransform value) =>
      _NSStringTransformFullwidthToHalfwidth.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToXMLHex =
      _lookup<NSStringTransform>('NSStringTransformToXMLHex');

  NSStringTransform get NSStringTransformToXMLHex =>
      _NSStringTransformToXMLHex.value;

  set NSStringTransformToXMLHex(NSStringTransform value) =>
      _NSStringTransformToXMLHex.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToUnicodeName =
      _lookup<NSStringTransform>('NSStringTransformToUnicodeName');

  NSStringTransform get NSStringTransformToUnicodeName =>
      _NSStringTransformToUnicodeName.value;

  set NSStringTransformToUnicodeName(NSStringTransform value) =>
      _NSStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformStripCombiningMarks =
      _lookup<NSStringTransform>('NSStringTransformStripCombiningMarks');

  NSStringTransform get NSStringTransformStripCombiningMarks =>
      _NSStringTransformStripCombiningMarks.value;

  set NSStringTransformStripCombiningMarks(NSStringTransform value) =>
      _NSStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformStripDiacritics =
      _lookup<NSStringTransform>('NSStringTransformStripDiacritics');

  NSStringTransform get NSStringTransformStripDiacritics =>
      _NSStringTransformStripDiacritics.value;

  set NSStringTransformStripDiacritics(NSStringTransform value) =>
      _NSStringTransformStripDiacritics.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionSuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionSuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionSuggestedEncodingsKey =>
          _NSStringEncodingDetectionSuggestedEncodingsKey.value;

  set NSStringEncodingDetectionSuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionSuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionDisallowedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionDisallowedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionDisallowedEncodingsKey =>
          _NSStringEncodingDetectionDisallowedEncodingsKey.value;

  set NSStringEncodingDetectionDisallowedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionDisallowedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionUseOnlySuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =>
          _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value;

  set NSStringEncodingDetectionUseOnlySuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionAllowLossyKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionAllowLossyKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionAllowLossyKey =>
          _NSStringEncodingDetectionAllowLossyKey.value;

  set NSStringEncodingDetectionAllowLossyKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionAllowLossyKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionFromWindowsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionFromWindowsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionFromWindowsKey =>
          _NSStringEncodingDetectionFromWindowsKey.value;

  set NSStringEncodingDetectionFromWindowsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionFromWindowsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLossySubstitutionKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLossySubstitutionKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLossySubstitutionKey =>
          _NSStringEncodingDetectionLossySubstitutionKey.value;

  set NSStringEncodingDetectionLossySubstitutionKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLossySubstitutionKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLikelyLanguageKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLikelyLanguageKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLikelyLanguageKey =>
          _NSStringEncodingDetectionLikelyLanguageKey.value;

  set NSStringEncodingDetectionLikelyLanguageKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLikelyLanguageKey.value = value;

  late final _class_NSMutableString1 = _getClass1("NSMutableString");
  late final _sel_replaceCharactersInRange_withString_1 =
      _registerName1("replaceCharactersInRange:withString:");
  void _objc_msgSend_276(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_276(
      obj,
      sel,
      range,
      aString,
    );
  }

  late final __objc_msgSend_276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_276 = __objc_msgSend_276Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_insertString_atIndex_1 =
      _registerName1("insertString:atIndex:");
  void _objc_msgSend_277(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
    int loc,
  ) {
    return __objc_msgSend_277(
      obj,
      sel,
      aString,
      loc,
    );
  }

  late final __objc_msgSend_277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_277 = __objc_msgSend_277Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_deleteCharactersInRange_1 =
      _registerName1("deleteCharactersInRange:");
  late final _sel_appendString_1 = _registerName1("appendString:");
  void _objc_msgSend_278(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_278(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_278 = __objc_msgSend_278Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_appendFormat_1 = _registerName1("appendFormat:");
  late final _sel_setString_1 = _registerName1("setString:");
  late final _sel_replaceOccurrencesOfString_withString_options_range_1 =
      _registerName1("replaceOccurrencesOfString:withString:options:range:");
  int _objc_msgSend_279(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    NSRange searchRange,
  ) {
    return __objc_msgSend_279(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_279Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_279 = __objc_msgSend_279Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_applyTransform_reverse_range_updatedRange_1 =
      _registerName1("applyTransform:reverse:range:updatedRange:");
  bool _objc_msgSend_280(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSStringTransform transform,
    bool reverse,
    NSRange range,
    NSRangePointer resultingRange,
  ) {
    return __objc_msgSend_280(
      obj,
      sel,
      transform,
      reverse,
      range,
      resultingRange,
    );
  }

  late final __objc_msgSend_280Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringTransform,
              ffi.Bool,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_280 = __objc_msgSend_280Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSStringTransform, bool, NSRange, NSRangePointer)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_281(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int capacity,
  ) {
    return __objc_msgSend_281(
      obj,
      sel,
      capacity,
    );
  }

  late final __objc_msgSend_281Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_281 = __objc_msgSend_281Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_stringWithCapacity_1 = _registerName1("stringWithCapacity:");
  late final ffi.Pointer<NSExceptionName> _NSCharacterConversionException =
      _lookup<NSExceptionName>('NSCharacterConversionException');

  NSExceptionName get NSCharacterConversionException =>
      _NSCharacterConversionException.value;

  set NSCharacterConversionException(NSExceptionName value) =>
      _NSCharacterConversionException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSParseErrorException =
      _lookup<NSExceptionName>('NSParseErrorException');

  NSExceptionName get NSParseErrorException => _NSParseErrorException.value;

  set NSParseErrorException(NSExceptionName value) =>
      _NSParseErrorException.value = value;

  late final _class_NSSimpleCString1 = _getClass1("NSSimpleCString");
  late final _class_NSConstantString1 = _getClass1("NSConstantString");
  late final _class_SharedBase1 = _getClass1("SharedBase");
  late final _class_SharedMutableSet1 = _getClass1("SharedMutableSet");
  late final _class_SharedMutableDictionary1 =
      _getClass1("SharedMutableDictionary");
  late final _class_SharedNumber1 = _getClass1("SharedNumber");
  instancetype _objc_msgSend_282(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_282(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_282Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_282 = __objc_msgSend_282Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_283(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_283(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_283Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_283 = __objc_msgSend_283Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_284(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_284(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_284Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_284 = __objc_msgSend_284Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_285(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_285(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_285Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_285 = __objc_msgSend_285Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_286(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_286(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_286Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_286 = __objc_msgSend_286Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_287(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_287(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_287Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_287 = __objc_msgSend_287Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_288(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_288(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_288Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_288 = __objc_msgSend_288Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_289(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_289(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_289Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_289 = __objc_msgSend_289Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_290(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_290(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_290Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_290 = __objc_msgSend_290Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_291(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_291(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_291Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_291 = __objc_msgSend_291Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  instancetype _objc_msgSend_292(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_292(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_292Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_292 = __objc_msgSend_292Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  instancetype _objc_msgSend_293(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_293(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_293Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_293 = __objc_msgSend_293Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _class_SharedByte1 = _getClass1("SharedByte");
  late final _class_SharedUByte1 = _getClass1("SharedUByte");
  late final _class_SharedShort1 = _getClass1("SharedShort");
  late final _class_SharedUShort1 = _getClass1("SharedUShort");
  late final _class_SharedInt1 = _getClass1("SharedInt");
  late final _class_SharedUInt1 = _getClass1("SharedUInt");
  late final _class_SharedLong1 = _getClass1("SharedLong");
  late final _class_SharedULong1 = _getClass1("SharedULong");
  late final _class_SharedFloat1 = _getClass1("SharedFloat");
  late final _class_SharedDouble1 = _getClass1("SharedDouble");
  late final _class_SharedBoolean1 = _getClass1("SharedBoolean");
  late final _class_SharedGreeting1 = _getClass1("SharedGreeting");
  late final _sel_greet1 = _registerName1("greet");
  late final _class_SharedIOSPlatform1 = _getClass1("SharedIOSPlatform");
  late final _sel_name1 = _registerName1("name");
  late final _class_SharedPlatform_iosKt1 = _getClass1("SharedPlatform_iosKt");
  late final _sel_getPlatform1 = _registerName1("getPlatform");
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_suseconds_t = __int32_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;

class _ObjCBlockBase implements ffi.Finalizable {
  final ffi.Pointer<_ObjCBlock> _id;
  final NativeLibrary _lib;
  bool _pendingRelease;

  _ObjCBlockBase._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._Block_copy(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer2.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC block held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._Block_release(_id.cast());
      _lib._objc_releaseFinalizer2.detach(this);
    } else {
      throw StateError(
          'Released an ObjC block that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCBlockBase && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<_ObjCBlock> get pointer => _id;

  ffi.Pointer<_ObjCBlock> _retainAndReturnId() {
    _lib._Block_copy(_id.cast());
    return _id;
  }
}

void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<_ObjCBlock> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
final _ObjCBlock_ffiVoid_closureRegistry = <int, void Function()>{};
int _ObjCBlock_ffiVoid_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_registerClosure(void Function() fn) {
  final id = ++_ObjCBlock_ffiVoid_closureRegistryIndex;
  _ObjCBlock_ffiVoid_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<_ObjCBlock> block,
) =>
    _ObjCBlock_ffiVoid_closureRegistry[block.ref.target.address]!();

class ObjCBlock_ffiVoid extends _ObjCBlockBase {
  ObjCBlock_ffiVoid._(ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunctionPointer(NativeLibrary lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_ffiVoid_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunction(NativeLibrary lib, void Function() fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_ffiVoid_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_registerClosure(() => fn())),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid.listener(NativeLibrary lib, void Function() fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>)>.listener(
                        _ObjCBlock_ffiVoid_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_registerClosure(() => fn())),
            lib);
  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>)>?
      _dartFuncListenerTrampoline;

  void call() => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>>()
          .asFunction<void Function(ffi.Pointer<_ObjCBlock>)>()(
        _id,
      );
}

final class _ObjCBlockDesc extends ffi.Struct {
  @ffi.UnsignedLong()
  external int reserved;

  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<ffi.Char> signature;
}

final class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<ffi.Void> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>()
        .asFunction<
            int Function(
                ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>()(arg0, arg1);
final _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureRegistry =
    <int, int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>{};
int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiInt_ffiVoid_ffiVoid_registerClosure(
    int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>) fn) {
  final id = ++_ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureRegistryIndex;
  _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<ffi.Void> arg1) =>
    _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiInt_ffiVoid_ffiVoid extends _ObjCBlockBase {
  ObjCBlock_ffiInt_ffiVoid_ffiVoid._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiInt_ffiVoid_ffiVoid.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
                        _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrTrampoline, 0)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiInt_ffiVoid_ffiVoid.fromFunction(NativeLibrary lib,
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
                        _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureTrampoline, 0)
                    .cast(),
                _ObjCBlock_ffiInt_ffiVoid_ffiVoid_registerClosure(
                    (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1) =>
                        fn(arg0, arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  int call(ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1) => _id
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>()(_id, arg0, arg1);
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

final class objc_class extends ffi.Opaque {}

final class objc_object extends ffi.Struct {
  external ffi.Pointer<ObjCObject> isa;
}

final class ObjCObject extends ffi.Opaque {}

final class objc_selector extends ffi.Opaque {}

final class ObjCSel extends ffi.Opaque {}

typedef objc_objectptr_t = ffi.Pointer<ffi.Void>;

final class _NSZone extends ffi.Opaque {}

class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final NativeLibrary _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer11.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id.cast());
      _lib._objc_releaseFinalizer11.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<ObjCObject> get pointer => _id;

  ffi.Pointer<ObjCObject> _retainAndReturnId() {
    _lib._objc_retain(_id.cast());
    return _id;
  }
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(NativeLibrary _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(NativeLibrary _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(NativeLibrary _lib, Protocol protocol) {
    return _lib._objc_msgSend_5(
        _lib._class_NSObject1, _lib._sel_conformsToProtocol_1, protocol._id);
  }

  IMP methodForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static IMP instanceMethodForSelector_(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_7(_id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_8(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation anInvocation) {
    _lib._objc_msgSend_9(_id, _lib._sel_forwardInvocation_1, anInvocation._id);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(NativeLibrary _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static DartNSUInteger hash(NativeLibrary _lib) {
    return _lib._objc_msgSend_12(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_39(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSInteger version(NativeLibrary _lib) {
    return _lib._objc_msgSend_37(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion_(NativeLibrary _lib, DartNSInteger aVersion) {
    _lib._objc_msgSend_189(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? replacementObjectForCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_14(
        _id, _lib._sel_replacementObjectForCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? awakeAfterUsingCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_awakeAfterUsingCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  static void poseAsClass_(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_190(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void
      attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(
          NSError error,
          DartNSUInteger recoveryOptionIndex,
          NSObject? delegate,
          ffi.Pointer<ObjCSel> didRecoverSelector,
          ffi.Pointer<ffi.Void> contextInfo) {
    _lib._objc_msgSend_191(
        _id,
        _lib._sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1,
        error._id,
        recoveryOptionIndex,
        delegate?._id ?? ffi.nullptr,
        didRecoverSelector,
        contextInfo);
  }

  bool attemptRecoveryFromError_optionIndex_(
      NSError error, DartNSUInteger recoveryOptionIndex) {
    return _lib._objc_msgSend_192(
        _id,
        _lib._sel_attemptRecoveryFromError_optionIndex_1,
        error._id,
        recoveryOptionIndex);
  }
}

typedef instancetype = ffi.Pointer<ObjCObject>;
typedef Dartinstancetype = NSObject;

class Protocol extends _ObjCWrapper {
  Protocol._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends _ObjCWrapper>(T other) {
    return Protocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_Protocol1);
  }
}

typedef IMP = ffi.Pointer<ffi.NativeFunction<IMPFunction>>;
typedef IMPFunction = ffi.Void Function();
typedef DartIMPFunction = void Function();

class NSInvocation extends _ObjCWrapper {
  NSInvocation._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInvocation1);
  }
}

class NSMethodSignature extends _ObjCWrapper {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMethodSignature1);
  }
}

typedef NSUInteger = ffi.UnsignedLong;
typedef DartNSUInteger = int;

class NSString extends NSObject {
  NSString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(NativeLibrary _lib, String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(_lib, cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data =
        dataUsingEncoding_(0x94000100 /* NSUTF16LittleEndianStringEncoding */);
    return data!.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  DartNSUInteger get length {
    return _lib._objc_msgSend_12(_id, _lib._sel_length1);
  }

  Dartunichar characterAtIndex_(DartNSUInteger index) {
    return _lib._objc_msgSend_13(_id, _lib._sel_characterAtIndex_1, index);
  }

  @override
  NSString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringFromIndex_(DartNSUInteger from) {
    final _ret =
        _lib._objc_msgSend_15(_id, _lib._sel_substringFromIndex_1, from);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringToIndex_(DartNSUInteger to) {
    final _ret = _lib._objc_msgSend_15(_id, _lib._sel_substringToIndex_1, to);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringWithRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_16(_id, _lib._sel_substringWithRange_1, range);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_range_(ffi.Pointer<unichar> buffer, NSRange range) {
    _lib._objc_msgSend_17(_id, _lib._sel_getCharacters_range_1, buffer, range);
  }

  int compare_(NSString string) {
    return _lib._objc_msgSend_18(_id, _lib._sel_compare_1, string._id);
  }

  int compare_options_(NSString string, int mask) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_compare_options_1, string._id, mask);
  }

  int compare_options_range_(
      NSString string, int mask, NSRange rangeOfReceiverToCompare) {
    return _lib._objc_msgSend_20(_id, _lib._sel_compare_options_range_1,
        string._id, mask, rangeOfReceiverToCompare);
  }

  int compare_options_range_locale_(NSString string, int mask,
      NSRange rangeOfReceiverToCompare, NSObject? locale) {
    return _lib._objc_msgSend_21(_id, _lib._sel_compare_options_range_locale_1,
        string._id, mask, rangeOfReceiverToCompare, locale?._id ?? ffi.nullptr);
  }

  int caseInsensitiveCompare_(NSString string) {
    return _lib._objc_msgSend_18(
        _id, _lib._sel_caseInsensitiveCompare_1, string._id);
  }

  int localizedCompare_(NSString string) {
    return _lib._objc_msgSend_18(_id, _lib._sel_localizedCompare_1, string._id);
  }

  int localizedCaseInsensitiveCompare_(NSString string) {
    return _lib._objc_msgSend_18(
        _id, _lib._sel_localizedCaseInsensitiveCompare_1, string._id);
  }

  int localizedStandardCompare_(NSString string) {
    return _lib._objc_msgSend_18(
        _id, _lib._sel_localizedStandardCompare_1, string._id);
  }

  bool isEqualToString_(NSString aString) {
    return _lib._objc_msgSend_22(_id, _lib._sel_isEqualToString_1, aString._id);
  }

  bool hasPrefix_(NSString str) {
    return _lib._objc_msgSend_22(_id, _lib._sel_hasPrefix_1, str._id);
  }

  bool hasSuffix_(NSString str) {
    return _lib._objc_msgSend_22(_id, _lib._sel_hasSuffix_1, str._id);
  }

  NSString commonPrefixWithString_options_(NSString str, int mask) {
    final _ret = _lib._objc_msgSend_23(
        _id, _lib._sel_commonPrefixWithString_options_1, str._id, mask);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsString_(NSString str) {
    return _lib._objc_msgSend_22(_id, _lib._sel_containsString_1, str._id);
  }

  bool localizedCaseInsensitiveContainsString_(NSString str) {
    return _lib._objc_msgSend_22(
        _id, _lib._sel_localizedCaseInsensitiveContainsString_1, str._id);
  }

  bool localizedStandardContainsString_(NSString str) {
    return _lib._objc_msgSend_22(
        _id, _lib._sel_localizedStandardContainsString_1, str._id);
  }

  NSRange localizedStandardRangeOfString_(NSString str) {
    return _lib._objc_msgSend_24(
        _id, _lib._sel_localizedStandardRangeOfString_1, str._id);
  }

  NSRange rangeOfString_(NSString searchString) {
    return _lib._objc_msgSend_24(
        _id, _lib._sel_rangeOfString_1, searchString._id);
  }

  NSRange rangeOfString_options_(NSString searchString, int mask) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_rangeOfString_options_1, searchString._id, mask);
  }

  NSRange rangeOfString_options_range_(
      NSString searchString, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_26(_id, _lib._sel_rangeOfString_options_range_1,
        searchString._id, mask, rangeOfReceiverToSearch);
  }

  NSRange rangeOfString_options_range_locale_(NSString searchString, int mask,
      NSRange rangeOfReceiverToSearch, NSLocale? locale) {
    return _lib._objc_msgSend_27(
        _id,
        _lib._sel_rangeOfString_options_range_locale_1,
        searchString._id,
        mask,
        rangeOfReceiverToSearch,
        locale?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet_(NSCharacterSet searchSet) {
    return _lib._objc_msgSend_28(
        _id, _lib._sel_rangeOfCharacterFromSet_1, searchSet._id);
  }

  NSRange rangeOfCharacterFromSet_options_(NSCharacterSet searchSet, int mask) {
    return _lib._objc_msgSend_29(
        _id, _lib._sel_rangeOfCharacterFromSet_options_1, searchSet._id, mask);
  }

  NSRange rangeOfCharacterFromSet_options_range_(
      NSCharacterSet searchSet, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_30(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_range_1,
        searchSet._id,
        mask,
        rangeOfReceiverToSearch);
  }

  NSRange rangeOfComposedCharacterSequenceAtIndex_(DartNSUInteger index) {
    return _lib._objc_msgSend_31(
        _id, _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1, index);
  }

  NSRange rangeOfComposedCharacterSequencesForRange_(NSRange range) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_rangeOfComposedCharacterSequencesForRange_1, range);
  }

  NSString stringByAppendingString_(NSString aString) {
    final _ret = _lib._objc_msgSend_33(
        _id, _lib._sel_stringByAppendingString_1, aString._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByAppendingFormat_(NSString format) {
    final _ret = _lib._objc_msgSend_33(
        _id, _lib._sel_stringByAppendingFormat_1, format._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  double get doubleValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_34_fpret(_id, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_34(_id, _lib._sel_doubleValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_35_fpret(_id, _lib._sel_floatValue1)
        : _lib._objc_msgSend_35(_id, _lib._sel_floatValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_36(_id, _lib._sel_intValue1);
  }

  DartNSInteger get integerValue {
    return _lib._objc_msgSend_37(_id, _lib._sel_integerValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_38(_id, _lib._sel_longLongValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_boolValue1);
  }

  NSString get uppercaseString {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_uppercaseString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get lowercaseString {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_lowercaseString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get capitalizedString {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_capitalizedString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedUppercaseString {
    final _ret =
        _lib._objc_msgSend_39(_id, _lib._sel_localizedUppercaseString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedLowercaseString {
    final _ret =
        _lib._objc_msgSend_39(_id, _lib._sel_localizedLowercaseString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedCapitalizedString {
    final _ret =
        _lib._objc_msgSend_39(_id, _lib._sel_localizedCapitalizedString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString uppercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_40(
        _id, _lib._sel_uppercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString lowercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_40(
        _id, _lib._sel_lowercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString capitalizedStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_40(_id,
        _lib._sel_capitalizedStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getLineStart_end_contentsEnd_forRange_(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> lineEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    _lib._objc_msgSend_41(
        _id,
        _lib._sel_getLineStart_end_contentsEnd_forRange_1,
        startPtr,
        lineEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange lineRangeForRange_(NSRange range) {
    return _lib._objc_msgSend_32(_id, _lib._sel_lineRangeForRange_1, range);
  }

  void getParagraphStart_end_contentsEnd_forRange_(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> parEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    _lib._objc_msgSend_41(
        _id,
        _lib._sel_getParagraphStart_end_contentsEnd_forRange_1,
        startPtr,
        parEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange paragraphRangeForRange_(NSRange range) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_paragraphRangeForRange_1, range);
  }

  void enumerateSubstringsInRange_options_usingBlock_(NSRange range, int opts,
      ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool block) {
    _lib._objc_msgSend_42(
        _id,
        _lib._sel_enumerateSubstringsInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  void enumerateLinesUsingBlock_(ObjCBlock_ffiVoid_NSString_bool block) {
    _lib._objc_msgSend_43(_id, _lib._sel_enumerateLinesUsingBlock_1, block._id);
  }

  ffi.Pointer<ffi.Char> get UTF8String {
    return _lib._objc_msgSend_44(_id, _lib._sel_UTF8String1);
  }

  DartNSUInteger get fastestEncoding {
    return _lib._objc_msgSend_12(_id, _lib._sel_fastestEncoding1);
  }

  DartNSUInteger get smallestEncoding {
    return _lib._objc_msgSend_12(_id, _lib._sel_smallestEncoding1);
  }

  NSData? dataUsingEncoding_allowLossyConversion_(
      DartNSUInteger encoding, bool lossy) {
    final _ret = _lib._objc_msgSend_46(_id,
        _lib._sel_dataUsingEncoding_allowLossyConversion_1, encoding, lossy);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? dataUsingEncoding_(DartNSUInteger encoding) {
    final _ret =
        _lib._objc_msgSend_47(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  bool canBeConvertedToEncoding_(DartNSUInteger encoding) {
    return _lib._objc_msgSend_48(
        _id, _lib._sel_canBeConvertedToEncoding_1, encoding);
  }

  ffi.Pointer<ffi.Char> cStringUsingEncoding_(DartNSUInteger encoding) {
    return _lib._objc_msgSend_49(
        _id, _lib._sel_cStringUsingEncoding_1, encoding);
  }

  bool getCString_maxLength_encoding_(ffi.Pointer<ffi.Char> buffer,
      DartNSUInteger maxBufferCount, DartNSUInteger encoding) {
    return _lib._objc_msgSend_50(_id, _lib._sel_getCString_maxLength_encoding_1,
        buffer, maxBufferCount, encoding);
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
      ffi.Pointer<ffi.Void> buffer,
      DartNSUInteger maxBufferCount,
      ffi.Pointer<NSUInteger> usedBufferCount,
      DartNSUInteger encoding,
      int options,
      NSRange range,
      NSRangePointer leftover) {
    return _lib._objc_msgSend_51(
        _id,
        _lib._sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1,
        buffer,
        maxBufferCount,
        usedBufferCount,
        encoding,
        options,
        range,
        leftover);
  }

  DartNSUInteger maximumLengthOfBytesUsingEncoding_(DartNSUInteger enc) {
    return _lib._objc_msgSend_52(
        _id, _lib._sel_maximumLengthOfBytesUsingEncoding_1, enc);
  }

  DartNSUInteger lengthOfBytesUsingEncoding_(DartNSUInteger enc) {
    return _lib._objc_msgSend_52(
        _id, _lib._sel_lengthOfBytesUsingEncoding_1, enc);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      NativeLibrary _lib) {
    return _lib._objc_msgSend_53(
        _lib._class_NSString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding_(
      NativeLibrary _lib, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_15(_lib._class_NSString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger getDefaultCStringEncoding(NativeLibrary _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSString1, _lib._sel_defaultCStringEncoding1);
  }

  NSString get decomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_39(
        _id, _lib._sel_decomposedStringWithCanonicalMapping1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get precomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_39(
        _id, _lib._sel_precomposedStringWithCanonicalMapping1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get decomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_39(
        _id, _lib._sel_decomposedStringWithCompatibilityMapping1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get precomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_39(
        _id, _lib._sel_precomposedStringWithCompatibilityMapping1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray componentsSeparatedByString_(NSString separator) {
    final _ret = _lib._objc_msgSend_131(
        _id, _lib._sel_componentsSeparatedByString_1, separator._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray componentsSeparatedByCharactersInSet_(NSCharacterSet separator) {
    final _ret = _lib._objc_msgSend_132(
        _id, _lib._sel_componentsSeparatedByCharactersInSet_1, separator._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByTrimmingCharactersInSet_(NSCharacterSet set) {
    final _ret = _lib._objc_msgSend_133(
        _id, _lib._sel_stringByTrimmingCharactersInSet_1, set._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByPaddingToLength_withString_startingAtIndex_(
      DartNSUInteger newLength, NSString padString, DartNSUInteger padIndex) {
    final _ret = _lib._objc_msgSend_134(
        _id,
        _lib._sel_stringByPaddingToLength_withString_startingAtIndex_1,
        newLength,
        padString._id,
        padIndex);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByFoldingWithOptions_locale_(int options, NSLocale? locale) {
    final _ret = _lib._objc_msgSend_135(
        _id,
        _lib._sel_stringByFoldingWithOptions_locale_1,
        options,
        locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_options_range_(
      NSString target, NSString replacement, int options, NSRange searchRange) {
    final _ret = _lib._objc_msgSend_136(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_options_range_1,
        target._id,
        replacement._id,
        options,
        searchRange);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_(
      NSString target, NSString replacement) {
    final _ret = _lib._objc_msgSend_137(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_1,
        target._id,
        replacement._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingCharactersInRange_withString_(
      NSRange range, NSString replacement) {
    final _ret = _lib._objc_msgSend_138(
        _id,
        _lib._sel_stringByReplacingCharactersInRange_withString_1,
        range,
        replacement._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? stringByApplyingTransform_reverse_(
      DartNSStringTransform transform, bool reverse) {
    final _ret = _lib._objc_msgSend_139(_id,
        _lib._sel_stringByApplyingTransform_reverse_1, transform._id, reverse);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_atomically_encoding_error_(NSURL url, bool useAuxiliaryFile,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_140(
        _id,
        _lib._sel_writeToURL_atomically_encoding_error_1,
        url._id,
        useAuxiliaryFile,
        enc,
        error);
  }

  bool writeToFile_atomically_encoding_error_(
      NSString path,
      bool useAuxiliaryFile,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_141(
        _id,
        _lib._sel_writeToFile_atomically_encoding_error_1,
        path._id,
        useAuxiliaryFile,
        enc,
        error);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  DartNSUInteger get hash {
    return _lib._objc_msgSend_12(_id, _lib._sel_hash1);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, DartNSUInteger length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_142(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars,
      DartNSUInteger len,
      ObjCBlock_ffiVoid_unichar_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_143(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithUTF8String_(ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithString_(NSString aString) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithString_1, aString._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_(NSString format) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithFormat_1, format._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_arguments_(NSString format, va_list argList) {
    final _ret = _lib._objc_msgSend_147(
        _id, _lib._sel_initWithFormat_arguments_1, format._id, argList);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_(NSString format, NSObject? locale) {
    final _ret = _lib._objc_msgSend_148(_id, _lib._sel_initWithFormat_locale_1,
        format._id, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_arguments_(
      NSString format, NSObject? locale, va_list argList) {
    final _ret = _lib._objc_msgSend_149(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format._id,
        locale?._id ?? ffi.nullptr,
        argList);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString format,
      NSString validFormatSpecifiers,
      NSObject? locale,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_151(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
      NSString format,
      NSString validFormatSpecifiers,
      va_list argList,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_152(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          NSObject? locale,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_153(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithData_encoding_(NSData data, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_154(
        _id, _lib._sel_initWithData_encoding_1, data._id, encoding);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithBytes_length_encoding_(ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_155(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      bool freeBuffer) {
    final _ret = _lib._objc_msgSend_156(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      ObjCBlock_ffiVoid_ffiVoid_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_157(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString string(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithString_(NativeLibrary _lib, NSString string) {
    final _ret = _lib._objc_msgSend_146(
        _lib._class_NSString1, _lib._sel_stringWithString_1, string._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(NativeLibrary _lib,
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithUTF8String_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(_lib._class_NSString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithFormat_(NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(
        _lib._class_NSString1, _lib._sel_stringWithFormat_1, format._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString localizedStringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(_lib._class_NSString1,
        _lib._sel_localizedStringWithFormat_1, format._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithValidatedFormat_validFormatSpecifiers_error_(
      NativeLibrary _lib,
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSString1,
        _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSString1,
        _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_158(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithCString_encoding_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> cString, DartNSUInteger enc) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfURL_encoding_error_(NSURL url, DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(_id,
        _lib._sel_initWithContentsOfURL_encoding_error_1, url._id, enc, error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfFile_encoding_error_(NSString path,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfURL_encoding_error_(
      NativeLibrary _lib,
      NSURL url,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfFile_encoding_error_(
      NativeLibrary _lib,
      NSString path,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfURL_usedEncoding_error_(
      NativeLibrary _lib,
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfFile_usedEncoding_error_(
      NativeLibrary _lib,
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NativeLibrary _lib,
          NSData data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_180(
        _lib._class_NSString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data._id,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  NSObject propertyList() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_propertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? propertyListFromStringsFileFormat() {
    final _ret = _lib._objc_msgSend_181(
        _id, _lib._sel_propertyListFromStringsFileFormat1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Char> cString() {
    return _lib._objc_msgSend_44(_id, _lib._sel_cString1);
  }

  ffi.Pointer<ffi.Char> lossyCString() {
    return _lib._objc_msgSend_44(_id, _lib._sel_lossyCString1);
  }

  DartNSUInteger cStringLength() {
    return _lib._objc_msgSend_12(_id, _lib._sel_cStringLength1);
  }

  void getCString_(ffi.Pointer<ffi.Char> bytes) {
    _lib._objc_msgSend_182(_id, _lib._sel_getCString_1, bytes);
  }

  void getCString_maxLength_(
      ffi.Pointer<ffi.Char> bytes, DartNSUInteger maxLength) {
    _lib._objc_msgSend_183(
        _id, _lib._sel_getCString_maxLength_1, bytes, maxLength);
  }

  void getCString_maxLength_range_remainingRange_(ffi.Pointer<ffi.Char> bytes,
      DartNSUInteger maxLength, NSRange aRange, NSRangePointer leftoverRange) {
    _lib._objc_msgSend_184(
        _id,
        _lib._sel_getCString_maxLength_range_remainingRange_1,
        bytes,
        maxLength,
        aRange,
        leftoverRange);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_129(
        _id, _lib._sel_writeToFile_atomically_1, path._id, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_130(
        _id, _lib._sel_writeToURL_atomically_1, url._id, atomically);
  }

  NSObject? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_185(
        _id, _lib._sel_initWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithContentsOfURL_(NSURL url) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_initWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_185(
        _lib._class_NSString1, _lib._sel_stringWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfURL_(NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSString1, _lib._sel_stringWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithCStringNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Char> bytes, DartNSUInteger length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_187(
        _id,
        _lib._sel_initWithCStringNoCopy_length_freeWhenDone_1,
        bytes,
        length,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject? initWithCString_length_(
      ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_158(
        _id, _lib._sel_initWithCString_length_1, bytes, length);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret =
        _lib._objc_msgSend_145(_id, _lib._sel_initWithCString_1, bytes);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_length_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_145(
        _lib._class_NSString1, _lib._sel_stringWithCString_1, bytes);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_(ffi.Pointer<unichar> buffer) {
    _lib._objc_msgSend_188(_id, _lib._sel_getCharacters_1, buffer);
  }

  static NSString new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_new1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSString1, _lib._sel_allocWithZone_1, zone);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_alloc1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }
}

extension StringToNSString on String {
  NSString toNSString(NativeLibrary lib) => NSString(lib, this);
}

typedef unichar = ffi.UnsignedShort;
typedef Dartunichar = int;

class NSCoder extends _ObjCWrapper {
  NSCoder._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }
}

typedef NSRange = _NSRange;

final class _NSRange extends ffi.Struct {
  @NSUInteger()
  external int location;

  @NSUInteger()
  external int length;
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

class NSLocale extends _ObjCWrapper {
  NSLocale._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSLocale] that points to the same underlying object as [other].
  static NSLocale castFrom<T extends _ObjCWrapper>(T other) {
    return NSLocale._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSLocale] that wraps the given raw object pointer.
  static NSLocale castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSLocale._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSLocale].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSLocale1);
  }
}

class NSCharacterSet extends _ObjCWrapper {
  NSCharacterSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCharacterSet] that points to the same underlying object as [other].
  static NSCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSCharacterSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCharacterSet] that wraps the given raw object pointer.
  static NSCharacterSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCharacterSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCharacterSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSCharacterSet1);
  }
}

typedef NSInteger = ffi.Long;
typedef DartNSInteger = int;

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

void _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        NSRange arg1,
        NSRange arg2,
        ffi.Pointer<ffi.Bool> arg3) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                    NSRange arg2, ffi.Pointer<ffi.Bool> arg3)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>, NSRange, NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2, arg3);
final _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistry = <int,
    void Function(
        ffi.Pointer<ObjCObject>, NSRange, NSRange, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_registerClosure(
        void Function(ffi.Pointer<ObjCObject>, NSRange, NSRange,
                ffi.Pointer<ffi.Bool>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        NSRange arg1,
        NSRange arg2,
        ffi.Pointer<ffi.Bool> arg3) =>
    _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                      NSRange arg2, ffi.Pointer<ffi.Bool> arg3)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                NSRange,
                                NSRange,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.fromFunction(
      NativeLibrary lib,
      void Function(NSString?, NSRange, NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                NSRange,
                                NSRange,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, NSRange arg1, NSRange arg2,
                            ffi.Pointer<ffi.Bool> arg3) =>
                        fn(arg0.address == 0 ? null : NSString._(arg0, lib, retain: true, release: true), arg1, arg2, arg3))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.listener(NativeLibrary lib,
      void Function(NSString?, NSRange, NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                NSRange,
                                NSRange,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, NSRange arg1, NSRange arg2,
                            ffi.Pointer<ffi.Bool> arg3) =>
                        fn(arg0.address == 0 ? null : NSString._(arg0, lib, retain: true, release: true), arg1, arg2, arg3))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<_ObjCBlock>,
          ffi.Pointer<ObjCObject>,
          NSRange,
          NSRange,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSString? arg0, NSRange arg1, NSRange arg2,
          ffi.Pointer<ffi.Bool> arg3) =>
      _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<ObjCObject> arg0,
                          NSRange arg1,
                          NSRange arg2,
                          ffi.Pointer<ffi.Bool> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<_ObjCBlock>,
                      ffi.Pointer<ObjCObject>,
                      NSRange,
                      NSRange,
                      ffi.Pointer<ffi.Bool>)>()(
          _id, arg0?._id ?? ffi.nullptr, arg1, arg2, arg3);
}

void _ObjCBlock_ffiVoid_NSString_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSString_bool_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSString_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSString_bool_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSString_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSString_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_NSString_bool_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_NSString_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSString_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSString_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_bool.fromFunction(
      NativeLibrary lib, void Function(NSString, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSString_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(NSString._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSString_bool.listener(
      NativeLibrary lib, void Function(NSString, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSString_bool_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(NSString._(arg0, lib, retain: true, release: true),
                            arg1))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSString arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1);
}

typedef NSStringEncoding = NSUInteger;

class NSData extends _ObjCWrapper {
  NSData._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSData1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_45(_id, _lib._sel_bytes1);
  }
}

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

typedef NSRangePointer = ffi.Pointer<NSRange>;

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSArray1);
  }

  DartNSUInteger get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  DartObjectType objectAtIndex_(DartNSUInteger index) {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ObjectType> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObject_(DartObjectType anObject) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_arrayByAddingObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObjectsFromArray_(NSArray otherArray) {
    final _ret = _lib._objc_msgSend_57(
        _id, _lib._sel_arrayByAddingObjectsFromArray_1, otherArray._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString componentsJoinedByString_(NSString separator) {
    final _ret = _lib._objc_msgSend_33(
        _id, _lib._sel_componentsJoinedByString_1, separator._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(DartObjectType anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_descriptionWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(
      NSObject? locale, DartNSUInteger level) {
    final _ret = _lib._objc_msgSend_59(
        _id,
        _lib._sel_descriptionWithLocale_indent_1,
        locale?._id ?? ffi.nullptr,
        level);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  DartObjectType firstObjectCommonWithArray_(NSArray otherArray) {
    final _ret = _lib._objc_msgSend_60(
        _id, _lib._sel_firstObjectCommonWithArray_1, otherArray._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(ffi.Pointer<ObjectType1> objects, NSRange range) {
    _lib._objc_msgSend_61(_id, _lib._sel_getObjects_range_1, objects, range);
  }

  DartNSUInteger indexOfObject_(DartObjectType anObject) {
    return _lib._objc_msgSend_62(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  DartNSUInteger indexOfObject_inRange_(
      DartObjectType anObject, NSRange range) {
    return _lib._objc_msgSend_63(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  DartNSUInteger indexOfObjectIdenticalTo_(DartObjectType anObject) {
    return _lib._objc_msgSend_62(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  DartNSUInteger indexOfObjectIdenticalTo_inRange_(
      DartObjectType anObject, NSRange range) {
    return _lib._objc_msgSend_63(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray_(NSArray otherArray) {
    return _lib._objc_msgSend_64(
        _id, _lib._sel_isEqualToArray_1, otherArray._id);
  }

  DartObjectType get firstObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  DartObjectType get lastObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_reverseObjectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSData get sortedArrayHint {
    final _ret = _lib._objc_msgSend_66(_id, _lib._sel_sortedArrayHint1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(
                      ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context) {
    final _ret = _lib._objc_msgSend_67(
        _id, _lib._sel_sortedArrayUsingFunction_context_1, comparator, context);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_hint_(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(
                      ObjectType1, ObjectType1, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context,
      NSData? hint) {
    final _ret = _lib._objc_msgSend_68(
        _id,
        _lib._sel_sortedArrayUsingFunction_context_hint_1,
        comparator,
        context,
        hint?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_sortedArrayUsingSelector_1, comparator);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray subarrayWithRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_70(_id, _lib._sel_subarrayWithRange_1, range);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_78(
        _id, _lib._sel_writeToURL_error_1, url._id, error);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_7(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject? argument) {
    _lib._objc_msgSend_79(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument?._id ?? ffi.nullptr);
  }

  NSArray objectsAtIndexes_(NSIndexSet indexes) {
    final _ret =
        _lib._objc_msgSend_98(_id, _lib._sel_objectsAtIndexes_1, indexes._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  DartObjectType objectAtIndexedSubscript_(DartNSUInteger idx) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
      ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool block) {
    _lib._objc_msgSend_99(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._id);
  }

  void enumerateObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool block) {
    _lib._objc_msgSend_100(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(NSIndexSet s, int opts,
      ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool block) {
    _lib._objc_msgSend_101(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s._id,
        opts,
        block._id);
  }

  DartNSUInteger indexOfObjectPassingTest_(
      ObjCBlock_bool_ObjectType_NSUInteger_bool predicate) {
    return _lib._objc_msgSend_102(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._id);
  }

  DartNSUInteger indexOfObjectWithOptions_passingTest_(
      int opts, ObjCBlock_bool_ObjectType_NSUInteger_bool predicate) {
    return _lib._objc_msgSend_103(_id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1, opts, predicate._id);
  }

  DartNSUInteger indexOfObjectAtIndexes_options_passingTest_(NSIndexSet s,
      int opts, ObjCBlock_bool_ObjectType_NSUInteger_bool predicate) {
    return _lib._objc_msgSend_104(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s._id,
        opts,
        predicate._id);
  }

  NSIndexSet indexesOfObjectsPassingTest_(
      ObjCBlock_bool_ObjectType_NSUInteger_bool predicate) {
    final _ret = _lib._objc_msgSend_105(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock_bool_ObjectType_NSUInteger_bool predicate) {
    final _ret = _lib._objc_msgSend_106(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(NSIndexSet s,
      int opts, ObjCBlock_bool_ObjectType_NSUInteger_bool predicate) {
    final _ret = _lib._objc_msgSend_107(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s._id,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingComparator_(DartNSComparator cmptr) {
    final _ret = _lib._objc_msgSend_108(
        _id, _lib._sel_sortedArrayUsingComparator_1, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayWithOptions_usingComparator_(
      int opts, DartNSComparator cmptr) {
    final _ret = _lib._objc_msgSend_109(_id,
        _lib._sel_sortedArrayWithOptions_usingComparator_1, opts, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  DartNSUInteger indexOfObject_inSortedRange_options_usingComparator_(
      DartObjectType obj, NSRange r, int opts, DartNSComparator cmp) {
    return _lib._objc_msgSend_110(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp._id);
  }

  static NSArray array(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObject_(NativeLibrary _lib, DartObjectType anObject) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_count_(NativeLibrary _lib,
      ffi.Pointer<ObjectType3> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_(
      NativeLibrary _lib, DartObjectType firstObj) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithArray_(NativeLibrary _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSArray1, _lib._sel_arrayWithArray_1, array._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_(DartObjectType firstObj) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_(NSArray array) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithArray_1, array._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_copyItems_(NSArray array, bool flag) {
    final _ret = _lib._objc_msgSend_112(
        _id, _lib._sel_initWithArray_copyItems_1, array._id, flag);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  NSArray? initWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_113(
        _id, _lib._sel_initWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_error_(NativeLibrary _lib, NSURL url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_113(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedCollectionDifference
      differenceFromArray_withOptions_usingEquivalenceTest_(NSArray other,
          int options, ObjCBlock_bool_ObjectType_ObjectType block) {
    final _ret = _lib._objc_msgSend_122(
        _id,
        _lib._sel_differenceFromArray_withOptions_usingEquivalenceTest_1,
        other._id,
        options,
        block._id);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSOrderedCollectionDifference differenceFromArray_withOptions_(
      NSArray other, int options) {
    final _ret = _lib._objc_msgSend_123(
        _id, _lib._sel_differenceFromArray_withOptions_1, other._id, options);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSOrderedCollectionDifference differenceFromArray_(NSArray other) {
    final _ret =
        _lib._objc_msgSend_124(_id, _lib._sel_differenceFromArray_1, other._id);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSArray? arrayByApplyingDifference_(
      NSOrderedCollectionDifference difference) {
    final _ret = _lib._objc_msgSend_125(
        _id, _lib._sel_arrayByApplyingDifference_1, difference._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_(ffi.Pointer<ObjectType6> objects) {
    _lib._objc_msgSend_126(_id, _lib._sel_getObjects_1, objects);
  }

  static NSArray? arrayWithContentsOfFile_(NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_127(
        _lib._class_NSArray1, _lib._sel_arrayWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_(NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_128(
        _lib._class_NSArray1, _lib._sel_arrayWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_127(
        _id, _lib._sel_initWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithContentsOfURL_(NSURL url) {
    final _ret =
        _lib._objc_msgSend_128(_id, _lib._sel_initWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_129(
        _id, _lib._sel_writeToFile_atomically_1, path._id, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_130(
        _id, _lib._sel_writeToURL_atomically_1, url._id, atomically);
  }

  static NSArray new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray allocWithZone_(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSArray1, _lib._sel_allocWithZone_1, zone);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType = ffi.Pointer<ObjCObject>;
typedef DartObjectType = NSObject;
typedef ObjectType1 = ffi.Pointer<ObjCObject>;
typedef DartObjectType1 = NSObject;

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSEnumerator] that points to the same underlying object as [other].
  static NSEnumerator castFrom<T extends _ObjCWrapper>(T other) {
    return NSEnumerator._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSEnumerator] that wraps the given raw object pointer.
  static NSEnumerator castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSEnumerator._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSEnumerator].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSEnumerator1);
  }

  DartObjectType nextObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nextObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get allObjects {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allObjects1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSEnumerator init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  static NSEnumerator new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_new1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSEnumerator1, _lib._sel_allocWithZone_1, zone);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_alloc1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType2 = ffi.Pointer<ObjCObject>;
typedef DartObjectType2 = NSObject;

class NSURL extends _ObjCWrapper {
  NSURL._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURL] that points to the same underlying object as [other].
  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURL] that wraps the given raw object pointer.
  static NSURL castFromPointer(NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURL._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURL1);
  }
}

class NSError extends NSObject {
  NSError._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSError] that points to the same underlying object as [other].
  static NSError castFrom<T extends _ObjCWrapper>(T other) {
    return NSError._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSError] that wraps the given raw object pointer.
  static NSError castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSError._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSError].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSError1);
  }

  NSError initWithDomain_code_userInfo_(
      DartNSErrorDomain domain, DartNSInteger code, NSObject? dict) {
    final _ret = _lib._objc_msgSend_71(
        _id,
        _lib._sel_initWithDomain_code_userInfo_1,
        domain._id,
        code,
        dict?._id ?? ffi.nullptr);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  static NSError errorWithDomain_code_userInfo_(NativeLibrary _lib,
      DartNSErrorDomain domain, DartNSInteger code, NSObject? dict) {
    final _ret = _lib._objc_msgSend_71(
        _lib._class_NSError1,
        _lib._sel_errorWithDomain_code_userInfo_1,
        domain._id,
        code,
        dict?._id ?? ffi.nullptr);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  DartNSErrorDomain get domain {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_domain1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  DartNSInteger get code {
    return _lib._objc_msgSend_37(_id, _lib._sel_code1);
  }

  NSObject get userInfo {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_userInfo1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedDescription {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_localizedDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedFailureReason {
    final _ret = _lib._objc_msgSend_72(_id, _lib._sel_localizedFailureReason1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedRecoverySuggestion {
    final _ret =
        _lib._objc_msgSend_72(_id, _lib._sel_localizedRecoverySuggestion1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get localizedRecoveryOptions {
    final _ret =
        _lib._objc_msgSend_73(_id, _lib._sel_localizedRecoveryOptions1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get recoveryAttempter {
    final _ret = _lib._objc_msgSend_74(_id, _lib._sel_recoveryAttempter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? get helpAnchor {
    final _ret = _lib._objc_msgSend_72(_id, _lib._sel_helpAnchor1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray get underlyingErrors {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_underlyingErrors1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static void setUserInfoValueProviderForDomain_provider_(
      NativeLibrary _lib,
      DartNSErrorDomain errorDomain,
      ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey? provider) {
    _lib._objc_msgSend_76(
        _lib._class_NSError1,
        _lib._sel_setUserInfoValueProviderForDomain_provider_1,
        errorDomain._id,
        provider?._id ?? ffi.nullptr);
  }

  static ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey?
      userInfoValueProviderForDomain_(NativeLibrary _lib, NSError err,
          DartNSErrorUserInfoKey userInfoKey, DartNSErrorDomain errorDomain) {
    final _ret = _lib._objc_msgSend_77(
        _lib._class_NSError1,
        _lib._sel_userInfoValueProviderForDomain_1,
        err._id,
        userInfoKey._id,
        errorDomain._id);
    return _ret.address == 0
        ? null
        : ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey._(_ret, _lib,
            retain: true, release: true);
  }

  NSObject? get kotlinException {
    final _ret = _lib._objc_msgSend_74(_id, _lib._sel_kotlinException1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSError init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  static NSError new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSError1, _lib._sel_new1);
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static NSError allocWithZone_(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSError1, _lib._sel_allocWithZone_1, zone);
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static NSError alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSError1, _lib._sel_alloc1);
    return NSError._(_ret, _lib, retain: false, release: true);
  }
}

typedef NSErrorDomain = ffi.Pointer<ObjCObject>;
typedef DartNSErrorDomain = NSString;
ffi.Pointer<ObjCObject>
    _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_fnPtrTrampoline(
            ffi.Pointer<_ObjCBlock> block,
            ffi.Pointer<ObjCObject> arg0,
            NSErrorUserInfoKey arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<ObjCObject> Function(
                        ffi.Pointer<ObjCObject> arg0,
                        NSErrorUserInfoKey arg1)>>()
            .asFunction<
                ffi.Pointer<ObjCObject> Function(
                    ffi.Pointer<ObjCObject>, NSErrorUserInfoKey)>()(arg0, arg1);
final _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureRegistry = <int,
    ffi.Pointer<ObjCObject> Function(
        ffi.Pointer<ObjCObject>, NSErrorUserInfoKey)>{};
int _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_registerClosure(
        ffi.Pointer<ObjCObject> Function(
                ffi.Pointer<ObjCObject>, NSErrorUserInfoKey)
            fn) {
  final id =
      ++_ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureRegistryIndex;
  _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureTrampoline(
            ffi.Pointer<_ObjCBlock> block,
            ffi.Pointer<ObjCObject> arg0,
            NSErrorUserInfoKey arg1) =>
        _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureRegistry[
            block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey extends _ObjCBlockBase {
  ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<ObjCObject> arg0, NSErrorUserInfoKey arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                NSErrorUserInfoKey)>(
                        _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey.fromFunction(
      NativeLibrary lib, NSObject? Function(NSError, DartNSErrorUserInfoKey) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                NSErrorUserInfoKey)>(
                        _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_closureTrampoline)
                    .cast(),
                _ObjCBlock_ObjCObject_NSError_NSErrorUserInfoKey_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, NSErrorUserInfoKey arg1) =>
                        fn(NSError._(arg0, lib, retain: true, release: true), NSString._(arg1, lib, retain: true, release: true))
                            ?._retainAndReturnId() ??
                        ffi.nullptr)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSObject? call(NSError arg0, DartNSErrorUserInfoKey arg1) => _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<ObjCObject> arg0,
                          NSErrorUserInfoKey arg1)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, NSErrorUserInfoKey)>()
              (_id, arg0._id, arg1._id)
              .address ==
          0
      ? null
      : NSObject._(
          _id.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0, NSErrorUserInfoKey arg1)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, NSErrorUserInfoKey)>()(_id, arg0._id, arg1._id),
          _lib,
          retain: false,
          release: true);
}

typedef NSErrorUserInfoKey = ffi.Pointer<ObjCObject>;
typedef DartNSErrorUserInfoKey = NSString;

class NSIndexSet extends NSObject {
  NSIndexSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSIndexSet] that points to the same underlying object as [other].
  static NSIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSIndexSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSIndexSet] that wraps the given raw object pointer.
  static NSIndexSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSIndexSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSIndexSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSIndexSet1);
  }

  static NSIndexSet indexSet(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_indexSet1);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndex_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndex_1, value);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndexesInRange_(
      NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_80(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexesInRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_80(_id, _lib._sel_initWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexSet_(NSIndexSet indexSet) {
    final _ret =
        _lib._objc_msgSend_81(_id, _lib._sel_initWithIndexSet_1, indexSet._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndex_(DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_initWithIndex_1, value);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToIndexSet_(NSIndexSet indexSet) {
    return _lib._objc_msgSend_82(
        _id, _lib._sel_isEqualToIndexSet_1, indexSet._id);
  }

  DartNSUInteger get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  DartNSUInteger get firstIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_firstIndex1);
  }

  DartNSUInteger get lastIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_lastIndex1);
  }

  DartNSUInteger indexGreaterThanIndex_(DartNSUInteger value) {
    return _lib._objc_msgSend_52(_id, _lib._sel_indexGreaterThanIndex_1, value);
  }

  DartNSUInteger indexLessThanIndex_(DartNSUInteger value) {
    return _lib._objc_msgSend_52(_id, _lib._sel_indexLessThanIndex_1, value);
  }

  DartNSUInteger indexGreaterThanOrEqualToIndex_(DartNSUInteger value) {
    return _lib._objc_msgSend_52(
        _id, _lib._sel_indexGreaterThanOrEqualToIndex_1, value);
  }

  DartNSUInteger indexLessThanOrEqualToIndex_(DartNSUInteger value) {
    return _lib._objc_msgSend_52(
        _id, _lib._sel_indexLessThanOrEqualToIndex_1, value);
  }

  DartNSUInteger getIndexes_maxCount_inIndexRange_(
      ffi.Pointer<NSUInteger> indexBuffer,
      DartNSUInteger bufferSize,
      NSRangePointer range) {
    return _lib._objc_msgSend_83(
        _id,
        _lib._sel_getIndexes_maxCount_inIndexRange_1,
        indexBuffer,
        bufferSize,
        range);
  }

  DartNSUInteger countOfIndexesInRange_(NSRange range) {
    return _lib._objc_msgSend_84(_id, _lib._sel_countOfIndexesInRange_1, range);
  }

  bool containsIndex_(DartNSUInteger value) {
    return _lib._objc_msgSend_48(_id, _lib._sel_containsIndex_1, value);
  }

  bool containsIndexesInRange_(NSRange range) {
    return _lib._objc_msgSend_85(
        _id, _lib._sel_containsIndexesInRange_1, range);
  }

  bool containsIndexes_(NSIndexSet indexSet) {
    return _lib._objc_msgSend_82(
        _id, _lib._sel_containsIndexes_1, indexSet._id);
  }

  bool intersectsIndexesInRange_(NSRange range) {
    return _lib._objc_msgSend_85(
        _id, _lib._sel_intersectsIndexesInRange_1, range);
  }

  void enumerateIndexesUsingBlock_(ObjCBlock_ffiVoid_NSUInteger_bool block) {
    _lib._objc_msgSend_86(
        _id, _lib._sel_enumerateIndexesUsingBlock_1, block._id);
  }

  void enumerateIndexesWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_NSUInteger_bool block) {
    _lib._objc_msgSend_87(_id,
        _lib._sel_enumerateIndexesWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateIndexesInRange_options_usingBlock_(
      NSRange range, int opts, ObjCBlock_ffiVoid_NSUInteger_bool block) {
    _lib._objc_msgSend_88(
        _id,
        _lib._sel_enumerateIndexesInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  DartNSUInteger indexPassingTest_(ObjCBlock_bool_NSUInteger_bool predicate) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_indexPassingTest_1, predicate._id);
  }

  DartNSUInteger indexWithOptions_passingTest_(
      int opts, ObjCBlock_bool_NSUInteger_bool predicate) {
    return _lib._objc_msgSend_90(
        _id, _lib._sel_indexWithOptions_passingTest_1, opts, predicate._id);
  }

  DartNSUInteger indexInRange_options_passingTest_(
      NSRange range, int opts, ObjCBlock_bool_NSUInteger_bool predicate) {
    return _lib._objc_msgSend_91(
        _id,
        _lib._sel_indexInRange_options_passingTest_1,
        range,
        opts,
        predicate._id);
  }

  NSIndexSet indexesPassingTest_(ObjCBlock_bool_NSUInteger_bool predicate) {
    final _ret = _lib._objc_msgSend_92(
        _id, _lib._sel_indexesPassingTest_1, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesWithOptions_passingTest_(
      int opts, ObjCBlock_bool_NSUInteger_bool predicate) {
    final _ret = _lib._objc_msgSend_93(
        _id, _lib._sel_indexesWithOptions_passingTest_1, opts, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesInRange_options_passingTest_(
      NSRange range, int opts, ObjCBlock_bool_NSUInteger_bool predicate) {
    final _ret = _lib._objc_msgSend_94(
        _id,
        _lib._sel_indexesInRange_options_passingTest_1,
        range,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateRangesUsingBlock_(ObjCBlock_ffiVoid_NSRange_bool block) {
    _lib._objc_msgSend_95(
        _id, _lib._sel_enumerateRangesUsingBlock_1, block._id);
  }

  void enumerateRangesWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_NSRange_bool block) {
    _lib._objc_msgSend_96(_id,
        _lib._sel_enumerateRangesWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateRangesInRange_options_usingBlock_(
      NSRange range, int opts, ObjCBlock_ffiVoid_NSRange_bool block) {
    _lib._objc_msgSend_97(
        _id,
        _lib._sel_enumerateRangesInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  @override
  NSIndexSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_new1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexSet allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSIndexSet1, _lib._sel_allocWithZone_1, zone);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_alloc1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSUInteger_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    NSUInteger arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<void Function(int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSUInteger_bool_closureRegistry =
    <int, void Function(int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSUInteger_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSUInteger_bool_registerClosure(
    void Function(int, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSUInteger_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSUInteger_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSUInteger_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_NSUInteger_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSUInteger_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSUInteger_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSUInteger_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSUInteger arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                NSUInteger, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSUInteger_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSUInteger_bool.fromFunction(NativeLibrary lib,
      void Function(DartNSUInteger, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                NSUInteger, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSUInteger_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSUInteger_bool_registerClosure(
                    (int arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSUInteger_bool.listener(NativeLibrary lib,
      void Function(DartNSUInteger, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                NSUInteger, ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_NSUInteger_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSUInteger_bool_registerClosure(
                    (int arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<_ObjCBlock>, NSUInteger, ffi.Pointer<ffi.Bool>)>?
      _dartFuncListenerTrampoline;

  void call(DartNSUInteger arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block, NSUInteger arg0,
                  ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, int,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0, arg1);
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

bool _ObjCBlock_bool_NSUInteger_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    NSUInteger arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<bool Function(int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_bool_NSUInteger_bool_closureRegistry =
    <int, bool Function(int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_NSUInteger_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_NSUInteger_bool_registerClosure(
    bool Function(int, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_bool_NSUInteger_bool_closureRegistryIndex;
  _ObjCBlock_bool_NSUInteger_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_NSUInteger_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_bool_NSUInteger_bool_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_bool_NSUInteger_bool extends _ObjCBlockBase {
  ObjCBlock_bool_NSUInteger_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_NSUInteger_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      NSUInteger arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>,
                                NSUInteger, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_NSUInteger_bool_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_NSUInteger_bool.fromFunction(NativeLibrary lib,
      bool Function(DartNSUInteger, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>,
                                NSUInteger, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_NSUInteger_bool_closureTrampoline,
                        false)
                    .cast(),
                _ObjCBlock_bool_NSUInteger_bool_registerClosure(
                    (int arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(DartNSUInteger arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<_ObjCBlock> block, NSUInteger arg0,
                  ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<_ObjCBlock>, int,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0, arg1);
}

void _ObjCBlock_ffiVoid_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        NSRange arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(NSRange, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSRange_bool_closureRegistry =
    <int, void Function(NSRange, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSRange_bool_registerClosure(
    void Function(NSRange, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        NSRange arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_NSRange_bool_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_NSRange_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSRange_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSRange_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>, NSRange,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSRange_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSRange_bool.fromFunction(
      NativeLibrary lib, void Function(NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>, NSRange,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSRange_bool_registerClosure(
                    (NSRange arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(arg0, arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSRange_bool.listener(
      NativeLibrary lib, void Function(NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>, NSRange,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSRange_bool_registerClosure(
                    (NSRange arg0, ffi.Pointer<ffi.Bool> arg1) =>
                        fn(arg0, arg1))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<_ObjCBlock>, NSRange, ffi.Pointer<ffi.Bool>)>?
      _dartFuncListenerTrampoline;

  void call(NSRange arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block, NSRange arg0,
                  ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, NSRange,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0, arg1);
}

void _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType1 arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ObjectType1 arg0, NSUInteger arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ObjectType1, int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureRegistry =
    <int, void Function(ObjectType1, int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_registerClosure(
        void Function(ObjectType1, int, ffi.Pointer<ffi.Bool>) fn) {
  final id =
      ++_ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType1 arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ObjectType1 arg0, NSUInteger arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ObjectType1,
                                NSUInteger,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool.fromFunction(NativeLibrary lib,
      void Function(DartObjectType1, DartNSUInteger, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ObjectType1,
                                NSUInteger,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_registerClosure(
                    (ObjectType1 arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        arg1,
                        arg2))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool.listener(NativeLibrary lib,
      void Function(DartObjectType1, DartNSUInteger, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ObjectType1,
                                NSUInteger,
                                ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ObjectType_NSUInteger_bool_registerClosure(
                    (ObjectType1 arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
                        fn(NSObject._(arg0, lib, retain: true, release: true),
                            arg1, arg2))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ObjectType1, NSUInteger,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(DartObjectType1 arg0, DartNSUInteger arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ObjectType1 arg0,
                      NSUInteger arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ObjectType1, int,
                  ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1, arg2);
}

bool _ObjCBlock_bool_ObjectType_NSUInteger_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType1 arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ObjectType1 arg0, NSUInteger arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ObjectType1, int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_bool_ObjectType_NSUInteger_bool_closureRegistry =
    <int, bool Function(ObjectType1, int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_ObjectType_NSUInteger_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_ObjectType_NSUInteger_bool_registerClosure(
        bool Function(ObjectType1, int, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_bool_ObjectType_NSUInteger_bool_closureRegistryIndex;
  _ObjCBlock_bool_ObjectType_NSUInteger_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_ObjectType_NSUInteger_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType1 arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_bool_ObjectType_NSUInteger_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_bool_ObjectType_NSUInteger_bool extends _ObjCBlockBase {
  ObjCBlock_bool_ObjectType_NSUInteger_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ObjectType_NSUInteger_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ObjectType1 arg0, NSUInteger arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock>,
                                ObjectType1,
                                NSUInteger,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_ObjectType_NSUInteger_bool_fnPtrTrampoline,
                        false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ObjectType_NSUInteger_bool.fromFunction(NativeLibrary lib,
      bool Function(DartObjectType1, DartNSUInteger, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock>,
                                ObjectType1,
                                NSUInteger,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_ObjectType_NSUInteger_bool_closureTrampoline,
                        false)
                    .cast(),
                _ObjCBlock_bool_ObjectType_NSUInteger_bool_registerClosure(
                    (ObjectType1 arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
                        fn(NSObject._(arg0, lib, retain: true, release: true), arg1, arg2))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(DartObjectType1 arg0, DartNSUInteger arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ObjectType1 arg0,
                      NSUInteger arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              bool Function(ffi.Pointer<_ObjCBlock>, ObjectType1, int,
                  ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1, arg2);
}

typedef NSComparator = ffi.Pointer<_ObjCBlock>;
typedef DartNSComparator = ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject;
int _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            int Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureRegistry =
    <int, int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_registerClosure(
        int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>) fn) {
  final id =
      ++_ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureRegistryIndex;
  _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject
    extends _ObjCBlockBase {
  ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int32 Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_fnPtrTrampoline,
                        0)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject.fromFunction(
      NativeLibrary lib, int Function(NSObject, NSObject) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int32 Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_closureTrampoline, 0)
                    .cast(),
                _ObjCBlock_NSComparisonResult_ObjCObject_ObjCObject_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        NSObject._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  int call(NSObject arg0, NSObject arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>()(_id, arg0._id, arg1._id);
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

typedef ObjectType3 = ffi.Pointer<ObjCObject>;
typedef DartObjectType3 = NSObject;

class NSOrderedCollectionDifference extends NSObject {
  NSOrderedCollectionDifference._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSOrderedCollectionDifference] that points to the same underlying object as [other].
  static NSOrderedCollectionDifference castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSOrderedCollectionDifference._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSOrderedCollectionDifference] that wraps the given raw object pointer.
  static NSOrderedCollectionDifference castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSOrderedCollectionDifference._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOrderedCollectionDifference].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSOrderedCollectionDifference1);
  }

  NSOrderedCollectionDifference initWithChanges_(NSObject changes) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithChanges_1, changes._id);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_(
          NSIndexSet inserts,
          NSObject? insertedObjects,
          NSIndexSet removes,
          NSObject? removedObjects,
          NSObject changes) {
    final _ret = _lib._objc_msgSend_114(
        _id,
        _lib._sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_1,
        inserts._id,
        insertedObjects?._id ?? ffi.nullptr,
        removes._id,
        removedObjects?._id ?? ffi.nullptr,
        changes._id);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_(
          NSIndexSet inserts,
          NSObject? insertedObjects,
          NSIndexSet removes,
          NSObject? removedObjects) {
    final _ret = _lib._objc_msgSend_115(
        _id,
        _lib._sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_1,
        inserts._id,
        insertedObjects?._id ?? ffi.nullptr,
        removes._id,
        removedObjects?._id ?? ffi.nullptr);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSObject get insertions {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_insertions1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get removals {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_removals1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get hasChanges {
    return _lib._objc_msgSend_11(_id, _lib._sel_hasChanges1);
  }

  NSOrderedCollectionDifference differenceByTransformingChangesWithBlock_(
      ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange block) {
    final _ret = _lib._objc_msgSend_121(
        _id, _lib._sel_differenceByTransformingChangesWithBlock_1, block._id);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  NSOrderedCollectionDifference inverseDifference() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_inverseDifference1);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  @override
  NSOrderedCollectionDifference init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: true, release: true);
  }

  static NSOrderedCollectionDifference new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrderedCollectionDifference1, _lib._sel_new1);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: false, release: true);
  }

  static NSOrderedCollectionDifference allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSOrderedCollectionDifference1,
        _lib._sel_allocWithZone_1,
        zone);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: false, release: true);
  }

  static NSOrderedCollectionDifference alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrderedCollectionDifference1, _lib._sel_alloc1);
    return NSOrderedCollectionDifference._(_ret, _lib,
        retain: false, release: true);
  }
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_fnPtrTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<ObjCObject> Function(
                        ffi.Pointer<ObjCObject> arg0)>>()
            .asFunction<
                ffi.Pointer<ObjCObject> Function(
                    ffi.Pointer<ObjCObject>)>()(arg0);
final _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureRegistry =
    <int, ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_registerClosure(
        ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>) fn) {
  final id =
      ++_ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureRegistryIndex;
  _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureRegistry[
      id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) =>
        _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureRegistry[
            block.ref.target.address]!(arg0);

class ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange
    extends _ObjCBlockBase {
  ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange.fromFunction(
      NativeLibrary lib,
      NSOrderedCollectionChange Function(NSOrderedCollectionChange) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_closureTrampoline)
                    .cast(),
                _ObjCBlock_NSOrderedCollectionChange_NSOrderedCollectionChange_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0) =>
                        fn(NSOrderedCollectionChange._(arg0, lib, retain: true, release: true))
                            ._retainAndReturnId())),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSOrderedCollectionChange call(NSOrderedCollectionChange arg0) =>
      NSOrderedCollectionChange._(
          _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<ObjCObject> arg0)>>()
              .asFunction<
                  ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>,
                      ffi.Pointer<ObjCObject>)>()(_id, arg0._id),
          _lib,
          retain: false,
          release: true);
}

class NSOrderedCollectionChange extends NSObject {
  NSOrderedCollectionChange._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSOrderedCollectionChange] that points to the same underlying object as [other].
  static NSOrderedCollectionChange castFrom<T extends _ObjCWrapper>(T other) {
    return NSOrderedCollectionChange._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSOrderedCollectionChange] that wraps the given raw object pointer.
  static NSOrderedCollectionChange castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSOrderedCollectionChange._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOrderedCollectionChange].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSOrderedCollectionChange1);
  }

  static NSOrderedCollectionChange changeWithObject_type_index_(
      NativeLibrary _lib,
      DartObjectType anObject,
      int type,
      DartNSUInteger index) {
    final _ret = _lib._objc_msgSend_116(_lib._class_NSOrderedCollectionChange1,
        _lib._sel_changeWithObject_type_index_1, anObject._id, type, index);
    return NSOrderedCollectionChange._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedCollectionChange changeWithObject_type_index_associatedIndex_(
      NativeLibrary _lib,
      DartObjectType anObject,
      int type,
      DartNSUInteger index,
      DartNSUInteger associatedIndex) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSOrderedCollectionChange1,
        _lib._sel_changeWithObject_type_index_associatedIndex_1,
        anObject._id,
        type,
        index,
        associatedIndex);
    return NSOrderedCollectionChange._(_ret, _lib, retain: true, release: true);
  }

  DartObjectType get object {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_object1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get changeType {
    return _lib._objc_msgSend_118(_id, _lib._sel_changeType1);
  }

  DartNSUInteger get index {
    return _lib._objc_msgSend_12(_id, _lib._sel_index1);
  }

  DartNSUInteger get associatedIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_associatedIndex1);
  }

  @override
  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedCollectionChange initWithObject_type_index_(
      DartObjectType anObject, int type, DartNSUInteger index) {
    final _ret = _lib._objc_msgSend_119(
        _id, _lib._sel_initWithObject_type_index_1, anObject._id, type, index);
    return NSOrderedCollectionChange._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedCollectionChange initWithObject_type_index_associatedIndex_(
      DartObjectType anObject,
      int type,
      DartNSUInteger index,
      DartNSUInteger associatedIndex) {
    final _ret = _lib._objc_msgSend_120(
        _id,
        _lib._sel_initWithObject_type_index_associatedIndex_1,
        anObject._id,
        type,
        index,
        associatedIndex);
    return NSOrderedCollectionChange._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedCollectionChange new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrderedCollectionChange1, _lib._sel_new1);
    return NSOrderedCollectionChange._(_ret, _lib,
        retain: false, release: true);
  }

  static NSOrderedCollectionChange allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(_lib._class_NSOrderedCollectionChange1,
        _lib._sel_allocWithZone_1, zone);
    return NSOrderedCollectionChange._(_ret, _lib,
        retain: false, release: true);
  }

  static NSOrderedCollectionChange alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrderedCollectionChange1, _lib._sel_alloc1);
    return NSOrderedCollectionChange._(_ret, _lib,
        retain: false, release: true);
  }
}

typedef ObjectType4 = ffi.Pointer<ObjCObject>;
typedef DartObjectType4 = NSObject;

abstract class NSCollectionChangeType {
  static const int NSCollectionChangeInsert = 0;
  static const int NSCollectionChangeRemove = 1;
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock_bool_ObjectType_ObjectType_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ObjectType5 arg0, ObjectType5 arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ObjectType5 arg0, ObjectType5 arg1)>>()
        .asFunction<bool Function(ObjectType5, ObjectType5)>()(arg0, arg1);
final _ObjCBlock_bool_ObjectType_ObjectType_closureRegistry =
    <int, bool Function(ObjectType5, ObjectType5)>{};
int _ObjCBlock_bool_ObjectType_ObjectType_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_ObjectType_ObjectType_registerClosure(
    bool Function(ObjectType5, ObjectType5) fn) {
  final id = ++_ObjCBlock_bool_ObjectType_ObjectType_closureRegistryIndex;
  _ObjCBlock_bool_ObjectType_ObjectType_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_ObjectType_ObjectType_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ObjectType5 arg0, ObjectType5 arg1) =>
    _ObjCBlock_bool_ObjectType_ObjectType_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_bool_ObjectType_ObjectType extends _ObjCBlockBase {
  ObjCBlock_bool_ObjectType_ObjectType._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ObjectType_ObjectType.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi
              .NativeFunction<
                  ffi.Bool Function(ObjectType5 arg0, ObjectType5 arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>,
                                ObjectType5, ObjectType5)>(
                        _ObjCBlock_bool_ObjectType_ObjectType_fnPtrTrampoline,
                        false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ObjectType_ObjectType.fromFunction(
      NativeLibrary lib, bool Function(DartObjectType, DartObjectType) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>, ObjectType5, ObjectType5)>(
                        _ObjCBlock_bool_ObjectType_ObjectType_closureTrampoline, false)
                    .cast(),
                _ObjCBlock_bool_ObjectType_ObjectType_registerClosure(
                    (ObjectType5 arg0, ObjectType5 arg1) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        NSObject._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(DartObjectType arg0, DartObjectType arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<_ObjCBlock> block, ObjectType5 arg0,
                  ObjectType5 arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<_ObjCBlock>, ObjectType5,
              ObjectType5)>()(_id, arg0._id, arg1._id);
}

typedef ObjectType5 = ffi.Pointer<ObjCObject>;
typedef DartObjectType5 = NSObject;
typedef ObjectType6 = ffi.Pointer<ObjCObject>;
typedef DartObjectType6 = NSObject;
typedef NSStringTransform = ffi.Pointer<ObjCObject>;
typedef DartNSStringTransform = NSString;
void _ObjCBlock_ffiVoid_unichar_NSUInteger_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<unichar> arg0, int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
        .asFunction<void Function(ffi.Pointer<unichar>, int)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_unichar_NSUInteger_closureRegistry =
    <int, void Function(ffi.Pointer<unichar>, int)>{};
int _ObjCBlock_ffiVoid_unichar_NSUInteger_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_unichar_NSUInteger_registerClosure(
    void Function(ffi.Pointer<unichar>, int) fn) {
  final id = ++_ObjCBlock_ffiVoid_unichar_NSUInteger_closureRegistryIndex;
  _ObjCBlock_ffiVoid_unichar_NSUInteger_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_unichar_NSUInteger_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<unichar> arg0, int arg1) =>
    _ObjCBlock_ffiVoid_unichar_NSUInteger_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_unichar_NSUInteger extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_unichar_NSUInteger._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_unichar_NSUInteger.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<unichar> arg0, NSUInteger arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<unichar>, NSUInteger)>(
                        _ObjCBlock_ffiVoid_unichar_NSUInteger_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_unichar_NSUInteger.fromFunction(
      NativeLibrary lib, void Function(ffi.Pointer<unichar>, DartNSUInteger) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<unichar>, NSUInteger)>(
                        _ObjCBlock_ffiVoid_unichar_NSUInteger_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_unichar_NSUInteger_registerClosure(
                    (ffi.Pointer<unichar> arg0, int arg1) => fn(arg0, arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_unichar_NSUInteger.listener(
      NativeLibrary lib, void Function(ffi.Pointer<unichar>, DartNSUInteger) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<unichar>, NSUInteger)>.listener(
                        _ObjCBlock_ffiVoid_unichar_NSUInteger_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_unichar_NSUInteger_registerClosure(
                    (ffi.Pointer<unichar> arg0, int arg1) => fn(arg0, arg1))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<_ObjCBlock>, ffi.Pointer<unichar>, NSUInteger)>?
      _dartFuncListenerTrampoline;

  void call(ffi.Pointer<unichar> arg0, DartNSUInteger arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<unichar>,
              int)>()(_id, arg0, arg1);
}

typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
void _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
        .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureRegistry =
    <int, void Function(ffi.Pointer<ffi.Void>, int)>{};
int _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_registerClosure(
    void Function(ffi.Pointer<ffi.Void>, int) fn) {
  final id = ++_ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) =>
    _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_NSUInteger extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ffi.Void>, NSUInteger)>(
                        _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger.fromFunction(NativeLibrary lib,
      void Function(ffi.Pointer<ffi.Void>, DartNSUInteger) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ffi.Void>, NSUInteger)>(
                        _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_registerClosure(
                    (ffi.Pointer<ffi.Void> arg0, int arg1) => fn(arg0, arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSUInteger.listener(NativeLibrary lib,
      void Function(ffi.Pointer<ffi.Void>, DartNSUInteger) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ffi.Void>, NSUInteger)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ffiVoid_NSUInteger_registerClosure(
                    (ffi.Pointer<ffi.Void> arg0, int arg1) => fn(arg0, arg1))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<_ObjCBlock>, ffi.Pointer<ffi.Void>, NSUInteger)>?
      _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, DartNSUInteger arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ffi.Void>,
              int)>()(_id, arg0, arg1);
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDictionary1);
  }

  DartNSUInteger get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  DartObjectType objectForKey_(DartKeyType aKey) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_objectForKey_1, aKey._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator keyEnumerator() {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_keyEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(ffi.Pointer<ObjectType7> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_163(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allKeys {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_allKeys1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray allKeysForObject_(DartObjectType anObject) {
    final _ret =
        _lib._objc_msgSend_56(_id, _lib._sel_allKeysForObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allValues {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_allValues1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get descriptionInStringsFileFormat {
    final _ret =
        _lib._objc_msgSend_39(_id, _lib._sel_descriptionInStringsFileFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_descriptionWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(
      NSObject? locale, DartNSUInteger level) {
    final _ret = _lib._objc_msgSend_59(
        _id,
        _lib._sel_descriptionWithLocale_indent_1,
        locale?._id ?? ffi.nullptr,
        level);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToDictionary_(NSDictionary otherDictionary) {
    return _lib._objc_msgSend_164(
        _id, _lib._sel_isEqualToDictionary_1, otherDictionary._id);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSArray objectsForKeys_notFoundMarker_(NSArray keys, DartObjectType marker) {
    final _ret = _lib._objc_msgSend_165(
        _id, _lib._sel_objectsForKeys_notFoundMarker_1, keys._id, marker._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_78(
        _id, _lib._sel_writeToURL_error_1, url._id, error);
  }

  NSArray keysSortedByValueUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_keysSortedByValueUsingSelector_1, comparator);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_count_(ffi.Pointer<ObjectType8> objects,
      ffi.Pointer<KeyType1> keys, DartNSUInteger count) {
    _lib._objc_msgSend_166(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  DartObjectType objectForKeyedSubscript_(DartKeyType key) {
    final _ret = _lib._objc_msgSend_111(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateKeysAndObjectsUsingBlock_(
      ObjCBlock_ffiVoid_KeyType_ObjectType_bool block) {
    _lib._objc_msgSend_167(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._id);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_KeyType_ObjectType_bool block) {
    _lib._objc_msgSend_168(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._id);
  }

  NSArray keysSortedByValueUsingComparator_(DartNSComparator cmptr) {
    final _ret = _lib._objc_msgSend_108(
        _id, _lib._sel_keysSortedByValueUsingComparator_1, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray keysSortedByValueWithOptions_usingComparator_(
      int opts, DartNSComparator cmptr) {
    final _ret = _lib._objc_msgSend_109(
        _id,
        _lib._sel_keysSortedByValueWithOptions_usingComparator_1,
        opts,
        cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesPassingTest_(
      ObjCBlock_bool_KeyType_ObjectType_bool predicate) {
    final _ret = _lib._objc_msgSend_169(
        _id, _lib._sel_keysOfEntriesPassingTest_1, predicate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesWithOptions_passingTest_(
      int opts, ObjCBlock_bool_KeyType_ObjectType_bool predicate) {
    final _ret = _lib._objc_msgSend_170(_id,
        _lib._sel_keysOfEntriesWithOptions_passingTest_1, opts, predicate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_(
      ffi.Pointer<ObjectType9> objects, ffi.Pointer<KeyType2> keys) {
    _lib._objc_msgSend_171(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  static NSDictionary? dictionaryWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_172(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_(
      NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_173(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_172(
        _id, _lib._sel_initWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfURL_(NSURL url) {
    final _ret =
        _lib._objc_msgSend_173(_id, _lib._sel_initWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_129(
        _id, _lib._sel_writeToFile_atomically_1, path._id, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_130(
        _id, _lib._sel_writeToURL_atomically_1, url._id, atomically);
  }

  static NSDictionary dictionary(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObject_forKey_(
      NativeLibrary _lib, DartObjectType object, NSObject key) {
    final _ret = _lib._objc_msgSend_174(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count_(
      NativeLibrary _lib,
      ffi.Pointer<ObjectType10> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_163(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjectsAndKeys_(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_111(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithDictionary_(
      NativeLibrary _lib, NSDictionary dict) {
    final _ret = _lib._objc_msgSend_175(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_(
      NativeLibrary _lib, NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_176(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1, objects._id, keys._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_111(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _lib._objc_msgSend_175(
        _id, _lib._sel_initWithDictionary_1, otherDictionary._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_copyItems_(
      NSDictionary otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_177(_id,
        _lib._sel_initWithDictionary_copyItems_1, otherDictionary._id, flag);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  NSDictionary initWithObjects_forKeys_(NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_176(
        _id, _lib._sel_initWithObjects_forKeys_1, objects._id, keys._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_178(
        _id, _lib._sel_initWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(NativeLibrary _lib,
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_178(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(NativeLibrary _lib, NSArray keys) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSDictionary1, _lib._sel_sharedKeySetForKeys_1, keys._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  DartNSUInteger countByEnumeratingWithState_objects_count_(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<K> buffer,
      DartNSUInteger len) {
    return _lib._objc_msgSend_179(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  static NSDictionary new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSDictionary1, _lib._sel_allocWithZone_1, zone);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType7 = ffi.Pointer<ObjCObject>;
typedef DartObjectType7 = NSObject;
typedef KeyType = ffi.Pointer<ObjCObject>;
typedef DartKeyType = NSObject;
typedef ObjectType8 = ffi.Pointer<ObjCObject>;
typedef DartObjectType8 = NSObject;
typedef KeyType1 = ffi.Pointer<ObjCObject>;
typedef DartKeyType1 = NSObject;
void _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        KeyType1 arg0,
        ObjectType8 arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(KeyType1 arg0, ObjectType8 arg1,
                        ffi.Pointer<ffi.Bool> arg2)>>()
            .asFunction<
                void Function(KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>)>()(
        arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureRegistry =
    <int, void Function(KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_registerClosure(
        void Function(KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        KeyType1 arg0,
        ObjectType8 arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_KeyType_ObjectType_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_KeyType_ObjectType_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_KeyType_ObjectType_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(KeyType1 arg0, ObjectType8 arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>, KeyType1,
                                ObjectType8, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_KeyType_ObjectType_bool.fromFunction(NativeLibrary lib,
      void Function(DartKeyType1, DartObjectType8, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>, KeyType1,
                                ObjectType8, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_registerClosure(
                    (KeyType1 arg0, ObjectType8 arg1, ffi.Pointer<ffi.Bool> arg2) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        NSObject._(arg1, lib, retain: true, release: true),
                        arg2))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_KeyType_ObjectType_bool.listener(NativeLibrary lib,
      void Function(DartKeyType1, DartObjectType8, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>, KeyType1,
                                ObjectType8, ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_KeyType_ObjectType_bool_registerClosure(
                    (KeyType1 arg0, ObjectType8 arg1, ffi.Pointer<ffi.Bool> arg2) =>
                        fn(
                            NSObject._(arg0, lib, retain: true, release: true),
                            NSObject._(arg1, lib, retain: true, release: true),
                            arg2))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, KeyType1, ObjectType8,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(DartKeyType1 arg0, DartObjectType8 arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      KeyType1 arg0,
                      ObjectType8 arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, KeyType1, ObjectType8,
                  ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1._id, arg2);
}

bool _ObjCBlock_bool_KeyType_ObjectType_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        KeyType1 arg0,
        ObjectType8 arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Bool Function(KeyType1 arg0, ObjectType8 arg1,
                        ffi.Pointer<ffi.Bool> arg2)>>()
            .asFunction<
                bool Function(KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>)>()(
        arg0, arg1, arg2);
final _ObjCBlock_bool_KeyType_ObjectType_bool_closureRegistry =
    <int, bool Function(KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_KeyType_ObjectType_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_KeyType_ObjectType_bool_registerClosure(
    bool Function(KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_bool_KeyType_ObjectType_bool_closureRegistryIndex;
  _ObjCBlock_bool_KeyType_ObjectType_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_KeyType_ObjectType_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        KeyType1 arg0,
        ObjectType8 arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_bool_KeyType_ObjectType_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_bool_KeyType_ObjectType_bool extends _ObjCBlockBase {
  ObjCBlock_bool_KeyType_ObjectType_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_KeyType_ObjectType_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(KeyType1 arg0, ObjectType8 arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>, KeyType1,
                                ObjectType8, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_KeyType_ObjectType_bool_fnPtrTrampoline,
                        false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_KeyType_ObjectType_bool.fromFunction(NativeLibrary lib,
      bool Function(DartKeyType1, DartObjectType8, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>, KeyType1, ObjectType8, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_KeyType_ObjectType_bool_closureTrampoline, false)
                    .cast(),
                _ObjCBlock_bool_KeyType_ObjectType_bool_registerClosure(
                    (KeyType1 arg0, ObjectType8 arg1, ffi.Pointer<ffi.Bool> arg2) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        NSObject._(arg1, lib, retain: true, release: true),
                        arg2))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(DartKeyType1 arg0, DartObjectType8 arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<_ObjCBlock> block,
                      KeyType1 arg0,
                      ObjectType8 arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              bool Function(ffi.Pointer<_ObjCBlock>, KeyType1, ObjectType8,
                  ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1._id, arg2);
}

typedef ObjectType9 = ffi.Pointer<ObjCObject>;
typedef DartObjectType9 = NSObject;
typedef KeyType2 = ffi.Pointer<ObjCObject>;
typedef DartKeyType2 = NSObject;
typedef ObjectType10 = ffi.Pointer<ObjCObject>;
typedef DartObjectType10 = NSObject;

final class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

typedef K = ffi.Pointer<ObjCObject>;
typedef DartK = NSObject;

abstract class NSQualityOfService {
  static const int NSQualityOfServiceUserInteractive = 33;
  static const int NSQualityOfServiceUserInitiated = 25;
  static const int NSQualityOfServiceUtility = 17;
  static const int NSQualityOfServiceBackground = 9;
  static const int NSQualityOfServiceDefault = -1;
}

abstract class ptrauth_key {
  static const int ptrauth_key_none = -1;
  static const int ptrauth_key_asia = 0;
  static const int ptrauth_key_asib = 1;
  static const int ptrauth_key_asda = 2;
  static const int ptrauth_key_asdb = 3;
  static const int ptrauth_key_process_independent_code = 0;
  static const int ptrauth_key_process_dependent_code = 1;
  static const int ptrauth_key_process_independent_data = 2;
  static const int ptrauth_key_process_dependent_data = 3;
  static const int ptrauth_key_function_pointer = 0;
  static const int ptrauth_key_return_address = 1;
  static const int ptrauth_key_frame_pointer = 3;
  static const int ptrauth_key_block_function = 0;
  static const int ptrauth_key_cxx_vtable_pointer = 2;
  static const int ptrauth_key_method_list_pointer = 2;
  static const int ptrauth_key_objc_isa_pointer = 2;
  static const int ptrauth_key_objc_super_pointer = 2;
  static const int ptrauth_key_block_descriptor_pointer = 2;
  static const int ptrauth_key_objc_sel_pointer = 3;
  static const int ptrauth_key_objc_class_ro_pointer = 2;
}

@ffi.Packed(2)
final class wide extends ffi.Struct {
  @UInt32()
  external int lo;

  @SInt32()
  external int hi;
}

typedef UInt32 = ffi.UnsignedInt;
typedef DartUInt32 = int;
typedef SInt32 = ffi.Int;
typedef DartSInt32 = int;

@ffi.Packed(2)
final class UnsignedWide extends ffi.Struct {
  @UInt32()
  external int lo;

  @UInt32()
  external int hi;
}

final class Float80 extends ffi.Struct {
  @SInt16()
  external int exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

typedef SInt16 = ffi.Short;
typedef DartSInt16 = int;
typedef UInt16 = ffi.UnsignedShort;
typedef DartUInt16 = int;

final class Float96 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<SInt16> exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

@ffi.Packed(2)
final class Float32Point extends ffi.Struct {
  @Float32()
  external double x;

  @Float32()
  external double y;
}

typedef Float32 = ffi.Float;
typedef DartFloat32 = double;

@ffi.Packed(2)
final class ProcessSerialNumber extends ffi.Struct {
  @UInt32()
  external int highLongOfPSN;

  @UInt32()
  external int lowLongOfPSN;
}

final class Point extends ffi.Struct {
  @ffi.Short()
  external int v;

  @ffi.Short()
  external int h;
}

final class Rect extends ffi.Struct {
  @ffi.Short()
  external int top;

  @ffi.Short()
  external int left;

  @ffi.Short()
  external int bottom;

  @ffi.Short()
  external int right;
}

@ffi.Packed(2)
final class FixedPoint extends ffi.Struct {
  @Fixed()
  external int x;

  @Fixed()
  external int y;
}

typedef Fixed = SInt32;

@ffi.Packed(2)
final class FixedRect extends ffi.Struct {
  @Fixed()
  external int left;

  @Fixed()
  external int top;

  @Fixed()
  external int right;

  @Fixed()
  external int bottom;
}

final class TimeBaseRecord extends ffi.Opaque {}

@ffi.Packed(2)
final class TimeRecord extends ffi.Struct {
  external CompTimeValue value;

  @TimeScale()
  external int scale;

  external TimeBase base;
}

typedef CompTimeValue = wide;
typedef TimeScale = SInt32;
typedef TimeBase = ffi.Pointer<TimeBaseRecord>;

final class NumVersion extends ffi.Struct {
  @UInt8()
  external int nonRelRev;

  @UInt8()
  external int stage;

  @UInt8()
  external int minorAndBugRev;

  @UInt8()
  external int majorRev;
}

typedef UInt8 = ffi.UnsignedChar;
typedef DartUInt8 = int;

final class NumVersionVariant extends ffi.Union {
  external NumVersion parts;

  @UInt32()
  external int whole;
}

final class VersRec extends ffi.Struct {
  external NumVersion numericVersion;

  @ffi.Short()
  external int countryCode;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> shortVersion;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> reserved;
}

typedef ConstStr255Param = ffi.Pointer<ffi.UnsignedChar>;

final class __CFString extends ffi.Opaque {}

abstract class CFComparisonResult {
  static const int kCFCompareLessThan = -1;
  static const int kCFCompareEqualTo = 0;
  static const int kCFCompareGreaterThan = 1;
}

typedef CFIndex = ffi.Long;
typedef DartCFIndex = int;

final class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

final class __CFNull extends ffi.Opaque {}

typedef CFTypeID = ffi.UnsignedLong;
typedef DartCFTypeID = int;
typedef CFNullRef = ffi.Pointer<__CFNull>;

final class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

final class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

typedef CFAllocatorRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorRetainCallBackFunction>>;
typedef CFAllocatorRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorReleaseCallBackFunction>>;
typedef CFAllocatorReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFAllocatorCopyDescriptionCallBackFunction>>;
typedef CFAllocatorCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);
typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFAllocatorAllocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorAllocateCallBackFunction>>;
typedef CFAllocatorAllocateCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFIndex allocSize, CFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorAllocateCallBackFunction
    = ffi.Pointer<ffi.Void> Function(DartCFIndex allocSize,
        DartCFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef CFOptionFlags = ffi.UnsignedLong;
typedef DartCFOptionFlags = int;
typedef CFAllocatorReallocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorReallocateCallBackFunction>>;
typedef CFAllocatorReallocateCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr,
    CFIndex newsize,
    CFOptionFlags hint,
    ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorReallocateCallBackFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> ptr,
        DartCFIndex newsize,
        DartCFOptionFlags hint,
        ffi.Pointer<ffi.Void> info);
typedef CFAllocatorDeallocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorDeallocateCallBackFunction>>;
typedef CFAllocatorDeallocateCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorDeallocateCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> info);
typedef CFAllocatorPreferredSizeCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorPreferredSizeCallBackFunction>>;
typedef CFAllocatorPreferredSizeCallBackFunction = CFIndex Function(
    CFIndex size, CFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorPreferredSizeCallBackFunction = DartCFIndex Function(
    DartCFIndex size, DartCFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef Boolean = ffi.UnsignedChar;
typedef DartBoolean = int;
typedef CFHashCode = ffi.UnsignedLong;
typedef DartCFHashCode = int;
typedef NSZone = _NSZone;

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSValue1);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, DartNSUInteger size) {
    _lib._objc_msgSend_193(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_44(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get nonretainedObjectValue {
    final _ret = _lib._objc_msgSend_74(_id, _lib._sel_nonretainedObjectValue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _lib._objc_msgSend_45(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue_(NSValue value) {
    return _lib._objc_msgSend_198(_id, _lib._sel_isEqualToValue_1, value._id);
  }

  void getValue_(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_199(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSRange get rangeValue {
    return _lib._objc_msgSend_201(_id, _lib._sel_rangeValue1);
  }

  @override
  NSValue init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue allocWithZone_(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSValue1, _lib._sel_allocWithZone_1, zone);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSNumber1);
  }

  @override
  NSNumber? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_202(_id, _lib._sel_initWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_203(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_204(_id, _lib._sel_initWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_205(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_206(_id, _lib._sel_initWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_207(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_208(_id, _lib._sel_initWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_209(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_210(_id, _lib._sel_initWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_211(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_212(_id, _lib._sel_initWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_213(_id, _lib._sel_initWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_214(_id, _lib._sel_initWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_208(_id, _lib._sel_initWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_209(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_215(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_216(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_217(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_218(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_36(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_219(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_37(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_38(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_220(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_35_fpret(_id, _lib._sel_floatValue1)
        : _lib._objc_msgSend_35(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_useVariants1
        ? _lib._objc_msgSend_34_fpret(_id, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_34(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_boolValue1);
  }

  DartNSInteger get integerValue {
    return _lib._objc_msgSend_37(_id, _lib._sel_integerValue1);
  }

  DartNSUInteger get unsignedIntegerValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSString get stringValue {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_stringValue1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSNumber otherNumber) {
    return _lib._objc_msgSend_221(_id, _lib._sel_compare_1, otherNumber._id);
  }

  bool isEqualToNumber_(NSNumber number) {
    return _lib._objc_msgSend_222(_id, _lib._sel_isEqualToNumber_1, number._id);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_descriptionWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_202(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_203(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_204(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_205(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_206(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_207(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_208(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_209(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_210(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_211(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_212(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_213(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_214(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInteger_(NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_208(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_209(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_NSNumber1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_NSNumber1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_NSNumber1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_NSNumber1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_NSNumber1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSNumber1, _lib._sel_allocWithZone_1, zone);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableIndexSet extends NSIndexSet {
  NSMutableIndexSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableIndexSet] that points to the same underlying object as [other].
  static NSMutableIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableIndexSet._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableIndexSet] that wraps the given raw object pointer.
  static NSMutableIndexSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableIndexSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableIndexSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableIndexSet1);
  }

  void addIndexes_(NSIndexSet indexSet) {
    _lib._objc_msgSend_223(_id, _lib._sel_addIndexes_1, indexSet._id);
  }

  void removeIndexes_(NSIndexSet indexSet) {
    _lib._objc_msgSend_223(_id, _lib._sel_removeIndexes_1, indexSet._id);
  }

  void removeAllIndexes() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllIndexes1);
  }

  void addIndex_(DartNSUInteger value) {
    _lib._objc_msgSend_224(_id, _lib._sel_addIndex_1, value);
  }

  void removeIndex_(DartNSUInteger value) {
    _lib._objc_msgSend_224(_id, _lib._sel_removeIndex_1, value);
  }

  void addIndexesInRange_(NSRange range) {
    _lib._objc_msgSend_225(_id, _lib._sel_addIndexesInRange_1, range);
  }

  void removeIndexesInRange_(NSRange range) {
    _lib._objc_msgSend_225(_id, _lib._sel_removeIndexesInRange_1, range);
  }

  void shiftIndexesStartingAtIndex_by_(
      DartNSUInteger index, DartNSInteger delta) {
    _lib._objc_msgSend_226(
        _id, _lib._sel_shiftIndexesStartingAtIndex_by_1, index, delta);
  }

  static NSMutableIndexSet indexSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableIndexSet1, _lib._sel_indexSet1);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableIndexSet indexSetWithIndex_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSMutableIndexSet1, _lib._sel_indexSetWithIndex_1, value);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableIndexSet indexSetWithIndexesInRange_(
      NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_80(_lib._class_NSMutableIndexSet1,
        _lib._sel_indexSetWithIndexesInRange_1, range);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableIndexSet initWithIndexesInRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_80(_id, _lib._sel_initWithIndexesInRange_1, range);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableIndexSet initWithIndexSet_(NSIndexSet indexSet) {
    final _ret =
        _lib._objc_msgSend_81(_id, _lib._sel_initWithIndexSet_1, indexSet._id);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableIndexSet initWithIndex_(DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_initWithIndex_1, value);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableIndexSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableIndexSet new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableIndexSet1, _lib._sel_new1);
    return NSMutableIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableIndexSet allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMutableIndexSet1, _lib._sel_allocWithZone_1, zone);
    return NSMutableIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableIndexSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableIndexSet1, _lib._sel_alloc1);
    return NSMutableIndexSet._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableArray] that points to the same underlying object as [other].
  static NSMutableArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableArray] that wraps the given raw object pointer.
  static NSMutableArray castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableArray1);
  }

  void addObject_(DartObjectType anObject) {
    _lib._objc_msgSend_190(_id, _lib._sel_addObject_1, anObject._id);
  }

  void insertObject_atIndex_(DartObjectType anObject, DartNSUInteger index) {
    _lib._objc_msgSend_227(
        _id, _lib._sel_insertObject_atIndex_1, anObject._id, index);
  }

  void removeLastObject() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeLastObject1);
  }

  void removeObjectAtIndex_(DartNSUInteger index) {
    _lib._objc_msgSend_224(_id, _lib._sel_removeObjectAtIndex_1, index);
  }

  void replaceObjectAtIndex_withObject_(
      DartNSUInteger index, DartObjectType anObject) {
    _lib._objc_msgSend_228(
        _id, _lib._sel_replaceObjectAtIndex_withObject_1, index, anObject._id);
  }

  @override
  NSMutableArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithCapacity_(DartNSUInteger numItems) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray otherArray) {
    _lib._objc_msgSend_229(
        _id, _lib._sel_addObjectsFromArray_1, otherArray._id);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(
      DartNSUInteger idx1, DartNSUInteger idx2) {
    _lib._objc_msgSend_230(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange_(DartObjectType anObject, NSRange range) {
    _lib._objc_msgSend_231(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject_(DartObjectType anObject) {
    _lib._objc_msgSend_190(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange_(
      DartObjectType anObject, NSRange range) {
    _lib._objc_msgSend_231(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo_(DartObjectType anObject) {
    _lib._objc_msgSend_190(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices_(
      ffi.Pointer<NSUInteger> indices, DartNSUInteger cnt) {
    _lib._objc_msgSend_232(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray_(NSArray otherArray) {
    _lib._objc_msgSend_229(
        _id, _lib._sel_removeObjectsInArray_1, otherArray._id);
  }

  void removeObjectsInRange_(NSRange range) {
    _lib._objc_msgSend_225(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range_(
      NSRange range, NSArray otherArray, NSRange otherRange) {
    _lib._objc_msgSend_233(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray._id,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray_(
      NSRange range, NSArray otherArray) {
    _lib._objc_msgSend_234(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray._id);
  }

  void setArray_(NSArray otherArray) {
    _lib._objc_msgSend_229(_id, _lib._sel_setArray_1, otherArray._id);
  }

  void sortUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(
                      ObjectType12, ObjectType12, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    _lib._objc_msgSend_235(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    _lib._objc_msgSend_7(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes_(NSArray objects, NSIndexSet indexes) {
    _lib._objc_msgSend_236(
        _id, _lib._sel_insertObjects_atIndexes_1, objects._id, indexes._id);
  }

  void removeObjectsAtIndexes_(NSIndexSet indexes) {
    _lib._objc_msgSend_223(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes._id);
  }

  void replaceObjectsAtIndexes_withObjects_(
      NSIndexSet indexes, NSArray objects) {
    _lib._objc_msgSend_237(_id, _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes._id, objects._id);
  }

  void setObject_atIndexedSubscript_(DartObjectType obj, DartNSUInteger idx) {
    _lib._objc_msgSend_227(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator_(DartNSComparator cmptr) {
    _lib._objc_msgSend_238(_id, _lib._sel_sortUsingComparator_1, cmptr._id);
  }

  void sortWithOptions_usingComparator_(int opts, DartNSComparator cmptr) {
    _lib._objc_msgSend_239(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr._id);
  }

  static NSMutableArray arrayWithCapacity_(
      NativeLibrary _lib, DartNSUInteger numItems) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray? arrayWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_240(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray? arrayWithContentsOfURL_(
      NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_241(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_240(
        _id, _lib._sel_initWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray? initWithContentsOfURL_(NSURL url) {
    final _ret =
        _lib._objc_msgSend_241(_id, _lib._sel_initWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSOrderedCollectionDifference difference) {
    _lib._objc_msgSend_242(_id, _lib._sel_applyDifference_1, difference._id);
  }

  @override
  NSMutableArray initWithObjects_count_(
      ffi.Pointer<ObjectType> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray array(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_array1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObject_(
      NativeLibrary _lib, DartObjectType3 anObject) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_count_(NativeLibrary _lib,
      ffi.Pointer<ObjectType3> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_(
      NativeLibrary _lib, DartObjectType3 firstObj) {
    final _ret = _lib._objc_msgSend_111(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithArray_(NativeLibrary _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithArray_1, array._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithObjects_(DartObjectType3 firstObj) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithArray_(NSArray array) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithArray_1, array._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithArray_copyItems_(NSArray array, bool flag) {
    final _ret = _lib._objc_msgSend_112(
        _id, _lib._sel_initWithArray_copyItems_1, array._id, flag);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray? arrayWithContentsOfURL_error_(NativeLibrary _lib, NSURL url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_113(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_new1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMutableArray1, _lib._sel_allocWithZone_1, zone);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_alloc1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType11 = ffi.Pointer<ObjCObject>;
typedef DartObjectType11 = NSObject;
typedef ObjectType12 = ffi.Pointer<ObjCObject>;
typedef DartObjectType12 = NSObject;

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableDictionary] that points to the same underlying object as [other].
  static NSMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableDictionary._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableDictionary] that wraps the given raw object pointer.
  static NSMutableDictionary castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableDictionary1);
  }

  void removeObjectForKey_(DartKeyType aKey) {
    _lib._objc_msgSend_190(_id, _lib._sel_removeObjectForKey_1, aKey._id);
  }

  void setObject_forKey_(DartObjectType anObject, NSObject aKey) {
    _lib._objc_msgSend_243(
        _id, _lib._sel_setObject_forKey_1, anObject._id, aKey._id);
  }

  @override
  NSMutableDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithCapacity_(DartNSUInteger numItems) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  void addEntriesFromDictionary_(NSDictionary otherDictionary) {
    _lib._objc_msgSend_244(
        _id, _lib._sel_addEntriesFromDictionary_1, otherDictionary._id);
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys_(NSArray keyArray) {
    _lib._objc_msgSend_229(_id, _lib._sel_removeObjectsForKeys_1, keyArray._id);
  }

  void setDictionary_(NSDictionary otherDictionary) {
    _lib._objc_msgSend_244(_id, _lib._sel_setDictionary_1, otherDictionary._id);
  }

  void setObject_forKeyedSubscript_(DartObjectType obj, NSObject key) {
    _lib._objc_msgSend_243(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity_(
      NativeLibrary _lib, DartNSUInteger numItems) {
    final _ret = _lib._objc_msgSend_54(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary? dictionaryWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_245(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary? dictionaryWithContentsOfURL_(
      NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_246(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_245(
        _id, _lib._sel_initWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary? initWithContentsOfURL_(NSURL url) {
    final _ret =
        _lib._objc_msgSend_246(_id, _lib._sel_initWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithSharedKeySet_(
      NativeLibrary _lib, NSObject keyset) {
    final _ret = _lib._objc_msgSend_247(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithSharedKeySet_1, keyset._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ObjectType7> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_163(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionary(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_dictionary1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObject_forKey_(
      NativeLibrary _lib, DartObjectType10 object, NSObject key) {
    final _ret = _lib._objc_msgSend_174(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count_(
      NativeLibrary _lib,
      ffi.Pointer<ObjectType10> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_163(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys_(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_111(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithDictionary_(
      NativeLibrary _lib, NSDictionary dict) {
    final _ret = _lib._objc_msgSend_175(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_(
      NativeLibrary _lib, NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_176(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1, objects._id, keys._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_111(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _lib._objc_msgSend_175(
        _id, _lib._sel_initWithDictionary_1, otherDictionary._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithDictionary_copyItems_(
      NSDictionary otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_177(_id,
        _lib._sel_initWithDictionary_copyItems_1, otherDictionary._id, flag);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableDictionary initWithObjects_forKeys_(NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_176(
        _id, _lib._sel_initWithObjects_forKeys_1, objects._id, keys._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(NativeLibrary _lib,
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_178(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(NativeLibrary _lib, NSArray keys) {
    final _ret = _lib._objc_msgSend_60(_lib._class_NSMutableDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableDictionary1, _lib._sel_new1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMutableDictionary1, _lib._sel_allocWithZone_1, zone);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_alloc1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }
}

typedef KeyType3 = ffi.Pointer<ObjCObject>;
typedef DartKeyType3 = NSObject;
typedef ObjectType13 = ffi.Pointer<ObjCObject>;
typedef DartObjectType13 = NSObject;
typedef ObjectType14 = ffi.Pointer<ObjCObject>;
typedef DartObjectType14 = NSObject;

class NSSet extends NSObject {
  NSSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSSet] that points to the same underlying object as [other].
  static NSSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSSet] that wraps the given raw object pointer.
  static NSSet castFromPointer(NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSSet1);
  }

  DartNSUInteger get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  DartObjectType member_(DartObjectType object) {
    final _ret = _lib._objc_msgSend_111(_id, _lib._sel_member_1, object._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_count_(
      ffi.Pointer<ObjectType15> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allObjects {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_allObjects1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  DartObjectType anyObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_anyObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(DartObjectType anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_descriptionWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool intersectsSet_(NSSet otherSet) {
    return _lib._objc_msgSend_248(_id, _lib._sel_intersectsSet_1, otherSet._id);
  }

  bool isEqualToSet_(NSSet otherSet) {
    return _lib._objc_msgSend_248(_id, _lib._sel_isEqualToSet_1, otherSet._id);
  }

  bool isSubsetOfSet_(NSSet otherSet) {
    return _lib._objc_msgSend_248(_id, _lib._sel_isSubsetOfSet_1, otherSet._id);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_7(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject? argument) {
    _lib._objc_msgSend_79(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument?._id ?? ffi.nullptr);
  }

  NSSet setByAddingObject_(DartObjectType anObject) {
    final _ret = _lib._objc_msgSend_249(
        _id, _lib._sel_setByAddingObject_1, anObject._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromSet_(NSSet other) {
    final _ret = _lib._objc_msgSend_250(
        _id, _lib._sel_setByAddingObjectsFromSet_1, other._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromArray_(NSArray other) {
    final _ret = _lib._objc_msgSend_251(
        _id, _lib._sel_setByAddingObjectsFromArray_1, other._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock_ffiVoid_ObjectType_bool block) {
    _lib._objc_msgSend_252(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._id);
  }

  void enumerateObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_ObjectType_bool block) {
    _lib._objc_msgSend_253(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._id);
  }

  NSSet objectsPassingTest_(ObjCBlock_bool_ObjectType_bool predicate) {
    final _ret = _lib._objc_msgSend_254(
        _id, _lib._sel_objectsPassingTest_1, predicate._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet objectsWithOptions_passingTest_(
      int opts, ObjCBlock_bool_ObjectType_bool predicate) {
    final _ret = _lib._objc_msgSend_255(
        _id, _lib._sel_objectsWithOptions_passingTest_1, opts, predicate._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet set1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_set1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObject_(NativeLibrary _lib, DartObjectType object) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSSet1, _lib._sel_setWithObject_1, object._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_count_(NativeLibrary _lib,
      ffi.Pointer<ObjectType17> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _lib._class_NSSet1, _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_(NativeLibrary _lib, DartObjectType firstObj) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithSet_(NativeLibrary _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_NSSet1, _lib._sel_setWithSet_1, set._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithArray_(NativeLibrary _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSSet1, _lib._sel_setWithArray_1, array._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_(DartObjectType firstObj) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_256(_id, _lib._sel_initWithSet_1, set._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_257(
        _id, _lib._sel_initWithSet_copyItems_1, set._id, flag);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  NSSet initWithArray_(NSArray array) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithArray_1, array._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_new1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static NSSet allocWithZone_(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSSet1, _lib._sel_allocWithZone_1, zone);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static NSSet alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_alloc1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType15 = ffi.Pointer<ObjCObject>;
typedef DartObjectType15 = NSObject;
typedef ObjectType16 = ffi.Pointer<ObjCObject>;
typedef DartObjectType16 = NSObject;
void _ObjCBlock_ffiVoid_ObjectType_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType16 arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1)>>()
            .asFunction<void Function(ObjectType16, ffi.Pointer<ffi.Bool>)>()(
        arg0, arg1);
final _ObjCBlock_ffiVoid_ObjectType_bool_closureRegistry =
    <int, void Function(ObjectType16, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_ObjectType_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ObjectType_bool_registerClosure(
    void Function(ObjectType16, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_ffiVoid_ObjectType_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ObjectType_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ObjectType_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType16 arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_ffiVoid_ObjectType_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ObjectType_bool extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ObjectType_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjectType_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ObjectType16, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ObjectType_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjectType_bool.fromFunction(NativeLibrary lib,
      void Function(DartObjectType16, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ObjectType16, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_ObjectType_bool_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ObjectType_bool_registerClosure(
                    (ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ObjectType_bool.listener(NativeLibrary lib,
      void Function(DartObjectType16, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock>,
                                ObjectType16, ffi.Pointer<ffi.Bool>)>.listener(
                        _ObjCBlock_ffiVoid_ObjectType_bool_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ObjectType_bool_registerClosure(
                    (ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1) => fn(
                        NSObject._(arg0, lib, retain: true, release: true),
                        arg1))),
            lib);
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<_ObjCBlock>, ObjectType16, ffi.Pointer<ffi.Bool>)>?
      _dartFuncListenerTrampoline;

  void call(DartObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                  ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<_ObjCBlock>, ObjectType16,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1);
}

bool _ObjCBlock_bool_ObjectType_bool_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType16 arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Bool Function(
                        ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1)>>()
            .asFunction<bool Function(ObjectType16, ffi.Pointer<ffi.Bool>)>()(
        arg0, arg1);
final _ObjCBlock_bool_ObjectType_bool_closureRegistry =
    <int, bool Function(ObjectType16, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_ObjectType_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_ObjectType_bool_registerClosure(
    bool Function(ObjectType16, ffi.Pointer<ffi.Bool>) fn) {
  final id = ++_ObjCBlock_bool_ObjectType_bool_closureRegistryIndex;
  _ObjCBlock_bool_ObjectType_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_ObjectType_bool_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ObjectType16 arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    _ObjCBlock_bool_ObjectType_bool_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_bool_ObjectType_bool extends _ObjCBlockBase {
  ObjCBlock_bool_ObjectType_bool._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ObjectType_bool.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ObjectType16 arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib
                ._newBlock1(
                    _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                                ffi.Bool Function(ffi.Pointer<_ObjCBlock>,
                                    ObjectType16, ffi.Pointer<ffi.Bool>)>(
                            _ObjCBlock_bool_ObjectType_bool_fnPtrTrampoline,
                            false)
                        .cast(),
                    ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ObjectType_bool.fromFunction(NativeLibrary lib,
      bool Function(DartObjectType16, ffi.Pointer<ffi.Bool>) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(ffi.Pointer<_ObjCBlock>,
                                ObjectType16, ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_bool_ObjectType_bool_closureTrampoline, false)
                    .cast(),
                _ObjCBlock_bool_ObjectType_bool_registerClosure(
                    (ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1) => fn(
                        NSObject._(arg0, lib, retain: true, release: true), arg1))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(DartObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1) => _id.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<_ObjCBlock> block,
                  ObjectType16 arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<_ObjCBlock>, ObjectType16,
              ffi.Pointer<ffi.Bool>)>()(_id, arg0._id, arg1);
}

typedef ObjectType17 = ffi.Pointer<ObjCObject>;
typedef DartObjectType17 = NSObject;

class NSMutableSet extends NSSet {
  NSMutableSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableSet] that points to the same underlying object as [other].
  static NSMutableSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableSet] that wraps the given raw object pointer.
  static NSMutableSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMutableSet1);
  }

  void addObject_(DartObjectType object) {
    _lib._objc_msgSend_190(_id, _lib._sel_addObject_1, object._id);
  }

  void removeObject_(DartObjectType object) {
    _lib._objc_msgSend_190(_id, _lib._sel_removeObject_1, object._id);
  }

  @override
  NSMutableSet? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableSet initWithCapacity_(DartNSUInteger numItems) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray array) {
    _lib._objc_msgSend_229(_id, _lib._sel_addObjectsFromArray_1, array._id);
  }

  void intersectSet_(NSSet otherSet) {
    _lib._objc_msgSend_258(_id, _lib._sel_intersectSet_1, otherSet._id);
  }

  void minusSet_(NSSet otherSet) {
    _lib._objc_msgSend_258(_id, _lib._sel_minusSet_1, otherSet._id);
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void unionSet_(NSSet otherSet) {
    _lib._objc_msgSend_258(_id, _lib._sel_unionSet_1, otherSet._id);
  }

  void setSet_(NSSet otherSet) {
    _lib._objc_msgSend_258(_id, _lib._sel_setSet_1, otherSet._id);
  }

  static NSMutableSet setWithCapacity_(
      NativeLibrary _lib, DartNSUInteger numItems) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSMutableSet1, _lib._sel_setWithCapacity_1, numItems);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithObjects_count_(
      ffi.Pointer<ObjectType15> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet set1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_set1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObject_(
      NativeLibrary _lib, DartObjectType17 object) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSMutableSet1, _lib._sel_setWithObject_1, object._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_count_(NativeLibrary _lib,
      ffi.Pointer<ObjectType17> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(_lib._class_NSMutableSet1,
        _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_(
      NativeLibrary _lib, DartObjectType17 firstObj) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSMutableSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithSet_(NativeLibrary _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_NSMutableSet1, _lib._sel_setWithSet_1, set._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithArray_(NativeLibrary _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSMutableSet1, _lib._sel_setWithArray_1, array._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithObjects_(DartObjectType17 firstObj) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_256(_id, _lib._sel_initWithSet_1, set._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_257(
        _id, _lib._sel_initWithSet_copyItems_1, set._id, flag);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableSet initWithArray_(NSArray array) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithArray_1, array._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_new1);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableSet allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMutableSet1, _lib._sel_allocWithZone_1, zone);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_alloc1);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType18 = ffi.Pointer<ObjCObject>;
typedef DartObjectType18 = NSObject;

class NSCountedSet extends NSMutableSet {
  NSCountedSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCountedSet] that points to the same underlying object as [other].
  static NSCountedSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSCountedSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCountedSet] that wraps the given raw object pointer.
  static NSCountedSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCountedSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCountedSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCountedSet1);
  }

  @override
  NSCountedSet initWithCapacity_(DartNSUInteger numItems) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCountedSet initWithArray_(NSArray array) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithArray_1, array._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCountedSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_256(_id, _lib._sel_initWithSet_1, set._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  DartNSUInteger countForObject_(DartObjectType object) {
    return _lib._objc_msgSend_62(_id, _lib._sel_countForObject_1, object._id);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  void addObject_(DartObjectType object) {
    _lib._objc_msgSend_190(_id, _lib._sel_addObject_1, object._id);
  }

  @override
  void removeObject_(DartObjectType object) {
    _lib._objc_msgSend_190(_id, _lib._sel_removeObject_1, object._id);
  }

  @override
  NSCountedSet? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCountedSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet setWithCapacity_(
      NativeLibrary _lib, DartNSUInteger numItems) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSCountedSet1, _lib._sel_setWithCapacity_1, numItems);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCountedSet initWithObjects_count_(
      ffi.Pointer<ObjectType15> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet set1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCountedSet1, _lib._sel_set1);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet setWithObject_(
      NativeLibrary _lib, DartObjectType17 object) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSCountedSet1, _lib._sel_setWithObject_1, object._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet setWithObjects_count_(NativeLibrary _lib,
      ffi.Pointer<ObjectType17> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(_lib._class_NSCountedSet1,
        _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet setWithObjects_(
      NativeLibrary _lib, DartObjectType17 firstObj) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSCountedSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet setWithSet_(NativeLibrary _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_NSCountedSet1, _lib._sel_setWithSet_1, set._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCountedSet setWithArray_(NativeLibrary _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSCountedSet1, _lib._sel_setWithArray_1, array._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCountedSet initWithObjects_(DartObjectType17 firstObj) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSCountedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCountedSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_257(
        _id, _lib._sel_initWithSet_copyItems_1, set._id, flag);
    return NSCountedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCountedSet new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCountedSet1, _lib._sel_new1);
    return NSCountedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCountedSet allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSCountedSet1, _lib._sel_allocWithZone_1, zone);
    return NSCountedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCountedSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCountedSet1, _lib._sel_alloc1);
    return NSCountedSet._(_ret, _lib, retain: false, release: true);
  }
}

typedef ObjectType19 = ffi.Pointer<ObjCObject>;
typedef DartObjectType19 = NSObject;

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

class NSItemProvider extends NSObject {
  NSItemProvider._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSItemProvider] that points to the same underlying object as [other].
  static NSItemProvider castFrom<T extends _ObjCWrapper>(T other) {
    return NSItemProvider._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSItemProvider] that wraps the given raw object pointer.
  static NSItemProvider castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSItemProvider._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSItemProvider].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSItemProvider1);
  }

  @override
  NSItemProvider init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
      NSString typeIdentifier,
      int visibility,
      ObjCBlock_NSProgress_ffiVoidNSDataNSError loadHandler) {
    _lib._objc_msgSend_259(
        _id,
        _lib._sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1,
        typeIdentifier._id,
        visibility,
        loadHandler._id);
  }

  void
      registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
          NSString typeIdentifier,
          int fileOptions,
          int visibility,
          ObjCBlock_NSProgress_ffiVoidNSURLboolNSError loadHandler) {
    _lib._objc_msgSend_260(
        _id,
        _lib._sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1,
        typeIdentifier._id,
        fileOptions,
        visibility,
        loadHandler._id);
  }

  NSArray get registeredTypeIdentifiers {
    final _ret =
        _lib._objc_msgSend_75(_id, _lib._sel_registeredTypeIdentifiers1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray registeredTypeIdentifiersWithFileOptions_(int fileOptions) {
    final _ret = _lib._objc_msgSend_261(
        _id, _lib._sel_registeredTypeIdentifiersWithFileOptions_1, fileOptions);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool hasItemConformingToTypeIdentifier_(NSString typeIdentifier) {
    return _lib._objc_msgSend_22(
        _id, _lib._sel_hasItemConformingToTypeIdentifier_1, typeIdentifier._id);
  }

  bool hasRepresentationConformingToTypeIdentifier_fileOptions_(
      NSString typeIdentifier, int fileOptions) {
    return _lib._objc_msgSend_262(
        _id,
        _lib._sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1,
        typeIdentifier._id,
        fileOptions);
  }

  NSProgress loadDataRepresentationForTypeIdentifier_completionHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_NSData_NSError completionHandler) {
    final _ret = _lib._objc_msgSend_263(
        _id,
        _lib._sel_loadDataRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress loadFileRepresentationForTypeIdentifier_completionHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_NSURL_NSError completionHandler) {
    final _ret = _lib._objc_msgSend_264(
        _id,
        _lib._sel_loadFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_NSURL_bool_NSError completionHandler) {
    final _ret = _lib._objc_msgSend_265(
        _id,
        _lib._sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSString? get suggestedName {
    final _ret = _lib._objc_msgSend_72(_id, _lib._sel_suggestedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set suggestedName(NSString? value) {
    return _lib._objc_msgSend_266(
        _id, _lib._sel_setSuggestedName_1, value?._id ?? ffi.nullptr);
  }

  NSItemProvider initWithObject_(NSObject object) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObject_1, object._id);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerObject_visibility_(NSObject object, int visibility) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_registerObject_visibility_1, object._id, visibility);
  }

  void registerObjectOfClass_visibility_loadHandler_(
      NSObject aClass,
      int visibility,
      ObjCBlock_NSProgress_ffiVoidObjCObjectNSError loadHandler) {
    _lib._objc_msgSend_268(
        _id,
        _lib._sel_registerObjectOfClass_visibility_loadHandler_1,
        aClass._id,
        visibility,
        loadHandler._id);
  }

  bool canLoadObjectOfClass_(NSObject aClass) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_canLoadObjectOfClass_1, aClass._id);
  }

  NSProgress loadObjectOfClass_completionHandler_(
      NSObject aClass, ObjCBlock_ffiVoid_ObjCObject_NSError completionHandler) {
    final _ret = _lib._objc_msgSend_269(
        _id,
        _lib._sel_loadObjectOfClass_completionHandler_1,
        aClass._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider initWithItem_typeIdentifier_(
      NSObject? item, NSString? typeIdentifier) {
    final _ret = _lib._objc_msgSend_270(
        _id,
        _lib._sel_initWithItem_typeIdentifier_1,
        item?._id ?? ffi.nullptr,
        typeIdentifier?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider? initWithContentsOfURL_(NSURL fileURL) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithContentsOfURL_1, fileURL._id);
    return _ret.address == 0
        ? null
        : NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerItemForTypeIdentifier_loadHandler_(
      NSString typeIdentifier, DartNSItemProviderLoadHandler loadHandler) {
    _lib._objc_msgSend_271(
        _id,
        _lib._sel_registerItemForTypeIdentifier_loadHandler_1,
        typeIdentifier._id,
        loadHandler._id);
  }

  void loadItemForTypeIdentifier_options_completionHandler_(
      NSString typeIdentifier,
      NSDictionary? options,
      DartNSItemProviderCompletionHandler completionHandler) {
    _lib._objc_msgSend_272(
        _id,
        _lib._sel_loadItemForTypeIdentifier_options_completionHandler_1,
        typeIdentifier._id,
        options?._id ?? ffi.nullptr,
        completionHandler._id);
  }

  DartNSItemProviderLoadHandler get previewImageHandler {
    final _ret = _lib._objc_msgSend_273(_id, _lib._sel_previewImageHandler1);
    return ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary
        ._(_ret, _lib, retain: true, release: true);
  }

  set previewImageHandler(DartNSItemProviderLoadHandler value) {
    return _lib._objc_msgSend_274(
        _id, _lib._sel_setPreviewImageHandler_1, value._id);
  }

  void loadPreviewImageWithOptions_completionHandler_(NSDictionary options,
      DartNSItemProviderCompletionHandler completionHandler) {
    _lib._objc_msgSend_275(
        _id,
        _lib._sel_loadPreviewImageWithOptions_completionHandler_1,
        options._id,
        completionHandler._id);
  }

  static NSItemProvider new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSItemProvider1, _lib._sel_new1);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static NSItemProvider allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSItemProvider1, _lib._sel_allocWithZone_1, zone);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static NSItemProvider alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSItemProvider1, _lib._sel_alloc1);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }
}

ffi.Pointer<
    ObjCObject> _ObjCBlock_NSProgress_ffiVoidNSDataNSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(
                    ffi.Pointer<_ObjCBlock> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>)>()(arg0);
final _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistry =
    <int, ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>)>{};
int _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSProgress_ffiVoidNSDataNSError_registerClosure(
        ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>) fn) {
  final id = ++_ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistryIndex;
  _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) =>
        _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistry[
            block.ref.target.address]!(arg0);

class ObjCBlock_NSProgress_ffiVoidNSDataNSError extends _ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidNSDataNSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSDataNSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_NSProgress_ffiVoidNSDataNSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSDataNSError.fromFunction(NativeLibrary lib,
      NSProgress? Function(ObjCBlock_ffiVoid_NSData_NSError) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureTrampoline)
                    .cast(),
                _ObjCBlock_NSProgress_ffiVoidNSDataNSError_registerClosure((ffi
                        .Pointer<_ObjCBlock>
                        arg0) =>
                    fn(ObjCBlock_ffiVoid_NSData_NSError._(arg0, lib, retain: true, release: true))
                        ?._retainAndReturnId() ??
                    ffi.nullptr)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_NSData_NSError arg0) => _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<_ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>()
              (_id, arg0._id)
              .address ==
          0
      ? null
      : NSProgress._(
          _id.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>()(_id, arg0._id),
          _lib,
          retain: false,
          release: true);
}

class NSProgress extends _ObjCWrapper {
  NSProgress._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSProgress] that points to the same underlying object as [other].
  static NSProgress castFrom<T extends _ObjCWrapper>(T other) {
    return NSProgress._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSProgress] that wraps the given raw object pointer.
  static NSProgress castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSProgress._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProgress].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSProgress1);
  }
}

void _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSData_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSData_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSData_NSError_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSData_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_NSData_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSData_NSError extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunction(
      NativeLibrary lib, void Function(NSData?, NSError?) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??=
                    ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                            _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                        .cast(),
                _ObjCBlock_ffiVoid_NSData_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSData._(arg0, lib, retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSError.listener(
      NativeLibrary lib, void Function(NSData?, NSError?) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSData_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSData._(arg0, lib, retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib,
                                retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSData? arg0, NSError? arg1) => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
                  ffi.Pointer<ObjCObject>)>()(
      _id, arg0?._id ?? ffi.nullptr, arg1?._id ?? ffi.nullptr);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_fnPtrTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<ObjCObject> Function(
                        ffi.Pointer<_ObjCBlock> arg0)>>()
            .asFunction<
                ffi.Pointer<ObjCObject> Function(
                    ffi.Pointer<_ObjCBlock>)>()(arg0);
final _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistry =
    <int, ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>)>{};
int _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_registerClosure(
        ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>) fn) {
  final id =
      ++_ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistryIndex;
  _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) =>
        _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistry[
            block.ref.target.address]!(arg0);

class ObjCBlock_NSProgress_ffiVoidNSURLboolNSError extends _ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError.fromFunction(NativeLibrary lib,
      NSProgress? Function(ObjCBlock_ffiVoid_NSURL_bool_NSError) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureTrampoline)
                    .cast(),
                _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_registerClosure(
                    (ffi.Pointer<_ObjCBlock> arg0) =>
                        fn(ObjCBlock_ffiVoid_NSURL_bool_NSError._(arg0, lib, retain: true, release: true))
                            ?._retainAndReturnId() ??
                        ffi.nullptr)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_NSURL_bool_NSError arg0) => _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<_ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>()
              (_id, arg0._id)
              .address ==
          0
      ? null
      : NSProgress._(
          _id.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>()(_id, arg0._id),
          _lib,
          retain: false,
          release: true);
}

void _ObjCBlock_ffiVoid_NSURL_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Bool arg1,
                    ffi.Pointer<ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>, bool,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistry = <int,
    void Function(ffi.Pointer<ObjCObject>, bool, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURL_bool_NSError_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, bool, ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURL_bool_NSError extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_bool_NSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Bool arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Bool,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURL_bool_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.fromFunction(NativeLibrary lib, void Function(NSURL?, bool, NSError?) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Bool,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_NSURL_bool_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) => fn(
                        arg0.address == 0 ? null : NSURL._(arg0, lib, retain: true, release: true),
                        arg1,
                        arg2.address == 0 ? null : NSError._(arg2, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.listener(
      NativeLibrary lib, void Function(NSURL?, bool, NSError?) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Bool, ffi.Pointer<ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSURL_bool_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) => fn(
                        arg0.address == 0
                            ? null
                            : NSURL._(arg0, lib, retain: true, release: true),
                        arg1,
                        arg2.address == 0
                            ? null
                            : NSError._(arg2, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Bool, ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, bool arg1, NSError? arg2) => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Bool arg1,
                      ffi.Pointer<ObjCObject> arg2)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
                  bool, ffi.Pointer<ObjCObject>)>()(
      _id, arg0?._id ?? ffi.nullptr, arg1, arg2?._id ?? ffi.nullptr);
}

void _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSURL_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_NSURL_NSError extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunction(
      NativeLibrary lib, void Function(NSURL?, NSError?) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??=
                    ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                            _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                        .cast(),
                _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSURL._(arg0, lib, retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSError.listener(
      NativeLibrary lib, void Function(NSURL?, NSError?) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSURL._(arg0, lib, retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, NSError? arg1) => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
                  ffi.Pointer<ObjCObject>)>()(
      _id, arg0?._id ?? ffi.nullptr, arg1?._id ?? ffi.nullptr);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_fnPtrTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<ObjCObject> Function(
                        ffi.Pointer<_ObjCBlock> arg0)>>()
            .asFunction<
                ffi.Pointer<ObjCObject> Function(
                    ffi.Pointer<_ObjCBlock>)>()(arg0);
final _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureRegistry =
    <int, ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>)>{};
int _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_registerClosure(
        ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>) fn) {
  final id =
      ++_ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureRegistryIndex;
  _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureTrampoline(
            ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) =>
        _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureRegistry[
            block.ref.target.address]!(arg0);

class ObjCBlock_NSProgress_ffiVoidObjCObjectNSError extends _ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidObjCObjectNSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidObjCObjectNSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidObjCObjectNSError.fromFunction(NativeLibrary lib,
      NSProgress? Function(ObjCBlock_ffiVoid_ObjCObject_NSError) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<_ObjCBlock>)>(
                        _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_closureTrampoline)
                    .cast(),
                _ObjCBlock_NSProgress_ffiVoidObjCObjectNSError_registerClosure(
                    (ffi.Pointer<_ObjCBlock> arg0) =>
                        fn(ObjCBlock_ffiVoid_ObjCObject_NSError._(arg0, lib, retain: true, release: true))
                            ?._retainAndReturnId() ??
                        ffi.nullptr)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_ObjCObject_NSError arg0) => _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<ObjCObject> Function(
                          ffi.Pointer<_ObjCBlock> block,
                          ffi.Pointer<_ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>()
              (_id, arg0._id)
              .address ==
          0
      ? null
      : NSProgress._(
          _id.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<_ObjCBlock>)>()(_id, arg0._id),
          _lib,
          retain: false,
          release: true);
}

void _ObjCBlock_ffiVoid_ObjCObject_NSError_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_ObjCObject_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_ObjCObject_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ObjCObject_NSError_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_ObjCObject_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ObjCObject_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ObjCObject_NSError_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_ObjCObject_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ObjCObject_NSError extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ObjCObject_NSError._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject_NSError.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject_NSError.fromFunction(
      NativeLibrary lib, void Function(NSObject?, NSError?) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_NSError_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0 ? null : NSObject._(arg0, lib, retain: true, release: true),
                        arg1.address == 0 ? null : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ObjCObject_NSError.listener(
      NativeLibrary lib, void Function(NSObject?, NSError?) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??=
                        ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>.listener(
                            _ObjCBlock_ffiVoid_ObjCObject_NSError_closureTrampoline)
                          ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_NSError_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSObject._(arg0, lib,
                                retain: true, release: true),
                        arg1.address == 0
                            ? null
                            : NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSObject? arg0, NSError? arg1) => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
                  ffi.Pointer<ObjCObject>)>()(
      _id, arg0?._id ?? ffi.nullptr, arg1?._id ?? ffi.nullptr);
}

typedef NSItemProviderLoadHandler = ffi.Pointer<_ObjCBlock>;
typedef DartNSItemProviderLoadHandler
    = ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary;
void
    _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_fnPtrTrampoline(
            ffi.Pointer<_ObjCBlock> block,
            NSItemProviderCompletionHandler arg0,
            ffi.Pointer<ObjCObject> arg1,
            ffi.Pointer<ObjCObject> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        NSItemProviderCompletionHandler arg0,
                        ffi.Pointer<ObjCObject> arg1,
                        ffi.Pointer<ObjCObject> arg2)>>()
            .asFunction<
                void Function(
                    NSItemProviderCompletionHandler,
                    ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureRegistry =
    <int,
        void Function(NSItemProviderCompletionHandler, ffi.Pointer<ObjCObject>,
            ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_registerClosure(
        void Function(NSItemProviderCompletionHandler, ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureRegistry[
      id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        NSItemProviderCompletionHandler arg0,
        ffi.Pointer<ObjCObject> arg1,
        ffi.Pointer<ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary
    extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSItemProviderCompletionHandler arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                NSItemProviderCompletionHandler,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary.fromFunction(
      NativeLibrary lib,
      void Function(DartNSItemProviderCompletionHandler, NSObject, NSDictionary)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??=
                    ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<_ObjCBlock>, NSItemProviderCompletionHandler, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                            _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureTrampoline)
                        .cast(),
                _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_registerClosure(
                    (NSItemProviderCompletionHandler arg0, ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ObjCObject> arg2) => fn(
                        ObjCBlock_ffiVoid_ObjCObject_NSError1._(arg0, lib, retain: true, release: true),
                        NSObject._(arg1, lib, retain: true, release: true),
                        NSDictionary._(arg2, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary.listener(
      NativeLibrary lib,
      void Function(DartNSItemProviderCompletionHandler, NSObject, NSDictionary)
          fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, NSItemProviderCompletionHandler, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_NSItemProviderCompletionHandler_ObjCObject_NSDictionary_registerClosure(
                    (NSItemProviderCompletionHandler arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2) =>
                        fn(
                            ObjCBlock_ffiVoid_ObjCObject_NSError1._(arg0, lib, retain: true, release: true),
                            NSObject._(arg1, lib, retain: true, release: true),
                            NSDictionary._(arg2, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<_ObjCBlock>,
          NSItemProviderCompletionHandler,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(DartNSItemProviderCompletionHandler arg0, NSObject arg1,
          NSDictionary arg2) =>
      _id.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<_ObjCBlock> block,
                          NSItemProviderCompletionHandler arg0,
                          ffi.Pointer<ObjCObject> arg1,
                          ffi.Pointer<ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<_ObjCBlock>,
                      NSItemProviderCompletionHandler,
                      ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>)>()(
          _id, arg0._id, arg1._id, arg2._id);
}

typedef NSItemProviderCompletionHandler = ffi.Pointer<_ObjCBlock>;
typedef DartNSItemProviderCompletionHandler
    = ObjCBlock_ffiVoid_ObjCObject_NSError1;
void _ObjCBlock_ffiVoid_ObjCObject_NSError1_fnPtrTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ObjCObject>,
                ffi.Pointer<ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureRegistry =
    <int, void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>{};
int _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ObjCObject_NSError1_registerClosure(
    void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_ObjCObject_NSError1_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureTrampoline(
        ffi.Pointer<_ObjCBlock> block,
        ffi.Pointer<ObjCObject> arg0,
        ffi.Pointer<ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ObjCObject_NSError1 extends _ObjCBlockBase {
  ObjCBlock_ffiVoid_ObjCObject_NSError1._(
      ffi.Pointer<_ObjCBlock> id, NativeLibrary lib,
      {bool retain = false, bool release = true})
      : super._(id, lib, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject_NSError1.fromFunctionPointer(
      NativeLibrary lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>,
                                ffi.Pointer<ObjCObject>,
                                ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_NSError1_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ObjCObject_NSError1.fromFunction(
      NativeLibrary lib, void Function(NSObject?, NSError) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>(
                        _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureTrampoline)
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_NSError1_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0 ? null : NSObject._(arg0, lib, retain: true, release: true),
                        NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ObjCObject_NSError1.listener(
      NativeLibrary lib, void Function(NSObject?, NSError) fn)
      : this._(
            lib._newBlock1(
                (_dartFuncListenerTrampoline ??= ffi
                        .NativeCallable<ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ObjCObject_NSError1_closureTrampoline)
                      ..keepIsolateAlive = false)
                    .nativeFunction
                    .cast(),
                _ObjCBlock_ffiVoid_ObjCObject_NSError1_registerClosure(
                    (ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) => fn(
                        arg0.address == 0
                            ? null
                            : NSObject._(arg0, lib, retain: true, release: true),
                        NSError._(arg1, lib, retain: true, release: true)))),
            lib);
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSObject? arg0, NSError arg1) => _id.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> block,
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<_ObjCBlock>, ffi.Pointer<ObjCObject>,
                  ffi.Pointer<ObjCObject>)>()(
      _id, arg0?._id ?? ffi.nullptr, arg1._id);
}

abstract class NSItemProviderErrorCode {
  static const int NSItemProviderUnknownError = -1;
  static const int NSItemProviderItemUnavailableError = -1000;
  static const int NSItemProviderUnexpectedValueClassError = -1100;
  static const int NSItemProviderUnavailableCoercionError = -1200;
}

typedef NSStringEncodingDetectionOptionsKey = ffi.Pointer<ObjCObject>;
typedef DartNSStringEncodingDetectionOptionsKey = NSString;

class NSMutableString extends NSString {
  NSMutableString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableString] that points to the same underlying object as [other].
  static NSMutableString castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableString] that wraps the given raw object pointer.
  static NSMutableString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableString1);
  }

  void replaceCharactersInRange_withString_(NSRange range, NSString aString) {
    _lib._objc_msgSend_276(_id, _lib._sel_replaceCharactersInRange_withString_1,
        range, aString._id);
  }

  void insertString_atIndex_(NSString aString, DartNSUInteger loc) {
    _lib._objc_msgSend_277(
        _id, _lib._sel_insertString_atIndex_1, aString._id, loc);
  }

  void deleteCharactersInRange_(NSRange range) {
    _lib._objc_msgSend_225(_id, _lib._sel_deleteCharactersInRange_1, range);
  }

  void appendString_(NSString aString) {
    _lib._objc_msgSend_278(_id, _lib._sel_appendString_1, aString._id);
  }

  void appendFormat_(NSString format) {
    _lib._objc_msgSend_278(_id, _lib._sel_appendFormat_1, format._id);
  }

  void setString_(NSString aString) {
    _lib._objc_msgSend_278(_id, _lib._sel_setString_1, aString._id);
  }

  DartNSUInteger replaceOccurrencesOfString_withString_options_range_(
      NSString target, NSString replacement, int options, NSRange searchRange) {
    return _lib._objc_msgSend_279(
        _id,
        _lib._sel_replaceOccurrencesOfString_withString_options_range_1,
        target._id,
        replacement._id,
        options,
        searchRange);
  }

  bool applyTransform_reverse_range_updatedRange_(
      DartNSStringTransform transform,
      bool reverse,
      NSRange range,
      NSRangePointer resultingRange) {
    return _lib._objc_msgSend_280(
        _id,
        _lib._sel_applyTransform_reverse_range_updatedRange_1,
        transform._id,
        reverse,
        range,
        resultingRange);
  }

  NSMutableString initWithCapacity_(DartNSUInteger capacity) {
    final _ret =
        _lib._objc_msgSend_281(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCapacity_(
      NativeLibrary _lib, DartNSUInteger capacity) {
    final _ret = _lib._objc_msgSend_281(
        _lib._class_NSMutableString1, _lib._sel_stringWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      NativeLibrary _lib) {
    return _lib._objc_msgSend_53(
        _lib._class_NSMutableString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding_(
      NativeLibrary _lib, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_15(_lib._class_NSMutableString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger getDefaultCStringEncoding(NativeLibrary _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSMutableString1, _lib._sel_defaultCStringEncoding1);
  }

  @override
  NSMutableString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, DartNSUInteger length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_142(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars,
      DartNSUInteger len,
      ObjCBlock_ffiVoid_unichar_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_143(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithString_(NSString aString) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithString_1, aString._id);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_(NSString format) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithFormat_1, format._id);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_arguments_(NSString format, va_list argList) {
    final _ret = _lib._objc_msgSend_147(
        _id, _lib._sel_initWithFormat_arguments_1, format._id, argList);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_locale_(NSString format, NSObject? locale) {
    final _ret = _lib._objc_msgSend_148(_id, _lib._sel_initWithFormat_locale_1,
        format._id, locale?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_locale_arguments_(
      NSString format, NSObject? locale, va_list argList) {
    final _ret = _lib._objc_msgSend_149(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format._id,
        locale?._id ?? ffi.nullptr,
        argList);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString format,
      NSString validFormatSpecifiers,
      NSObject? locale,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_151(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString?
      initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_152(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          NSObject? locale,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_153(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithData_encoding_(
      NSData data, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_154(
        _id, _lib._sel_initWithData_encoding_1, data._id, encoding);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithBytes_length_encoding_(ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_155(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      bool freeBuffer) {
    final _ret = _lib._objc_msgSend_156(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      ObjCBlock_ffiVoid_ffiVoid_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_157(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString string(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_string1);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithString_(
      NativeLibrary _lib, NSString string) {
    final _ret = _lib._objc_msgSend_146(
        _lib._class_NSMutableString1, _lib._sel_stringWithString_1, string._id);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCharacters_length_(NativeLibrary _lib,
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(_lib._class_NSMutableString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithUTF8String_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(_lib._class_NSMutableString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(
        _lib._class_NSMutableString1, _lib._sel_stringWithFormat_1, format._id);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString localizedStringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(_lib._class_NSMutableString1,
        _lib._sel_localizedStringWithFormat_1, format._id);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString?
      stringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSMutableString1,
        _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_158(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithCString_encoding_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> cString, DartNSUInteger enc) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfURL_encoding_error_(NSURL url,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(_id,
        _lib._sel_initWithContentsOfURL_encoding_error_1, url._id, enc, error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfFile_encoding_error_(NSString path,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfURL_encoding_error_(
      NativeLibrary _lib,
      NSURL url,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfFile_encoding_error_(
      NativeLibrary _lib,
      NSString path,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfURL_usedEncoding_error_(
      NativeLibrary _lib,
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfFile_usedEncoding_error_(
      NativeLibrary _lib,
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NativeLibrary _lib,
          NSData data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_180(
        _lib._class_NSMutableString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data._id,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject? stringWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_185(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfURL_(NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_186(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_length_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_145(
        _lib._class_NSMutableString1, _lib._sel_stringWithCString_1, bytes);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_new1);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSMutableString1, _lib._sel_allocWithZone_1, zone);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_alloc1);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }
}

typedef NSExceptionName = ffi.Pointer<ObjCObject>;
typedef DartNSExceptionName = NSString;

class NSSimpleCString extends NSString {
  NSSimpleCString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSSimpleCString] that points to the same underlying object as [other].
  static NSSimpleCString castFrom<T extends _ObjCWrapper>(T other) {
    return NSSimpleCString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSSimpleCString] that wraps the given raw object pointer.
  static NSSimpleCString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSSimpleCString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSSimpleCString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSSimpleCString1);
  }

  @override
  NSSimpleCString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      NativeLibrary _lib) {
    return _lib._objc_msgSend_53(
        _lib._class_NSSimpleCString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding_(
      NativeLibrary _lib, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_15(_lib._class_NSSimpleCString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger getDefaultCStringEncoding(NativeLibrary _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSSimpleCString1, _lib._sel_defaultCStringEncoding1);
  }

  @override
  NSSimpleCString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, DartNSUInteger length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_142(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSSimpleCString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars,
      DartNSUInteger len,
      ObjCBlock_ffiVoid_unichar_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_143(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator?._id ?? ffi.nullptr);
    return NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSSimpleCString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString initWithString_(NSString aString) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithString_1, aString._id);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString initWithFormat_(NSString format) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithFormat_1, format._id);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString initWithFormat_arguments_(NSString format, va_list argList) {
    final _ret = _lib._objc_msgSend_147(
        _id, _lib._sel_initWithFormat_arguments_1, format._id, argList);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString initWithFormat_locale_(NSString format, NSObject? locale) {
    final _ret = _lib._objc_msgSend_148(_id, _lib._sel_initWithFormat_locale_1,
        format._id, locale?._id ?? ffi.nullptr);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString initWithFormat_locale_arguments_(
      NSString format, NSObject? locale, va_list argList) {
    final _ret = _lib._objc_msgSend_149(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format._id,
        locale?._id ?? ffi.nullptr,
        argList);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString format,
      NSString validFormatSpecifiers,
      NSObject? locale,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_151(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString?
      initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_152(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          NSObject? locale,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_153(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithData_encoding_(
      NSData data, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_154(
        _id, _lib._sel_initWithData_encoding_1, data._id, encoding);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithBytes_length_encoding_(ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_155(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      bool freeBuffer) {
    final _ret = _lib._objc_msgSend_156(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSSimpleCString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      ObjCBlock_ffiVoid_ffiVoid_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_157(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }

  static NSSimpleCString string(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSSimpleCString1, _lib._sel_string1);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString stringWithString_(
      NativeLibrary _lib, NSString string) {
    final _ret = _lib._objc_msgSend_146(
        _lib._class_NSSimpleCString1, _lib._sel_stringWithString_1, string._id);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString stringWithCharacters_length_(NativeLibrary _lib,
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString? stringWithUTF8String_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString stringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(
        _lib._class_NSSimpleCString1, _lib._sel_stringWithFormat_1, format._id);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString localizedStringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(_lib._class_NSSimpleCString1,
        _lib._sel_localizedStringWithFormat_1, format._id);
    return NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString?
      stringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSSimpleCString1,
        _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_158(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString? stringWithCString_encoding_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> cString, DartNSUInteger enc) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithContentsOfURL_encoding_error_(NSURL url,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(_id,
        _lib._sel_initWithContentsOfURL_encoding_error_1, url._id, enc, error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithContentsOfFile_encoding_error_(NSString path,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString? stringWithContentsOfURL_encoding_error_(
      NativeLibrary _lib,
      NSURL url,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString? stringWithContentsOfFile_encoding_error_(
      NativeLibrary _lib,
      NSString path,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSimpleCString? initWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString? stringWithContentsOfURL_usedEncoding_error_(
      NativeLibrary _lib,
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString? stringWithContentsOfFile_usedEncoding_error_(
      NativeLibrary _lib,
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSSimpleCString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NativeLibrary _lib,
          NSData data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_180(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data._id,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject? stringWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_185(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfURL_(NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_186(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_length_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_145(
        _lib._class_NSSimpleCString1, _lib._sel_stringWithCString_1, bytes);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSSimpleCString new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSSimpleCString1, _lib._sel_new1);
    return NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }

  static NSSimpleCString allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSSimpleCString1, _lib._sel_allocWithZone_1, zone);
    return NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }

  static NSSimpleCString alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSSimpleCString1, _lib._sel_alloc1);
    return NSSimpleCString._(_ret, _lib, retain: false, release: true);
  }
}

class NSConstantString extends NSSimpleCString {
  NSConstantString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSConstantString] that points to the same underlying object as [other].
  static NSConstantString castFrom<T extends _ObjCWrapper>(T other) {
    return NSConstantString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSConstantString] that wraps the given raw object pointer.
  static NSConstantString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSConstantString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSConstantString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSConstantString1);
  }

  @override
  NSConstantString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      NativeLibrary _lib) {
    return _lib._objc_msgSend_53(
        _lib._class_NSConstantString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding_(
      NativeLibrary _lib, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_15(_lib._class_NSConstantString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger getDefaultCStringEncoding(NativeLibrary _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSConstantString1, _lib._sel_defaultCStringEncoding1);
  }

  @override
  NSConstantString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, DartNSUInteger length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_142(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSConstantString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSConstantString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars,
      DartNSUInteger len,
      ObjCBlock_ffiVoid_unichar_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_143(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator?._id ?? ffi.nullptr);
    return NSConstantString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSConstantString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString initWithString_(NSString aString) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithString_1, aString._id);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString initWithFormat_(NSString format) {
    final _ret =
        _lib._objc_msgSend_146(_id, _lib._sel_initWithFormat_1, format._id);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString initWithFormat_arguments_(NSString format, va_list argList) {
    final _ret = _lib._objc_msgSend_147(
        _id, _lib._sel_initWithFormat_arguments_1, format._id, argList);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString initWithFormat_locale_(NSString format, NSObject? locale) {
    final _ret = _lib._objc_msgSend_148(_id, _lib._sel_initWithFormat_locale_1,
        format._id, locale?._id ?? ffi.nullptr);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString initWithFormat_locale_arguments_(
      NSString format, NSObject? locale, va_list argList) {
    final _ret = _lib._objc_msgSend_149(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format._id,
        locale?._id ?? ffi.nullptr,
        argList);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString format,
      NSString validFormatSpecifiers,
      NSObject? locale,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_151(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString?
      initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_152(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          NSObject? locale,
          va_list argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_153(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
        format._id,
        validFormatSpecifiers._id,
        locale?._id ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithData_encoding_(
      NSData data, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_154(
        _id, _lib._sel_initWithData_encoding_1, data._id, encoding);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithBytes_length_encoding_(ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_155(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      bool freeBuffer) {
    final _ret = _lib._objc_msgSend_156(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSConstantString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      DartNSUInteger len,
      DartNSUInteger encoding,
      ObjCBlock_ffiVoid_ffiVoid_NSUInteger? deallocator) {
    final _ret = _lib._objc_msgSend_157(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator?._id ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: false, release: true);
  }

  static NSConstantString string(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSConstantString1, _lib._sel_string1);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString stringWithString_(
      NativeLibrary _lib, NSString string) {
    final _ret = _lib._objc_msgSend_146(_lib._class_NSConstantString1,
        _lib._sel_stringWithString_1, string._id);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString stringWithCharacters_length_(NativeLibrary _lib,
      ffi.Pointer<unichar> characters, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_144(_lib._class_NSConstantString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString? stringWithUTF8String_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_145(_lib._class_NSConstantString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString stringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(_lib._class_NSConstantString1,
        _lib._sel_stringWithFormat_1, format._id);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString localizedStringWithFormat_(
      NativeLibrary _lib, NSString format) {
    final _ret = _lib._objc_msgSend_146(_lib._class_NSConstantString1,
        _lib._sel_localizedStringWithFormat_1, format._id);
    return NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString?
      stringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeLibrary _lib,
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_150(
        _lib._class_NSConstantString1,
        _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
        format._id,
        validFormatSpecifiers._id,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, DartNSUInteger encoding) {
    final _ret = _lib._objc_msgSend_158(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString? stringWithCString_encoding_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> cString, DartNSUInteger enc) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSConstantString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithContentsOfURL_encoding_error_(NSURL url,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(_id,
        _lib._sel_initWithContentsOfURL_encoding_error_1, url._id, enc, error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithContentsOfFile_encoding_error_(NSString path,
      DartNSUInteger enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString? stringWithContentsOfURL_encoding_error_(
      NativeLibrary _lib,
      NSURL url,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_159(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString? stringWithContentsOfFile_encoding_error_(
      NativeLibrary _lib,
      NSString path,
      DartNSUInteger enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_160(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSConstantString? initWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString? stringWithContentsOfURL_usedEncoding_error_(
      NativeLibrary _lib,
      NSURL url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_161(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString? stringWithContentsOfFile_usedEncoding_error_(
      NativeLibrary _lib,
      NSString path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_162(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path._id,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSConstantString._(_ret, _lib, retain: true, release: true);
  }

  static DartNSUInteger
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NativeLibrary _lib,
          NSData data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_180(
        _lib._class_NSConstantString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data._id,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject? stringWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_185(_lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfURL_(NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_186(_lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_length_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes, DartNSUInteger length) {
    final _ret = _lib._objc_msgSend_158(_lib._class_NSConstantString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_(
      NativeLibrary _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_145(
        _lib._class_NSConstantString1, _lib._sel_stringWithCString_1, bytes);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSConstantString new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSConstantString1, _lib._sel_new1);
    return NSConstantString._(_ret, _lib, retain: false, release: true);
  }

  static NSConstantString allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSConstantString1, _lib._sel_allocWithZone_1, zone);
    return NSConstantString._(_ret, _lib, retain: false, release: true);
  }

  static NSConstantString alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSConstantString1, _lib._sel_alloc1);
    return NSConstantString._(_ret, _lib, retain: false, release: true);
  }
}

class SharedBase extends NSObject {
  SharedBase._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedBase] that points to the same underlying object as [other].
  static SharedBase castFrom<T extends _ObjCWrapper>(T other) {
    return SharedBase._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedBase] that wraps the given raw object pointer.
  static SharedBase castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedBase._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedBase].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedBase1);
  }

  @override
  SharedBase init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedBase._(_ret, _lib, retain: true, release: true);
  }

  static SharedBase new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedBase1, _lib._sel_new1);
    return SharedBase._(_ret, _lib, retain: false, release: true);
  }

  static void initialize(NativeLibrary _lib) {
    _lib._objc_msgSend_1(_lib._class_SharedBase1, _lib._sel_initialize1);
  }

  static SharedBase allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedBase1, _lib._sel_allocWithZone_1, zone);
    return SharedBase._(_ret, _lib, retain: false, release: true);
  }

  static SharedBase alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedBase1, _lib._sel_alloc1);
    return SharedBase._(_ret, _lib, retain: false, release: true);
  }
}

class SharedMutableSet extends NSMutableSet {
  SharedMutableSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedMutableSet] that points to the same underlying object as [other].
  static SharedMutableSet castFrom<T extends _ObjCWrapper>(T other) {
    return SharedMutableSet._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [SharedMutableSet] that wraps the given raw object pointer.
  static SharedMutableSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedMutableSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedMutableSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_SharedMutableSet1);
  }

  @override
  SharedMutableSet? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableSet initWithCapacity_(DartNSUInteger numItems) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithCapacity_1, numItems);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet setWithCapacity_(
      NativeLibrary _lib, DartNSUInteger numItems) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedMutableSet1, _lib._sel_setWithCapacity_1, numItems);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableSet initWithObjects_count_(
      ffi.Pointer<ObjectType15> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet set1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedMutableSet1, _lib._sel_set1);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet setWithObject_(
      NativeLibrary _lib, DartObjectType17 object) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_SharedMutableSet1, _lib._sel_setWithObject_1, object._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet setWithObjects_count_(NativeLibrary _lib,
      ffi.Pointer<ObjectType17> objects, DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_55(_lib._class_SharedMutableSet1,
        _lib._sel_setWithObjects_count_1, objects, cnt);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet setWithObjects_(
      NativeLibrary _lib, DartObjectType17 firstObj) {
    final _ret = _lib._objc_msgSend_111(_lib._class_SharedMutableSet1,
        _lib._sel_setWithObjects_1, firstObj._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet setWithSet_(NativeLibrary _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_SharedMutableSet1, _lib._sel_setWithSet_1, set._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet setWithArray_(NativeLibrary _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_SharedMutableSet1, _lib._sel_setWithArray_1, array._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableSet initWithObjects_(DartObjectType17 firstObj) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_256(_id, _lib._sel_initWithSet_1, set._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_257(
        _id, _lib._sel_initWithSet_copyItems_1, set._id, flag);
    return SharedMutableSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  SharedMutableSet initWithArray_(NSArray array) {
    final _ret =
        _lib._objc_msgSend_60(_id, _lib._sel_initWithArray_1, array._id);
    return SharedMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableSet new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedMutableSet1, _lib._sel_new1);
    return SharedMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static SharedMutableSet allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedMutableSet1, _lib._sel_allocWithZone_1, zone);
    return SharedMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static SharedMutableSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedMutableSet1, _lib._sel_alloc1);
    return SharedMutableSet._(_ret, _lib, retain: false, release: true);
  }
}

class SharedMutableDictionary extends NSMutableDictionary {
  SharedMutableDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedMutableDictionary] that points to the same underlying object as [other].
  static SharedMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return SharedMutableDictionary._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [SharedMutableDictionary] that wraps the given raw object pointer.
  static SharedMutableDictionary castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedMutableDictionary._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedMutableDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_SharedMutableDictionary1);
  }

  @override
  SharedMutableDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableDictionary initWithCapacity_(DartNSUInteger numItems) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithCapacity_1, numItems);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionaryWithCapacity_(
      NativeLibrary _lib, DartNSUInteger numItems) {
    final _ret = _lib._objc_msgSend_54(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary? dictionaryWithContentsOfFile_(
      NativeLibrary _lib, NSString path) {
    final _ret = _lib._objc_msgSend_245(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary? dictionaryWithContentsOfURL_(
      NativeLibrary _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_246(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url._id);
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithSharedKeySet_(
      NativeLibrary _lib, NSObject keyset) {
    final _ret = _lib._objc_msgSend_247(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithSharedKeySet_1, keyset._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ObjectType7> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_163(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionary(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_SharedMutableDictionary1, _lib._sel_dictionary1);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionaryWithObject_forKey_(
      NativeLibrary _lib, DartObjectType10 object, NSObject key) {
    final _ret = _lib._objc_msgSend_174(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionaryWithObjects_forKeys_count_(
      NativeLibrary _lib,
      ffi.Pointer<ObjectType10> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      DartNSUInteger cnt) {
    final _ret = _lib._objc_msgSend_163(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionaryWithObjectsAndKeys_(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_111(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionaryWithDictionary_(
      NativeLibrary _lib, NSDictionary dict) {
    final _ret = _lib._objc_msgSend_175(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary dictionaryWithObjects_forKeys_(
      NativeLibrary _lib, NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_176(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1, objects._id, keys._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_111(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _lib._objc_msgSend_175(
        _id, _lib._sel_initWithDictionary_1, otherDictionary._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedMutableDictionary initWithDictionary_copyItems_(
      NSDictionary otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_177(_id,
        _lib._sel_initWithDictionary_copyItems_1, otherDictionary._id, flag);
    return SharedMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  @override
  SharedMutableDictionary initWithObjects_forKeys_(
      NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_176(
        _id, _lib._sel_initWithObjects_forKeys_1, objects._id, keys._id);
    return SharedMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(NativeLibrary _lib,
      NSURL url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_178(_lib._class_SharedMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1, url._id, error);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(NativeLibrary _lib, NSArray keys) {
    final _ret = _lib._objc_msgSend_60(_lib._class_SharedMutableDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static SharedMutableDictionary new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_SharedMutableDictionary1, _lib._sel_new1);
    return SharedMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static SharedMutableDictionary allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedMutableDictionary1, _lib._sel_allocWithZone_1, zone);
    return SharedMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static SharedMutableDictionary alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_SharedMutableDictionary1, _lib._sel_alloc1);
    return SharedMutableDictionary._(_ret, _lib, retain: false, release: true);
  }
}

class SharedNumber extends NSNumber {
  SharedNumber._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedNumber] that points to the same underlying object as [other].
  static SharedNumber castFrom<T extends _ObjCWrapper>(T other) {
    return SharedNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedNumber] that wraps the given raw object pointer.
  static SharedNumber castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedNumber1);
  }

  SharedNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  SharedNumber initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedNumber1, _lib._sel_numberWithChar_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedNumber1, _lib._sel_numberWithShort_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedNumber1, _lib._sel_numberWithInt_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedNumber1, _lib._sel_numberWithLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedNumber1, _lib._sel_numberWithLongLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedNumber1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedNumber1, _lib._sel_numberWithFloat_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedNumber1, _lib._sel_numberWithDouble_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedNumber1, _lib._sel_numberWithBool_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedNumber1, _lib._sel_numberWithInteger_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(_lib._class_SharedNumber1,
        _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedNumber? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedNumber initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedNumber1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedNumber1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedNumber1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedNumber1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedNumber1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedNumber init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedNumber._(_ret, _lib, retain: true, release: true);
  }

  static SharedNumber new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedNumber1, _lib._sel_new1);
    return SharedNumber._(_ret, _lib, retain: false, release: true);
  }

  static SharedNumber allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedNumber1, _lib._sel_allocWithZone_1, zone);
    return SharedNumber._(_ret, _lib, retain: false, release: true);
  }

  static SharedNumber alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedNumber1, _lib._sel_alloc1);
    return SharedNumber._(_ret, _lib, retain: false, release: true);
  }
}

class SharedByte extends SharedNumber {
  SharedByte._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedByte] that points to the same underlying object as [other].
  static SharedByte castFrom<T extends _ObjCWrapper>(T other) {
    return SharedByte._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedByte] that wraps the given raw object pointer.
  static SharedByte castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedByte._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedByte].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedByte1);
  }

  @override
  SharedByte initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedByte1, _lib._sel_numberWithChar_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedByte1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedByte1, _lib._sel_numberWithShort_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedByte1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedByte1, _lib._sel_numberWithInt_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedByte1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedByte1, _lib._sel_numberWithLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedByte1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedByte1, _lib._sel_numberWithLongLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithUnsignedLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(
        _lib._class_SharedByte1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedByte1, _lib._sel_numberWithFloat_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedByte1, _lib._sel_numberWithDouble_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedByte1, _lib._sel_numberWithBool_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedByte1, _lib._sel_numberWithInteger_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedByte1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedByte1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedByte1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedByte1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedByte1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedByte1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedByte init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedByte new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedByte1, _lib._sel_new1);
    return SharedByte._(_ret, _lib, retain: false, release: true);
  }

  static SharedByte allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedByte1, _lib._sel_allocWithZone_1, zone);
    return SharedByte._(_ret, _lib, retain: false, release: true);
  }

  static SharedByte alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedByte1, _lib._sel_alloc1);
    return SharedByte._(_ret, _lib, retain: false, release: true);
  }
}

class SharedUByte extends SharedNumber {
  SharedUByte._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedUByte] that points to the same underlying object as [other].
  static SharedUByte castFrom<T extends _ObjCWrapper>(T other) {
    return SharedUByte._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedUByte] that wraps the given raw object pointer.
  static SharedUByte castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedUByte._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedUByte].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedUByte1);
  }

  @override
  SharedUByte initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedUByte1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedUByte1, _lib._sel_numberWithChar_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedUByte1, _lib._sel_numberWithShort_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedUByte1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedUByte1, _lib._sel_numberWithInt_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedUByte1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedUByte1, _lib._sel_numberWithLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedUByte1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedUByte1, _lib._sel_numberWithLongLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedUByte1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedUByte1, _lib._sel_numberWithFloat_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedUByte1, _lib._sel_numberWithDouble_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedUByte1, _lib._sel_numberWithBool_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedUByte1, _lib._sel_numberWithInteger_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedUByte1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedUByte1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedUByte1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedUByte1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedUByte1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedUByte1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUByte init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedUByte._(_ret, _lib, retain: true, release: true);
  }

  static SharedUByte new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedUByte1, _lib._sel_new1);
    return SharedUByte._(_ret, _lib, retain: false, release: true);
  }

  static SharedUByte allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedUByte1, _lib._sel_allocWithZone_1, zone);
    return SharedUByte._(_ret, _lib, retain: false, release: true);
  }

  static SharedUByte alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedUByte1, _lib._sel_alloc1);
    return SharedUByte._(_ret, _lib, retain: false, release: true);
  }
}

class SharedShort extends SharedNumber {
  SharedShort._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedShort] that points to the same underlying object as [other].
  static SharedShort castFrom<T extends _ObjCWrapper>(T other) {
    return SharedShort._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedShort] that wraps the given raw object pointer.
  static SharedShort castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedShort._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedShort].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedShort1);
  }

  @override
  SharedShort initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedShort1, _lib._sel_numberWithShort_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedShort1, _lib._sel_numberWithChar_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedShort1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedShort1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedShort1, _lib._sel_numberWithInt_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedShort1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedShort1, _lib._sel_numberWithLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedShort1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedShort1, _lib._sel_numberWithLongLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedShort1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedShort1, _lib._sel_numberWithFloat_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedShort1, _lib._sel_numberWithDouble_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedShort1, _lib._sel_numberWithBool_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedShort1, _lib._sel_numberWithInteger_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedShort1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedShort1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedShort1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedShort1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedShort1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedShort1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedShort init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedShort new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedShort1, _lib._sel_new1);
    return SharedShort._(_ret, _lib, retain: false, release: true);
  }

  static SharedShort allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedShort1, _lib._sel_allocWithZone_1, zone);
    return SharedShort._(_ret, _lib, retain: false, release: true);
  }

  static SharedShort alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedShort1, _lib._sel_alloc1);
    return SharedShort._(_ret, _lib, retain: false, release: true);
  }
}

class SharedUShort extends SharedNumber {
  SharedUShort._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedUShort] that points to the same underlying object as [other].
  static SharedUShort castFrom<T extends _ObjCWrapper>(T other) {
    return SharedUShort._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedUShort] that wraps the given raw object pointer.
  static SharedUShort castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedUShort._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedUShort].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedUShort1);
  }

  @override
  SharedUShort initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedUShort1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedUShort1, _lib._sel_numberWithChar_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedUShort1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedUShort1, _lib._sel_numberWithShort_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedUShort1, _lib._sel_numberWithInt_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedUShort1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedUShort1, _lib._sel_numberWithLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedUShort1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedUShort1, _lib._sel_numberWithLongLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedUShort1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedUShort1, _lib._sel_numberWithFloat_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedUShort1, _lib._sel_numberWithDouble_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedUShort1, _lib._sel_numberWithBool_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedUShort1, _lib._sel_numberWithInteger_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(_lib._class_SharedUShort1,
        _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedUShort1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedUShort1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedUShort1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedUShort1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedUShort1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUShort init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedUShort._(_ret, _lib, retain: true, release: true);
  }

  static SharedUShort new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedUShort1, _lib._sel_new1);
    return SharedUShort._(_ret, _lib, retain: false, release: true);
  }

  static SharedUShort allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedUShort1, _lib._sel_allocWithZone_1, zone);
    return SharedUShort._(_ret, _lib, retain: false, release: true);
  }

  static SharedUShort alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedUShort1, _lib._sel_alloc1);
    return SharedUShort._(_ret, _lib, retain: false, release: true);
  }
}

class SharedInt extends SharedNumber {
  SharedInt._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedInt] that points to the same underlying object as [other].
  static SharedInt castFrom<T extends _ObjCWrapper>(T other) {
    return SharedInt._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedInt] that wraps the given raw object pointer.
  static SharedInt castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedInt._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedInt].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedInt1);
  }

  @override
  SharedInt initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedInt1, _lib._sel_numberWithInt_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedInt1, _lib._sel_numberWithChar_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedInt1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedInt1, _lib._sel_numberWithShort_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedInt1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedInt1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedInt1, _lib._sel_numberWithLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedInt1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedInt1, _lib._sel_numberWithLongLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithUnsignedLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(
        _lib._class_SharedInt1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedInt1, _lib._sel_numberWithFloat_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedInt1, _lib._sel_numberWithDouble_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedInt1, _lib._sel_numberWithBool_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithInteger_(NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedInt1, _lib._sel_numberWithInteger_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedInt1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedInt1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedInt1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedInt1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedInt1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedInt1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedInt init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedInt new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedInt1, _lib._sel_new1);
    return SharedInt._(_ret, _lib, retain: false, release: true);
  }

  static SharedInt allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedInt1, _lib._sel_allocWithZone_1, zone);
    return SharedInt._(_ret, _lib, retain: false, release: true);
  }

  static SharedInt alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedInt1, _lib._sel_alloc1);
    return SharedInt._(_ret, _lib, retain: false, release: true);
  }
}

class SharedUInt extends SharedNumber {
  SharedUInt._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedUInt] that points to the same underlying object as [other].
  static SharedUInt castFrom<T extends _ObjCWrapper>(T other) {
    return SharedUInt._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedUInt] that wraps the given raw object pointer.
  static SharedUInt castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedUInt._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedUInt].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedUInt1);
  }

  @override
  SharedUInt initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedUInt1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedUInt1, _lib._sel_numberWithChar_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedUInt1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedUInt1, _lib._sel_numberWithShort_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedUInt1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedUInt1, _lib._sel_numberWithInt_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedUInt1, _lib._sel_numberWithLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedUInt1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedUInt1, _lib._sel_numberWithLongLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithUnsignedLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(
        _lib._class_SharedUInt1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedUInt1, _lib._sel_numberWithFloat_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedUInt1, _lib._sel_numberWithDouble_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedUInt1, _lib._sel_numberWithBool_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedUInt1, _lib._sel_numberWithInteger_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedUInt1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedUInt1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedUInt1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedUInt1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedUInt1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedUInt1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedUInt init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedUInt._(_ret, _lib, retain: true, release: true);
  }

  static SharedUInt new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedUInt1, _lib._sel_new1);
    return SharedUInt._(_ret, _lib, retain: false, release: true);
  }

  static SharedUInt allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedUInt1, _lib._sel_allocWithZone_1, zone);
    return SharedUInt._(_ret, _lib, retain: false, release: true);
  }

  static SharedUInt alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedUInt1, _lib._sel_alloc1);
    return SharedUInt._(_ret, _lib, retain: false, release: true);
  }
}

class SharedLong extends SharedNumber {
  SharedLong._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedLong] that points to the same underlying object as [other].
  static SharedLong castFrom<T extends _ObjCWrapper>(T other) {
    return SharedLong._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedLong] that wraps the given raw object pointer.
  static SharedLong castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedLong._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedLong].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedLong1);
  }

  @override
  SharedLong initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedLong1, _lib._sel_numberWithLongLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedLong1, _lib._sel_numberWithChar_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedLong1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedLong1, _lib._sel_numberWithShort_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedLong1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedLong1, _lib._sel_numberWithInt_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedLong1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedLong1, _lib._sel_numberWithLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedLong1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithUnsignedLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(
        _lib._class_SharedLong1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedLong1, _lib._sel_numberWithFloat_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedLong1, _lib._sel_numberWithDouble_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedLong1, _lib._sel_numberWithBool_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedLong1, _lib._sel_numberWithInteger_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedLong1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedLong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedLong1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedLong1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedLong1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedLong1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedLong1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedLong init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedLong._(_ret, _lib, retain: true, release: true);
  }

  static SharedLong new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedLong1, _lib._sel_new1);
    return SharedLong._(_ret, _lib, retain: false, release: true);
  }

  static SharedLong allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedLong1, _lib._sel_allocWithZone_1, zone);
    return SharedLong._(_ret, _lib, retain: false, release: true);
  }

  static SharedLong alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedLong1, _lib._sel_alloc1);
    return SharedLong._(_ret, _lib, retain: false, release: true);
  }
}

class SharedULong extends SharedNumber {
  SharedULong._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedULong] that points to the same underlying object as [other].
  static SharedULong castFrom<T extends _ObjCWrapper>(T other) {
    return SharedULong._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedULong] that wraps the given raw object pointer.
  static SharedULong castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedULong._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedULong].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedULong1);
  }

  @override
  SharedULong initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedULong1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedULong1, _lib._sel_numberWithChar_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedULong1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedULong1, _lib._sel_numberWithShort_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedULong1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedULong1, _lib._sel_numberWithInt_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedULong1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedULong1, _lib._sel_numberWithLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedULong1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedULong1, _lib._sel_numberWithLongLong_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedULong1, _lib._sel_numberWithFloat_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedULong1, _lib._sel_numberWithDouble_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedULong1, _lib._sel_numberWithBool_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedULong1, _lib._sel_numberWithInteger_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedULong1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedULong._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedULong1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedULong1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedULong1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedULong1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedULong1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedULong init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedULong._(_ret, _lib, retain: true, release: true);
  }

  static SharedULong new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedULong1, _lib._sel_new1);
    return SharedULong._(_ret, _lib, retain: false, release: true);
  }

  static SharedULong allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedULong1, _lib._sel_allocWithZone_1, zone);
    return SharedULong._(_ret, _lib, retain: false, release: true);
  }

  static SharedULong alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedULong1, _lib._sel_alloc1);
    return SharedULong._(_ret, _lib, retain: false, release: true);
  }
}

class SharedFloat extends SharedNumber {
  SharedFloat._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedFloat] that points to the same underlying object as [other].
  static SharedFloat castFrom<T extends _ObjCWrapper>(T other) {
    return SharedFloat._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedFloat] that wraps the given raw object pointer.
  static SharedFloat castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedFloat._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedFloat].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedFloat1);
  }

  @override
  SharedFloat initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedFloat1, _lib._sel_numberWithFloat_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedFloat1, _lib._sel_numberWithChar_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedFloat1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedFloat1, _lib._sel_numberWithShort_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedFloat1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedFloat1, _lib._sel_numberWithInt_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedFloat1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedFloat1, _lib._sel_numberWithLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedFloat1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedFloat1, _lib._sel_numberWithLongLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedFloat1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedFloat1, _lib._sel_numberWithDouble_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedFloat1, _lib._sel_numberWithBool_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedFloat1, _lib._sel_numberWithInteger_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedFloat1, _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedFloat1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedFloat1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedFloat1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedFloat1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedFloat1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedFloat init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedFloat._(_ret, _lib, retain: true, release: true);
  }

  static SharedFloat new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_SharedFloat1, _lib._sel_new1);
    return SharedFloat._(_ret, _lib, retain: false, release: true);
  }

  static SharedFloat allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedFloat1, _lib._sel_allocWithZone_1, zone);
    return SharedFloat._(_ret, _lib, retain: false, release: true);
  }

  static SharedFloat alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedFloat1, _lib._sel_alloc1);
    return SharedFloat._(_ret, _lib, retain: false, release: true);
  }
}

class SharedDouble extends SharedNumber {
  SharedDouble._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedDouble] that points to the same underlying object as [other].
  static SharedDouble castFrom<T extends _ObjCWrapper>(T other) {
    return SharedDouble._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedDouble] that wraps the given raw object pointer.
  static SharedDouble castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedDouble._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedDouble].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedDouble1);
  }

  @override
  SharedDouble initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedDouble1, _lib._sel_numberWithDouble_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedDouble1, _lib._sel_numberWithChar_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedDouble1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedDouble1, _lib._sel_numberWithShort_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedDouble1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedDouble1, _lib._sel_numberWithInt_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedDouble1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedDouble1, _lib._sel_numberWithLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedDouble1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedDouble1, _lib._sel_numberWithLongLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedDouble1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedDouble1, _lib._sel_numberWithFloat_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedDouble1, _lib._sel_numberWithBool_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedDouble1, _lib._sel_numberWithInteger_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(_lib._class_SharedDouble1,
        _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedDouble1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(
        _lib._class_SharedDouble1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedDouble1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedDouble1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedDouble1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedDouble init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedDouble._(_ret, _lib, retain: true, release: true);
  }

  static SharedDouble new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedDouble1, _lib._sel_new1);
    return SharedDouble._(_ret, _lib, retain: false, release: true);
  }

  static SharedDouble allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedDouble1, _lib._sel_allocWithZone_1, zone);
    return SharedDouble._(_ret, _lib, retain: false, release: true);
  }

  static SharedDouble alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedDouble1, _lib._sel_alloc1);
    return SharedDouble._(_ret, _lib, retain: false, release: true);
  }
}

class SharedBoolean extends SharedNumber {
  SharedBoolean._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedBoolean] that points to the same underlying object as [other].
  static SharedBoolean castFrom<T extends _ObjCWrapper>(T other) {
    return SharedBoolean._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedBoolean] that wraps the given raw object pointer.
  static SharedBoolean castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedBoolean._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedBoolean].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_SharedBoolean1);
  }

  @override
  SharedBoolean initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_293(_id, _lib._sel_initWithBool_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithBool_(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_SharedBoolean1, _lib._sel_numberWithBool_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_282(_id, _lib._sel_initWithChar_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_283(_id, _lib._sel_initWithUnsignedChar_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_284(_id, _lib._sel_initWithShort_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_285(_id, _lib._sel_initWithUnsignedShort_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_286(_id, _lib._sel_initWithInt_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_287(_id, _lib._sel_initWithUnsignedInt_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_288(_id, _lib._sel_initWithLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_289(_id, _lib._sel_initWithLongLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_290(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_291(_id, _lib._sel_initWithFloat_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_292(_id, _lib._sel_initWithDouble_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithInteger_(DartNSInteger value) {
    final _ret =
        _lib._objc_msgSend_288(_id, _lib._sel_initWithInteger_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithUnsignedInteger_(DartNSUInteger value) {
    final _ret =
        _lib._objc_msgSend_54(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_282(
        _lib._class_SharedBoolean1, _lib._sel_numberWithChar_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithUnsignedChar_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_SharedBoolean1, _lib._sel_numberWithUnsignedChar_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_284(
        _lib._class_SharedBoolean1, _lib._sel_numberWithShort_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithUnsignedShort_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_SharedBoolean1, _lib._sel_numberWithUnsignedShort_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_SharedBoolean1, _lib._sel_numberWithInt_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithUnsignedInt_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_287(
        _lib._class_SharedBoolean1, _lib._sel_numberWithUnsignedInt_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedBoolean1, _lib._sel_numberWithLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithUnsignedLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_SharedBoolean1, _lib._sel_numberWithUnsignedLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithLongLong_(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_289(
        _lib._class_SharedBoolean1, _lib._sel_numberWithLongLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithUnsignedLongLong_(
      NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_290(_lib._class_SharedBoolean1,
        _lib._sel_numberWithUnsignedLongLong_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithFloat_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_291(
        _lib._class_SharedBoolean1, _lib._sel_numberWithFloat_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithDouble_(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_SharedBoolean1, _lib._sel_numberWithDouble_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithInteger_(
      NativeLibrary _lib, DartNSInteger value) {
    final _ret = _lib._objc_msgSend_288(
        _lib._class_SharedBoolean1, _lib._sel_numberWithInteger_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean numberWithUnsignedInteger_(
      NativeLibrary _lib, DartNSUInteger value) {
    final _ret = _lib._objc_msgSend_54(_lib._class_SharedBoolean1,
        _lib._sel_numberWithUnsignedInteger_1, value);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean? initWithCoder_(NSCoder coder) {
    final _ret =
        _lib._objc_msgSend_14(_id, _lib._sel_initWithCoder_1, coder._id);
    return _ret.address == 0
        ? null
        : SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedBoolean1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_195(_lib._class_SharedBoolean1,
        _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeLibrary _lib, NSObject? anObject) {
    final _ret = _lib._objc_msgSend_196(_lib._class_SharedBoolean1,
        _lib._sel_valueWithNonretainedObject_1, anObject?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_SharedBoolean1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_200(
        _lib._class_SharedBoolean1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedBoolean init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedBoolean._(_ret, _lib, retain: true, release: true);
  }

  static SharedBoolean new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedBoolean1, _lib._sel_new1);
    return SharedBoolean._(_ret, _lib, retain: false, release: true);
  }

  static SharedBoolean allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedBoolean1, _lib._sel_allocWithZone_1, zone);
    return SharedBoolean._(_ret, _lib, retain: false, release: true);
  }

  static SharedBoolean alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedBoolean1, _lib._sel_alloc1);
    return SharedBoolean._(_ret, _lib, retain: false, release: true);
  }
}

class SharedGreeting extends SharedBase {
  SharedGreeting._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedGreeting] that points to the same underlying object as [other].
  static SharedGreeting castFrom<T extends _ObjCWrapper>(T other) {
    return SharedGreeting._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [SharedGreeting] that wraps the given raw object pointer.
  static SharedGreeting castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedGreeting._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedGreeting].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_SharedGreeting1);
  }

  @override
  SharedGreeting init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedGreeting._(_ret, _lib, retain: true, release: true);
  }

  static SharedGreeting new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedGreeting1, _lib._sel_new1);
    return SharedGreeting._(_ret, _lib, retain: false, release: true);
  }

  NSString greet() {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_greet1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static SharedGreeting allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedGreeting1, _lib._sel_allocWithZone_1, zone);
    return SharedGreeting._(_ret, _lib, retain: false, release: true);
  }

  static SharedGreeting alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedGreeting1, _lib._sel_alloc1);
    return SharedGreeting._(_ret, _lib, retain: false, release: true);
  }
}

class SharedIOSPlatform extends SharedBase {
  SharedIOSPlatform._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedIOSPlatform] that points to the same underlying object as [other].
  static SharedIOSPlatform castFrom<T extends _ObjCWrapper>(T other) {
    return SharedIOSPlatform._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [SharedIOSPlatform] that wraps the given raw object pointer.
  static SharedIOSPlatform castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedIOSPlatform._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedIOSPlatform].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_SharedIOSPlatform1);
  }

  @override
  SharedIOSPlatform init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedIOSPlatform._(_ret, _lib, retain: true, release: true);
  }

  static SharedIOSPlatform new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedIOSPlatform1, _lib._sel_new1);
    return SharedIOSPlatform._(_ret, _lib, retain: false, release: true);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static SharedIOSPlatform allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedIOSPlatform1, _lib._sel_allocWithZone_1, zone);
    return SharedIOSPlatform._(_ret, _lib, retain: false, release: true);
  }

  static SharedIOSPlatform alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedIOSPlatform1, _lib._sel_alloc1);
    return SharedIOSPlatform._(_ret, _lib, retain: false, release: true);
  }
}

class SharedPlatform_iosKt extends SharedBase {
  SharedPlatform_iosKt._(ffi.Pointer<ObjCObject> id, NativeLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [SharedPlatform_iosKt] that points to the same underlying object as [other].
  static SharedPlatform_iosKt castFrom<T extends _ObjCWrapper>(T other) {
    return SharedPlatform_iosKt._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [SharedPlatform_iosKt] that wraps the given raw object pointer.
  static SharedPlatform_iosKt castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return SharedPlatform_iosKt._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [SharedPlatform_iosKt].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_SharedPlatform_iosKt1);
  }

  static NSObject getPlatform(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_SharedPlatform_iosKt1, _lib._sel_getPlatform1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  SharedPlatform_iosKt init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return SharedPlatform_iosKt._(_ret, _lib, retain: true, release: true);
  }

  static SharedPlatform_iosKt new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_SharedPlatform_iosKt1, _lib._sel_new1);
    return SharedPlatform_iosKt._(_ret, _lib, retain: false, release: true);
  }

  static SharedPlatform_iosKt allocWithZone_(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_SharedPlatform_iosKt1, _lib._sel_allocWithZone_1, zone);
    return SharedPlatform_iosKt._(_ret, _lib, retain: false, release: true);
  }

  static SharedPlatform_iosKt alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_SharedPlatform_iosKt1, _lib._sel_alloc1);
    return SharedPlatform_iosKt._(_ret, _lib, retain: false, release: true);
  }
}

const int noErr = 0;

const int kNilOptions = 0;

const int kVariableLengthArray = 1;

const int kUnknownType = 1061109567;

const int normal = 0;

const int bold = 1;

const int italic = 2;

const int underline = 4;

const int outline = 8;

const int shadow = 16;

const int condense = 32;

const int extend = 64;

const int developStage = 32;

const int alphaStage = 64;

const int betaStage = 96;

const int finalStage = 128;

const int NSScannedOption = 1;

const int NSCollectorDisabledOption = 2;

const int NSASCIIStringEncoding = 1;

const int NSNEXTSTEPStringEncoding = 2;

const int NSJapaneseEUCStringEncoding = 3;

const int NSUTF8StringEncoding = 4;

const int NSISOLatin1StringEncoding = 5;

const int NSSymbolStringEncoding = 6;

const int NSNonLossyASCIIStringEncoding = 7;

const int NSShiftJISStringEncoding = 8;

const int NSISOLatin2StringEncoding = 9;

const int NSUnicodeStringEncoding = 10;

const int NSWindowsCP1251StringEncoding = 11;

const int NSWindowsCP1252StringEncoding = 12;

const int NSWindowsCP1253StringEncoding = 13;

const int NSWindowsCP1254StringEncoding = 14;

const int NSWindowsCP1250StringEncoding = 15;

const int NSISO2022JPStringEncoding = 21;

const int NSMacOSRomanStringEncoding = 30;

const int NSUTF16StringEncoding = 10;

const int NSUTF16BigEndianStringEncoding = 2415919360;

const int NSUTF16LittleEndianStringEncoding = 2483028224;

const int NSUTF32StringEncoding = 2348810496;

const int NSUTF32BigEndianStringEncoding = 2550137088;

const int NSUTF32LittleEndianStringEncoding = 2617245952;

const int NSProprietaryStringEncoding = 65536;

const int true1 = 1;

const int false1 = 0;
